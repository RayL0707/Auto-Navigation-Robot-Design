

HI-TECH Software PICC Macro Assembler V9.65PL1 build 4700 
                                                      Wed Dec 04 20:33:27 2013

HI-TECH Software Omniscient Code Generator build 4700
     1  0000                     opt subtitle "HI-TECH Software Omniscient Code 
                                 Generator build 4700"
     2                           
     3                           	processor	16F877A
     4                           clrc	macro
     5                           	bcf	status,0
     6  0000                     	endm
     7                           clrz	macro
     8                           	bcf	status,2
     9  0000                     	endm
    10                           setc	macro
    11                           	bsf	status,0
    12  0000                     	endm
    13                           setz	macro
    14                           	bsf	status,2
    15  0000                     	endm
    16                           skipc	macro
    17                           	btfss	status,0
    18  0000                     	endm
    19                           skipz	macro
    20                           	btfss	status,2
    21  0000                     	endm
    22                           skipnc	macro
    23                           	btfsc	status,0
    24  0000                     	endm
    25                           skipnz	macro
    26                           	btfsc	status,2
    27  0000                     	endm
    28  0000                     indf	equ	0
    29  0000                     indf0	equ	0
    30  0000                     pc	equ	2
    31  0000                     pcl	equ	2
    32  0000                     status	equ	3
    33  0000                     fsr	equ	4
    34  0000                     fsr0	equ	4
    35  0000                     c	equ	1
    36  0000                     z	equ	0
    37  0000                     pclath	equ	10
    38                           # 26 "C:\Program Files (x86)\HI-TECH Software\P
                                 ICC\PRO\9.65\include\PICinit.h"
    39                                                   ;76543210 0=Disallowed(
                                 Error), 1=Allowed ;#
    40                           # 27 "C:\Program Files (x86)\HI-TECH Software\P
                                 ICC\PRO\9.65\include\PICinit.h"
    41  0000                          MASK_OUT_PORTA EQU 00010000B ;bits 6,7 do 
                                 not exist, bits 0-3,5 are analog inputs ;#
    42                           # 28 "C:\Program Files (x86)\HI-TECH Software\P
                                 ICC\PRO\9.65\include\PICinit.h"
    43  0000                          MASK_OUT_PORTB EQU 11111111B ;#
    44                           # 29 "C:\Program Files (x86)\HI-TECH Software\P
                                 ICC\PRO\9.65\include\PICinit.h"
    45  0000                          MASK_OUT_PORTC EQU 00111001B ;bit 6=TX, 7=
                                 RX (RS-232), bits 1,2 are used for motor PWM ;#
    46                           # 30 "C:\Program Files (x86)\HI-TECH Software\P
                                 ICC\PRO\9.65\include\PICinit.h"
    47  0000                          MASK_OUT_PORTD EQU 11111111B ;#
    48                           # 31 "C:\Program Files (x86)\HI-TECH Software\P
                                 ICC\PRO\9.65\include\PICinit.h"
    49  0000                          MASK_OUT_PORTE EQU 00000100B ;bits 3 to 7 
                                 do not exist, bits 0,1 are digital inputs ;#
    50                           # 34 "C:\Program Files (x86)\HI-TECH Software\P
                                 ICC\PRO\9.65\include\PICinit.h"
    51                                                   ;76543210 0=Disallowed(
                                 Error), 1=Allowed ;#
    52                           # 35 "C:\Program Files (x86)\HI-TECH Software\P
                                 ICC\PRO\9.65\include\PICinit.h"
    53  0000                          MASK_IN_PORTA EQU 00000000B ;bits 6,7 do n
                                 ot exist, rest are all outputs ;#
    54                           # 36 "C:\Program Files (x86)\HI-TECH Software\P
                                 ICC\PRO\9.65\include\PICinit.h"
    55  0000                          MASK_IN_PORTB EQU 11111111B ;#
    56                           # 37 "C:\Program Files (x86)\HI-TECH Software\P
                                 ICC\PRO\9.65\include\PICinit.h"
    57  0000                          MASK_IN_PORTC EQU 00000000B ;bit 6=TX, 7=R
                                 X (RS-232), rest are all outputs ;#
    58                           # 38 "C:\Program Files (x86)\HI-TECH Software\P
                                 ICC\PRO\9.65\include\PICinit.h"
    59  0000                          MASK_IN_PORTD EQU 11111111B ;#
    60                           # 39 "C:\Program Files (x86)\HI-TECH Software\P
                                 ICC\PRO\9.65\include\PICinit.h"
    61  0000                          MASK_IN_PORTE EQU 00000011B ;bits 3 to 7 d
                                 o not exist, bit 2 is an output ;#
    62                           # 42 "C:\Program Files (x86)\HI-TECH Software\P
                                 ICC\PRO\9.65\include\PICinit.h"
    63  0000                       TXREG EQU 19h ;#
    64                           # 43 "C:\Program Files (x86)\HI-TECH Software\P
                                 ICC\PRO\9.65\include\PICinit.h"
    65  0000                       INTCON EQU 0Bh ;#
    66                           # 44 "C:\Program Files (x86)\HI-TECH Software\P
                                 ICC\PRO\9.65\include\PICinit.h"
    67  0000                       PORTA EQU 05h ;#
    68                           # 45 "C:\Program Files (x86)\HI-TECH Software\P
                                 ICC\PRO\9.65\include\PICinit.h"
    69  0000                       PORTB EQU 06h ;#
    70                           # 46 "C:\Program Files (x86)\HI-TECH Software\P
                                 ICC\PRO\9.65\include\PICinit.h"
    71  0000                       PORTC EQU 07h ;#
    72                           # 47 "C:\Program Files (x86)\HI-TECH Software\P
                                 ICC\PRO\9.65\include\PICinit.h"
    73  0000                       PORTD EQU 08h ;#
    74                           # 48 "C:\Program Files (x86)\HI-TECH Software\P
                                 ICC\PRO\9.65\include\PICinit.h"
    75  0000                       PORTE EQU 09h ;#
    76                           	FNCALL _version,stringtab
    77                           	FNCALL _version,stringtab
    78                           	FNCALL _version,stringtab
    79                           	FNCALL _version,stringtab
    80                           	FNCALL _version,stringtab
    81                           	FNCALL _version,stringtab
    82                           	FNCALL _version,stringtab
    83                           	FNCALL _version,stringtab
    84                           global __tempreg
    85  0000                     __tempreg	set	32
    86                           global __Lrbss_0, __Hrbss_0
    87  0000                     __Lrbss_0 set 0x41
    88  0000                     __Hrbss_0 set 0x5D
    89                           global __Lcommon, __Hcommon
    90  0000                     __Lcommon set 0x7A
    91  0000                     __Hcommon set 0x7E
    92                           global __Lrbss_1, __Hrbss_1
    93  0000                     __Lrbss_1 set 0xE4
    94  0000                     __Hrbss_1 set 0xF0
    95                           global __Lrdata_0, __Hrdata_0
    96  0000                     __Lrdata_0	equ	0x40
    97  0000                     __Hrdata_0	equ	0x41
    98                           global __Lramdata, __Lrdata_0, __Hramdata, __Hr
                                 data_0
    99  0000                     __Lramdata	set	__Lrdata_0
   100  0000                     __Hramdata	set	__Hrdata_0
   101                           	GLOBAL	__databank
   102  0000                     __databank	EQU	0
   103                           	FNCALL _version,stringtab
   104                           	FNCALL _version,stringtab
   105                           	FNCALL _version,stringtab
   106                           	FNCALL _version,stringtab
   107                           	FNCALL _version,stringtab
   108                           	FNCALL _version,stringtab
   109                           	FNCALL _version,stringtab
   110                           	FNCALL _version,stringtab
   111  0000                     ___lwdiv_counter	equ	??___lwdiv+0
   112                           	global	___lwdiv_counter
   113  0000                     ___lwdiv_quotient	equ	??___lwdiv+1
   114                           	global	___lwdiv_quotient
   115  0000                     ___lwdiv_dividend	equ	?___lwdiv+0
   116                           	global	___lwdiv_dividend
   117  0000                     ___lwdiv_divisor	equ	?___lwdiv+2
   118                           	global	___lwdiv_divisor
   119  0000                     _version_i	equ	??_version+0
   120                           	global	_version_i
   121  0000                     _putdata_data	equ	?_putdata+0
   122                           	global	_putdata_data
   123  0000                     _read_adc_channel	equ	??_read_adc+0
   124                           	global	_read_adc_channel
   125  0000                     _read_adc_i	equ	??_read_adc+1
   126                           	global	_read_adc_i
   127  0000                     _read_adc_iADout	equ	??_read_adc+2
   128                           	global	_read_adc_iADout
   129  0000                     _read_adc_iVoltsSum	equ	??_read_adc+4
   130                           	global	_read_adc_iVoltsSum
   131  0000                     _read_input_Port	equ	??_read_input+0
   132                           	global	_read_input_Port
   133  0000                     _read_input_Bit	equ	?_read_input+0
   134                           	global	_read_input_Bit
   135  0000                     _pause_cTimeTmp	equ	??_pause+0
   136                           	global	_pause_cTimeTmp
   137  0000                     _pause_time	equ	?_pause+0
   138                           	global	_pause_time
   139  0000                     _motorspeed_motornum	equ	??_motorspeed+0
   140                           	global	_motorspeed_motornum
   141  0000                     _motorspeed_speed	equ	?_motorspeed+0
   142                           	global	_motorspeed_speed
   143  0000                     _output_low_Port	equ	??_output_low+0
   144                           	global	_output_low_Port
   145  0000                     _output_low_Bit	equ	?_output_low+0
   146                           	global	_output_low_Bit
   147  0000                     _output_high_Port	equ	??_output_high+0
   148                           	global	_output_high_Port
   149  0000                     _output_high_Bit	equ	?_output_high+0
   150                           	global	_output_high_Bit
   151  0000                     _putchar_data	equ	??_putchar+0
   152                           	global	_putchar_data
   153  0000                     i1_pause_cTimeTmp	equ	??i1_pause+0
   154                           	global	i1_pause_cTimeTmp
   155  0000                     i1_pause_time	equ	?i1_pause+0
   156                           	global	i1_pause_time
   157  0000                     i1_read_adc_channel	equ	??i1_read_adc+0
   158                           	global	i1_read_adc_channel
   159  0000                     i1_read_adc_i	equ	??i1_read_adc+1
   160                           	global	i1_read_adc_i
   161  0000                     i1_read_adc_iADout	equ	??i1_read_adc+2
   162                           	global	i1_read_adc_iADout
   163  0000                     i1_read_adc_iVoltsSum	equ	??i1_read_adc+4
   164                           	global	i1_read_adc_iVoltsSum
   165                           ;Data sizes: Strings 19, constant 0, data 1, bs
                                 s 0, persistent 0 stack 31
   166                           	global	_main
   167                           	global	??_main
   168                           	global	?_main
   169                           
   170                           ; *************** function _main **************
                                 *
   171                           ; Defined at:
   172                           ;		line 18 in file "test1.c"
   173                           ; Parameters:
   174                           ;		None
   175                           ; Auto variables:
   176                           ;		None
   177                           ; Return value:
   178                           ;		type: int 
   179                           ;		size: 2
   180                           ; Registers used:
   181                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pcla
                                 th, cstack
   182                           ; Tracked objects:
   183                           ;		On entry : BFF/0
   184                           ;		On exit  : 0/0
   185                           ;		Unchanged: 0/0
   186                           ; Data sizes:
   187                           ;		Autos:    0
   188                           ;		Params:   0
   189                           ;		Temp:     0
   190                           ;		Total:    0
   191                           ; This function calls:
   192                           ;		_configurePIC
   193                           ;		_motorspeed
   194                           ;		_output_high
   195                           ;		_read_adc
   196                           ;		_pause
   197                           ;		_output_low
   198                           ;		_navigation
   199                           ;		_target
   200                           ;		_forward
   201                           ;		_motorsoff
   202                           ; This function is called by:
   203                           ;		Startup code after reset
   204                           ; This function uses a non-reentrant model
   205                           ; 
   206                           	psect	maintext,class=CODE,delta=2
   207                           	file	"test1.c"
   208                           	line	18
   209                           	psect	maintext
   210                           ;test1.c: 16: unsigned int sensor0[5],sensor1=0
                                 ,sensor2[5],sensor3=0,sensor5=0,sensor=0,floor,
                                 color,i,sum=0,average,a,b=0;
   211                           ;test1.c: 17: main()
   212                           ;test1.c: 18: {
   213                           	
   214  004C                     _main:	
   215                           	opt stack 4
   216                           ; Regs used in _main: [wreg-fsr0h+status,2+stat
                                 us,0+pclath+cstack]
   217                           	line	20
   218                           ;test1.c: 20: configurePIC();
   219  004C  120A  118A  266E   	fcall	_configurePIC
              120A  118A         
   220                           	line	21
   221                           ;test1.c: 21: INTE = 1;
   222  0051  1283               	bcf	status, 5	;RP0=0, select bank0
   223  0052  1303               	bcf	status, 6	;RP1=0, select bank0
   224  0053  160B               	bsf	(92/8),(92)&7
   225                           	line	22
   226                           ;test1.c: 22: GIE = 1;
   227  0054  178B               	bsf	(95/8),(95)&7
   228                           	line	23
   229                           ;test1.c: 23: motorspeed(1,93);
   230  0055  305D               	movlw	(05Dh)
   231                           	
   232  0056  00A3               	movwf	(?_motorspeed)
   233  0057  3001               	movlw	(01h)
   234  0058  120A  158A  25AC   	fcall	_motorspeed
              120A  118A         
   235                           	line	24
   236                           ;test1.c: 24: motorspeed(2,100);
   237  005D  3064               	movlw	(064h)
   238  005E  1283               	bcf	status, 5	;RP0=0, select bank0
   239  005F  1303               	bcf	status, 6	;RP1=0, select bank0
   240                           	
   241  0060  00A3               	movwf	(?_motorspeed)
   242  0061  3002               	movlw	(02h)
   243  0062  120A  158A  25AC   	fcall	_motorspeed
              120A  118A         
   244                           	line	25
   245                           ;test1.c: 25: output_high('a',4);
   246  0067  3004               	movlw	(04h)
   247  0068  1283               	bcf	status, 5	;RP0=0, select bank0
   248  0069  1303               	bcf	status, 6	;RP1=0, select bank0
   249                           	
   250  006A  00B3               	movwf	(?_output_high)
   251  006B  3061               	movlw	(061h)
   252  006C  120A  158A  2448   	fcall	_output_high
              120A  118A         
   253                           	line	26
   254                           ;test1.c: 26: output_high('e',2);
   255  0071  3002               	movlw	(02h)
   256  0072  1283               	bcf	status, 5	;RP0=0, select bank0
   257  0073  1303               	bcf	status, 6	;RP1=0, select bank0
   258+                          	
   259+ 0074  00B3               	movwf	(?_output_high)
   260+ 0075  3065               	movlw	(065h)
   261+ 0076  120A  158A  2448   	fcall	_output_high
      +       120A  118A         
   262+                          	line	29
   263+                          ;test1.c: 29: output_high('d',0);
   264+ 007B  1003               	clrc
   265+ 007C  1283               	bcf	status, 5	;RP0=0, select bank0
   266+ 007D  1303               	bcf	status, 6	;RP1=0, select bank0
   267+                          	
   268+ 007E  3000               	movlw	0
   269+ 007F  1803               	btfsc	status,0
   270+ 0080  3001               	movlw	1
   271+ 0081  00B3               	movwf	(?_output_high)
   272+ 0082  3064               	movlw	(064h)
   273+ 0083  120A  158A  2448   	fcall	_output_high
      +       120A  118A         
   274+                          	line	30
   275+                          ;test1.c: 30: sensor1=read_adc(1);
   276+ 0088  3001               	movlw	(01h)
   277+ 0089  120A  118A  2731   	fcall	_read_adc
      +       120A  118A         
   278+                          	
   279+ 008E  1283               	bcf	status, 5	;RP0=0, select bank0
   280+ 008F  1303               	bcf	status, 6	;RP1=0, select bank0
   281+ 0090  0824               	movf	(1+?_read_adc),w
   282+ 0091  01FB               	clrf	(122+1)
   283+ 0092  07FB               	addwf	(122+1)
   284  0093  0823               	movf	(0+?_read_adc),w
   285+ 0094  01FA               	clrf	(122)
   286+ 0095  07FA               	addwf	(122)
   287+                          
   288+                          	line	31
   289+                          ;test1.c: 31: pause(100);
   290+ 0096  3064               	movlw	low(064h)
   291+                          	
   292+ 0097  00A3               	movwf	(?_pause)
   293+ 0098  3000               	movlw	high(064h)
   294+ 0099  00A4               	movwf	((?_pause))+1
   295  009A  120A  158A  2408   	fcall	_pause
              120A  118A         
   296+                          	line	32
   297+                          ;test1.c: 32: output_low('d',0);
   298+ 009F  1003               	clrc
   299+ 00A0  1283               	bcf	status, 5	;RP0=0, select bank0
   300+ 00A1  1303               	bcf	status, 6	;RP1=0, select bank0
   301+                          	
   302+ 00A2  3000               	movlw	0
   303+ 00A3  1803               	btfsc	status,0
   304+ 00A4  3001               	movlw	1
   305  00A5  00B3               	movwf	(?_output_low)
   306+ 00A6  3064               	movlw	(064h)
   307+ 00A7  120A  158A  249D   	fcall	_output_low
      +       120A  118A         
   308+                          	line	33
   309+                          ;test1.c: 33: if(sensor1<20000)
   310+                          	
   311+ 00AC  304E               	movlw	high(04E20h)
   312+ 00AD  027B               	subwf	(122+1),w
   313+ 00AE  3020               	movlw	low(04E20h)
   314+ 00AF  1903               	skipnz
   315  00B0  027A               	subwf	(122),w
   316+ 00B1  1803               	skipnc
   317+ 00B2  28B4               	goto	u2281
   318+ 00B3  28B5               	goto	u2280
   319+ 00B4                     u2281:
   320+ 00B4  28BC               	goto	l51
   321+ 00B5                     u2280:
   322                           	line	34
   323                           ;test1.c: 34: floor=0;
   324  00B5  3000               	movlw	low(0)
   325+ 00B6  1283               	bcf	status, 5	;RP0=0, select bank0
   326+ 00B7  1303               	bcf	status, 6	;RP1=0, select bank0
   327+                          	
   328+ 00B8  00C3               	movwf	(67)
   329+ 00B9  3000               	movlw	high(0)
   330+ 00BA  00C4               	movwf	((67))+1
   331+ 00BB  28C2               	goto	l54
   332                           	line	35
   333                           	
   334  00BC                     l51:	
   335+                          	line	36
   336+                          ;test1.c: 35: else
   337+                          ;test1.c: 36: floor=1;
   338+ 00BC  3001               	movlw	low(01h)
   339+ 00BD  1283               	bcf	status, 5	;RP0=0, select bank0
   340+ 00BE  1303               	bcf	status, 6	;RP1=0, select bank0
   341+                          	
   342+ 00BF  00C3               	movwf	(67)
   343+ 00C0  3000               	movlw	high(01h)
   344+ 00C1  00C4               	movwf	((67))+1
   345                           	
   346  00C2                     l52:	
   347+                          	line	38
   348+                          ;test1.c: 38: while(1)
   349+                          	
   350+ 00C2                     l54:	
   351+                          	line	40
   352+                          ;test1.c: 39: {
   353+                          ;test1.c: 40: output_high('d',0);
   354+ 00C2  1003               	clrc
   355+ 00C3  1283               	bcf	status, 5	;RP0=0, select bank0
   356  00C4  1303               	bcf	status, 6	;RP1=0, select bank0
   357+                          	
   358+ 00C5  3000               	movlw	0
   359+ 00C6  1803               	btfsc	status,0
   360  00C7  3001               	movlw	1
   361+ 00C8  00B3               	movwf	(?_output_high)
   362+ 00C9  3064               	movlw	(064h)
   363+ 00CA  120A  158A  2448   	fcall	_output_high
      +       120A  118A         
   364+                          	line	41
   365+                          ;test1.c: 41: sensor1=read_adc(1);
   366+ 00CF  3001               	movlw	(01h)
   367+ 00D0  120A  118A  2731   	fcall	_read_adc
      +       120A  118A         
   368+                          	
   369+ 00D5  1283               	bcf	status, 5	;RP0=0, select bank0
   370  00D6  1303               	bcf	status, 6	;RP1=0, select bank0
   371+ 00D7  0824               	movf	(1+?_read_adc),w
   372+ 00D8  01FB               	clrf	(122+1)
   373+ 00D9  07FB               	addwf	(122+1)
   374  00DA  0823               	movf	(0+?_read_adc),w
   375+ 00DB  01FA               	clrf	(122)
   376+ 00DC  07FA               	addwf	(122)
   377                           
   378                           	line	42
   379                           ;test1.c: 42: pause(100);
   380  00DD  3064               	movlw	low(064h)
   381+                          	
   382+ 00DE  00A3               	movwf	(?_pause)
   383+ 00DF  3000               	movlw	high(064h)
   384+ 00E0  00A4               	movwf	((?_pause))+1
   385+ 00E1  120A  158A  2408   	fcall	_pause
      +       120A  118A         
   386+                          	line	43
   387+                          ;test1.c: 43: output_low('d',0);
   388+ 00E6  1003               	clrc
   389+ 00E7  1283               	bcf	status, 5	;RP0=0, select bank0
   390  00E8  1303               	bcf	status, 6	;RP1=0, select bank0
   391+                          	
   392+ 00E9  3000               	movlw	0
   393+ 00EA  1803               	btfsc	status,0
   394+ 00EB  3001               	movlw	1
   395+ 00EC  00B3               	movwf	(?_output_low)
   396+ 00ED  3064               	movlw	(064h)
   397+ 00EE  120A  158A  249D   	fcall	_output_low
      +       120A  118A         
   398                           	line	44
   399                           ;test1.c: 44: if(sensor1<20000)
   400                           	
   401  00F3  304E               	movlw	high(04E20h)
   402+ 00F4  027B               	subwf	(122+1),w
   403+ 00F5  3020               	movlw	low(04E20h)
   404+ 00F6  1903               	skipnz
   405  00F7  027A               	subwf	(122),w
   406  00F8  1803               	skipnc
   407  00F9  28FB               	goto	u2291
   408  00FA  28FC               	goto	u2290
   409  00FB                     u2291:
   410  00FB  2903               	goto	l56
   411  00FC                     u2290:
   412                           	line	45
   413                           ;test1.c: 45: color=0;
   414  00FC  3000               	movlw	low(0)
   415  00FD  1283               	bcf	status, 5	;RP0=0, select bank0
   416  00FE  1303               	bcf	status, 6	;RP1=0, select bank0
   417                           	
   418  00FF  00C1               	movwf	(65)
   419  0100  3000               	movlw	high(0)
   420  0101  00C2               	movwf	((65))+1
   421  0102  2909               	goto	l57
   422                           	line	46
   423                           	
   424  0103                     l56:	
   425                           	line	47
   426                           ;test1.c: 46: else
   427                           ;test1.c: 47: color=1;
   428  0103  3001               	movlw	low(01h)
   429  0104  1283               	bcf	status, 5	;RP0=0, select bank0
   430  0105  1303               	bcf	status, 6	;RP1=0, select bank0
   431                           	
   432  0106  00C1               	movwf	(65)
   433  0107  3000               	movlw	high(01h)
   434  0108  00C2               	movwf	((65))+1
   435                           	
   436  0109                     l57:	
   437                           	line	49
   438                           ;test1.c: 49: if(color==floor)
   439                           	
   440                           	
   441  0109  0844               	movf	(67+1),w
   442  010A  0642               	xorwf	(65+1),w
   443  010B  1D03               	skipz
   444  010C  290F               	goto	u2305
   445  010D  0843               	movf	(67),w
   446  010E  0641               	xorwf	(65),w
   447  010F                     u2305:
   448                           
   449  010F  1D03               	skipz
   450  0110  2912               	goto	u2301
   451  0111  2913               	goto	u2300
   452  0112                     u2301:
   453  0112  2919               	goto	l58
   454  0113                     u2300:
   455                           	line	50
   456                           ;test1.c: 50: navigation();
   457  0113  120A  118A  2223   	fcall	_navigation
              120A  118A         
   458  0118  291E               	goto	l59
   459                           	line	51
   460                           	
   461  0119                     l58:	
   462                           	line	52
   463                           ;test1.c: 51: else
   464                           ;test1.c: 52: target();
   465  0119  120A  118A  2461   	fcall	_target
              120A  118A         
   466                           	
   467  011E                     l59:	
   468                           	line	53
   469                           ;test1.c: 53: forward();
   470  011E  120A  158A  2376   	fcall	_forward
              120A  118A         
   471                           	line	54
   472                           ;test1.c: 54: pause(2800);
   473  0123  30F0               	movlw	low(0AF0h)
   474  0124  1283               	bcf	status, 5	;RP0=0, select bank0
   475  0125  1303               	bcf	status, 6	;RP1=0, select bank0
   476                           	
   477  0126  00A3               	movwf	(?_pause)
   478  0127  300A               	movlw	high(0AF0h)
   479  0128  00A4               	movwf	((?_pause))+1
   480  0129  120A  158A  2408   	fcall	_pause
              120A  118A         
   481                           	line	55
   482                           ;test1.c: 55: motorsoff();
   483  012E  120A  158A  231C   	fcall	_motorsoff
              120A  118A         
   484                           	line	66
   485                           	
   486  0133                     l53:	
   487                           	line	38
   488  0133  28C2               	goto	l54
   489                           	global	start
   490  0134  120A  118A  2812   	ljmp	start
   491                           ; =============== function _main ends =========
                                 ======
   492                           
   493                           GLOBAL __end_of_main
   494  0137                     	__end_of_main:
   495                           	FNSIZE	_main,0,0
   496                           	psect	maintext
   497                           	line	67
   498                           	signat	_main,90
   499                           	global	_navigation
   500                           	global	??_navigation
   501                           	global	?_navigation
   502                           
   503                           ; *************** function _navigation ********
                                 *******
   504                           ; Defined at:
   505                           ;		line 211 in file "test1.c"
   506                           ; Parameters:
   507                           ;		None
   508                           ; Auto variables:
   509                           ;		None
   510                           ; Return value:
   511                           ;		type: void 
   512                           ;		size: 0
   513                           ; Registers used:
   514                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pcla
                                 th, cstack
   515                           ; Tracked objects:
   516                           ;		On entry : 300/0
   517                           ;		On exit  : 0/0
   518                           ;		Unchanged: 0/0
   519                           ; Data sizes:
   520                           ;		Autos:    0
   521                           ;		Params:   0
   522                           ;		Temp:     3
   523                           ;		Total:    3
   524                           ; This function calls:
   525                           ;		_read_adc
   526                           ;		_forward
   527                           ;		_pivotleft
   528                           ;		_pivotright
   529                           ;		_pause
   530                           ;		_motorsoff
   531                           ;		_motorspeed
   532                           ;		___lwdiv
   533                           ; This function is called by:
   534                           ;		_main
   535                           ; This function uses a non-reentrant model
   536                           ; 
   537                           	psect	text206,local,class=CODE,delta=2
   538                           	file	"test1.c"
   539                           	line	211
   540                           ;test1.c: 210: void navigation()
   541                           ;test1.c: 211: {
   542                           	
   543  0223                     _navigation:	
   544                           	opt stack 3
   545                           ; Regs used in _navigation: [wreg-fsr0h+status,
                                 2+status,0+pclath+cstack]
   546                           	line	212
   547                           ;test1.c: 212: b=0;
   548  0223  3000               	movlw	low(0)
   549  0224  1683               	bsf	status, 5	;RP0=1, select bank1
   550  0225  1303               	bcf	status, 6	;RP1=0, select bank1
   551                           	
   552  0226  00E4               	movwf	(228)^080h
   553  0227  3000               	movlw	high(0)
   554  0228  00E5               	movwf	((228)^080h)+1
   555                           	line	213
   556                           ;test1.c: 213: sensor3 = read_adc (3);
   557  0229  3003               	movlw	(03h)
   558  022A  120A  118A  2731   	fcall	_read_adc
              120A  118A         
   559                           	
   560  022F  1283               	bcf	status, 5	;RP0=0, select bank0
   561  0230  1303               	bcf	status, 6	;RP1=0, select bank0
   562  0231  0824               	movf	(1+?_read_adc),w
   563  0232  01FD               	clrf	(124+1)
   564  0233  07FD               	addwf	(124+1)
   565  0234  0823               	movf	(0+?_read_adc),w
   566  0235  01FC               	clrf	(124)
   567  0236  07FC               	addwf	(124)
   568                           
   569                           	line	214
   570                           ;test1.c: 214: sensor5 = read_adc (5);
   571  0237  3005               	movlw	(05h)
   572  0238  120A  118A  2731   	fcall	_read_adc
              120A  118A         
   573  023D  1283               	bcf	status, 5	;RP0=0, select bank0
   574  023E  1303               	bcf	status, 6	;RP1=0, select bank0
   575                           	
   576  023F  0824               	movf	(1+?_read_adc),w
   577  0240  01DA               	clrf	(89+1)
   578  0241  07DA               	addwf	(89+1)
   579  0242  0823               	movf	(0+?_read_adc),w
   580  0243  01D9               	clrf	(89)
   581  0244  07D9               	addwf	(89)
   582                           
   583                           	line	216
   584                           ;test1.c: 216: sensor0[0]=read_adc(0);
   585  0245  3000               	movlw	(0)
   586  0246  120A  118A  2731   	fcall	_read_adc
              120A  118A         
   587  024B  1683               	bsf	status, 5	;RP0=1, select bank1
   588  024C  1303               	bcf	status, 6	;RP1=0, select bank1
   589                           	
   590  024D  1283               	bcf	status, 5	;RP0=0, select bank0
   591  024E  1303               	bcf	status, 6	;RP1=0, select bank0
   592  024F  0824               	movf	(1+?_read_adc),w
   593  0250  1683               	bsf	status, 5	;RP0=1, select bank1
   594  0251  1303               	bcf	status, 6	;RP1=0, select bank1
   595  0252  01E7               	clrf	(230+1)^080h
   596  0253  07E7               	addwf	(230+1)^080h
   597  0254  1283               	bcf	status, 5	;RP0=0, select bank0
   598  0255  1303               	bcf	status, 6	;RP1=0, select bank0
   599  0256  0823               	movf	(0+?_read_adc),w
   600  0257  1683               	bsf	status, 5	;RP0=1, select bank1
   601  0258  1303               	bcf	status, 6	;RP1=0, select bank1
   602  0259  01E6               	clrf	(230)^080h
   603  025A  07E6               	addwf	(230)^080h
   604                           
   605                           	line	217
   606                           ;test1.c: 217: sensor=sensor0[0];
   607                           	
   608  025B  1283               	bcf	status, 5	;RP0=0, select bank0
   609  025C  1303               	bcf	status, 6	;RP1=0, select bank0
   610                           	
   611  025D  1683               	bsf	status, 5	;RP0=1, select bank1
   612  025E  1303               	bcf	status, 6	;RP1=0, select bank1
   613  025F  0867               	movf	(230+1)^080h,w
   614  0260  1283               	bcf	status, 5	;RP0=0, select bank0
   615  0261  1303               	bcf	status, 6	;RP1=0, select bank0
   616  0262  01DC               	clrf	(91+1)
   617  0263  07DC               	addwf	(91+1)
   618  0264  1683               	bsf	status, 5	;RP0=1, select bank1
   619  0265  1303               	bcf	status, 6	;RP1=0, select bank1
   620  0266  0866               	movf	(230)^080h,w
   621  0267  1283               	bcf	status, 5	;RP0=0, select bank0
   622  0268  1303               	bcf	status, 6	;RP1=0, select bank0
   623  0269  01DB               	clrf	(91)
   624  026A  07DB               	addwf	(91)
   625                           
   626                           	line	219
   627                           ;test1.c: 219: while(sensor>10000)
   628  026B  2AC9               	goto	l92
   629                           	
   630  026C                     l93:	
   631                           	line	220
   632                           ;test1.c: 220: {if(b>23)
   633  026C  1683               	bsf	status, 5	;RP0=1, select bank1
   634  026D  1303               	bcf	status, 6	;RP1=0, select bank1
   635                           	
   636  026E  3000               	movlw	high(018h)
   637  026F  0265               	subwf	(228+1)^080h,w
   638  0270  3018               	movlw	low(018h)
   639  0271  1903               	skipnz
   640  0272  0264               	subwf	(228)^080h,w
   641  0273  1C03               	skipc
   642  0274  2A76               	goto	u2341
   643  0275  2A77               	goto	u2340
   644  0276                     u2341:
   645  0276  2A7D               	goto	l95
   646  0277                     u2340:
   647                           	line	221
   648                           ;test1.c: 221: {forward();break;}
   649  0277  120A  158A  2376   	fcall	_forward
              120A  118A         
   650  027C  2AD3               	goto	l94
   651                           	
   652  027D                     l95:	
   653                           	line	222
   654                           ;test1.c: 222: sensor=sensor0[0];
   655                           	
   656  027D  1283               	bcf	status, 5	;RP0=0, select bank0
   657  027E  1303               	bcf	status, 6	;RP1=0, select bank0
   658                           	
   659  027F  1683               	bsf	status, 5	;RP0=1, select bank1
   660  0280  1303               	bcf	status, 6	;RP1=0, select bank1
   661  0281  0867               	movf	(230+1)^080h,w
   662  0282  1283               	bcf	status, 5	;RP0=0, select bank0
   663  0283  1303               	bcf	status, 6	;RP1=0, select bank0
   664  0284  01DC               	clrf	(91+1)
   665  0285  07DC               	addwf	(91+1)
   666  0286  1683               	bsf	status, 5	;RP0=1, select bank1
   667  0287  1303               	bcf	status, 6	;RP1=0, select bank1
   668  0288  0866               	movf	(230)^080h,w
   669  0289  1283               	bcf	status, 5	;RP0=0, select bank0
   670  028A  1303               	bcf	status, 6	;RP1=0, select bank0
   671  028B  01DB               	clrf	(91)
   672  028C  07DB               	addwf	(91)
   673                           
   674                           	line	223
   675                           ;test1.c: 223: if(sensor3<sensor5)
   676                           	
   677                           	
   678  028D  085A               	movf	(89+1),w
   679  028E  027D               	subwf	(124+1),w
   680  028F  1D03               	skipz
   681  0290  2A93               	goto	u2355
   682  0291  0859               	movf	(89),w
   683  0292  027C               	subwf	(124),w
   684  0293                     u2355:
   685  0293  1803               	skipnc
   686  0294  2A96               	goto	u2351
   687  0295  2A97               	goto	u2350
   688  0296                     u2351:
   689  0296  2A9D               	goto	l96
   690  0297                     u2350:
   691                           	line	224
   692                           ;test1.c: 224: pivotleft();
   693  0297  120A  158A  22EF   	fcall	_pivotleft
              120A  118A         
   694  029C  2AA2               	goto	l97
   695                           	line	225
   696                           	
   697  029D                     l96:	
   698                           	line	226
   699                           ;test1.c: 225: else
   700                           ;test1.c: 226: pivotright();
   701  029D  120A  158A  2349   	fcall	_pivotright
              120A  118A         
   702                           	
   703  02A2                     l97:	
   704                           	line	227
   705                           ;test1.c: 227: pause(90);
   706  02A2  305A               	movlw	low(05Ah)
   707  02A3  1283               	bcf	status, 5	;RP0=0, select bank0
   708  02A4  1303               	bcf	status, 6	;RP1=0, select bank0
   709                           	
   710  02A5  00A3               	movwf	(?_pause)
   711  02A6  3000               	movlw	high(05Ah)
   712  02A7  00A4               	movwf	((?_pause))+1
   713  02A8  120A  158A  2408   	fcall	_pause
              120A  118A         
   714                           	line	229
   715                           ;test1.c: 229: sensor0[0]=read_adc(0);
   716  02AD  3000               	movlw	(0)
   717  02AE  120A  118A  2731   	fcall	_read_adc
              120A  118A         
   718  02B3  1683               	bsf	status, 5	;RP0=1, select bank1
   719  02B4  1303               	bcf	status, 6	;RP1=0, select bank1
   720                           	
   721  02B5  1283               	bcf	status, 5	;RP0=0, select bank0
   722  02B6  1303               	bcf	status, 6	;RP1=0, select bank0
   723  02B7  0824               	movf	(1+?_read_adc),w
   724  02B8  1683               	bsf	status, 5	;RP0=1, select bank1
   725  02B9  1303               	bcf	status, 6	;RP1=0, select bank1
   726  02BA  01E7               	clrf	(230+1)^080h
   727  02BB  07E7               	addwf	(230+1)^080h
   728  02BC  1283               	bcf	status, 5	;RP0=0, select bank0
   729  02BD  1303               	bcf	status, 6	;RP1=0, select bank0
   730  02BE  0823               	movf	(0+?_read_adc),w
   731  02BF  1683               	bsf	status, 5	;RP0=1, select bank1
   732  02C0  1303               	bcf	status, 6	;RP1=0, select bank1
   733  02C1  01E6               	clrf	(230)^080h
   734  02C2  07E6               	addwf	(230)^080h
   735                           
   736                           	line	230
   737                           ;test1.c: 230: b++;
   738                           	
   739  02C3  3001               	movlw	low(01h)
   740  02C4  07E4               	addwf	(228)^080h,f
   741  02C5  1803               	skipnc
   742  02C6  0AE5               	incf	(228+1)^080h,f
   743  02C7  3000               	movlw	high(01h)
   744  02C8  07E5               	addwf	(228+1)^080h,f
   745                           	line	231
   746                           	
   747  02C9                     l92:	
   748                           	line	219
   749  02C9  1283               	bcf	status, 5	;RP0=0, select bank0
   750                           	
   751  02CA  3027               	movlw	high(02711h)
   752  02CB  025C               	subwf	(91+1),w
   753  02CC  3011               	movlw	low(02711h)
   754  02CD  1903               	skipnz
   755  02CE  025B               	subwf	(91),w
   756  02CF  1803               	skipnc
   757  02D0  2AD2               	goto	u2361
   758  02D1  2AD3               	goto	u2360
   759  02D2                     u2361:
   760  02D2  2A6C               	goto	l93
   761  02D3                     u2360:
   762                           	
   763  02D3                     l94:	
   764                           	line	232
   765                           ;test1.c: 231: }
   766                           ;test1.c: 232: motorsoff();
   767  02D3  120A  158A  231C   	fcall	_motorsoff
              120A  118A         
   768                           	line	233
   769                           ;test1.c: 233: pause(500);
   770  02D8  30F4               	movlw	low(01F4h)
   771  02D9  1283               	bcf	status, 5	;RP0=0, select bank0
   772  02DA  1303               	bcf	status, 6	;RP1=0, select bank0
   773                           	
   774  02DB  00A3               	movwf	(?_pause)
   775  02DC  3001               	movlw	high(01F4h)
   776  02DD  00A4               	movwf	((?_pause))+1
   777  02DE  120A  158A  2408   	fcall	_pause
              120A  118A         
   778                           	line	234
   779                           ;test1.c: 234: motorspeed(1,50);
   780  02E3  3032               	movlw	(032h)
   781  02E4  1283               	bcf	status, 5	;RP0=0, select bank0
   782  02E5  1303               	bcf	status, 6	;RP1=0, select bank0
   783                           	
   784  02E6  00A3               	movwf	(?_motorspeed)
   785  02E7  3001               	movlw	(01h)
   786  02E8  120A  158A  25AC   	fcall	_motorspeed
              120A  118A         
   787                           	line	235
   788                           ;test1.c: 235: motorspeed(2,70);
   789  02ED  3046               	movlw	(046h)
   790  02EE  1283               	bcf	status, 5	;RP0=0, select bank0
   791  02EF  1303               	bcf	status, 6	;RP1=0, select bank0
   792                           	
   793  02F0  00A3               	movwf	(?_motorspeed)
   794  02F1  3002               	movlw	(02h)
   795  02F2  120A  158A  25AC   	fcall	_motorspeed
              120A  118A         
   796                           	line	236
   797                           ;test1.c: 236: for(i=0,sum=0;i<5;i++)
   798  02F7  3000               	movlw	low(0)
   799  02F8  1283               	bcf	status, 5	;RP0=0, select bank0
   800  02F9  1303               	bcf	status, 6	;RP1=0, select bank0
   801                           	
   802  02FA  00D3               	movwf	(83)
   803  02FB  3000               	movlw	high(0)
   804  02FC  00D4               	movwf	((83))+1
   805  02FD  3000               	movlw	low(0)
   806                           	
   807  02FE  00D5               	movwf	(85)
   808  02FF  3000               	movlw	high(0)
   809  0300  00D6               	movwf	((85))+1
   810  0301  2B2C               	goto	l101
   811                           	line	237
   812                           	
   813  0302                     l98:	
   814                           	line	238
   815                           ;test1.c: 237: {
   816                           ;test1.c: 238: sensor0[i]=read_adc(0);
   817  0302  3000               	movlw	(0)
   818  0303  120A  118A  2731   	fcall	_read_adc
              120A  118A         
   819  0308  1283               	bcf	status, 5	;RP0=0, select bank0
   820  0309  1303               	bcf	status, 6	;RP1=0, select bank0
   821                           	
   822  030A  0853               	movf	(83),w
   823  030B  00A0               	movwf	(??_navigation+0+0)
   824  030C  0720               	addwf	(??_navigation+0+0),w
   825  030D  3EE6               	addlw	(230)&0ffh
   826  030E  1383               	bcf	status, 7	;select IRP bank1
   827                           	
   828  030F  0084               	movwf	fsr0
   829  0310  0823               	movf	(0+?_read_adc),w
   830  0311  0080               	movwf	indf
   831  0312  0A84               	incf	fsr0,f
   832  0313  0824               	movf	(1+?_read_adc),w
   833  0314  0080               	movwf	indf
   834                           	line	239
   835                           ;test1.c: 239: sum+=sensor0[i];
   836                           	
   837  0315  0853               	movf	(83),w
   838  0316  00A0               	movwf	(??_navigation+0+0)
   839  0317  0720               	addwf	(??_navigation+0+0),w
   840  0318  3EE6               	addlw	(230)&0ffh
   841                           	
   842  0319  0084               	movwf	fsr0
   843  031A  0800               	movf	indf,w
   844  031B  00A1               	movwf	(??_navigation+1+0)
   845  031C  3001               	movlw	1
   846  031D  0784               	addwf	fsr0,f
   847  031E  0800               	movf	indf,w
   848  031F  00A2               	movwf	(??_navigation+1+0+1)
   849                           	
   850  0320  0821               	movf	0+(??_navigation+1+0),w
   851  0321  07D5               	addwf	(85),f
   852  0322  1803               	skipnc
   853  0323  0AD6               	incf	(85+1),f
   854  0324  0822               	movf	1+(??_navigation+1+0),w
   855  0325  07D6               	addwf	(85+1),f
   856                           	line	236
   857                           	
   858  0326  3001               	movlw	low(01h)
   859  0327  07D3               	addwf	(83),f
   860  0328  1803               	skipnc
   861  0329  0AD4               	incf	(83+1),f
   862  032A  3000               	movlw	high(01h)
   863  032B  07D4               	addwf	(83+1),f
   864                           	
   865  032C                     l101:	
   866                           	
   867  032C  3000               	movlw	high(05h)
   868  032D  0254               	subwf	(83+1),w
   869  032E  3005               	movlw	low(05h)
   870  032F  1903               	skipnz
   871  0330  0253               	subwf	(83),w
   872  0331  1C03               	skipc
   873  0332  2B34               	goto	u2371
   874  0333  2B35               	goto	u2370
   875  0334                     u2371:
   876  0334  2B02               	goto	l98
   877  0335                     u2370:
   878                           	
   879  0335                     l99:	
   880                           	line	241
   881                           ;test1.c: 240: }
   882                           ;test1.c: 241: average=sum/5;
   883  0335  3005               	movlw	low(05h)
   884                           	
   885  0336  00A5               	movwf	(0+(?___lwdiv)+02h)
   886  0337  3000               	movlw	high(05h)
   887  0338  00A6               	movwf	((0+(?___lwdiv)+02h))+1
   888                           	
   889                           	
   890  0339  0856               	movf	(85+1),w
   891  033A  01A4               	clrf	(?___lwdiv+1)
   892  033B  07A4               	addwf	(?___lwdiv+1)
   893  033C  0855               	movf	(85),w
   894  033D  01A3               	clrf	(?___lwdiv)
   895  033E  07A3               	addwf	(?___lwdiv)
   896                           
   897  033F  120A  118A  27AE   	fcall	___lwdiv
              120A  118A         
   898  0344  1283               	bcf	status, 5	;RP0=0, select bank0
   899  0345  1303               	bcf	status, 6	;RP1=0, select bank0
   900                           	
   901  0346  0824               	movf	(1+?___lwdiv),w
   902  0347  01C6               	clrf	(69+1)
   903  0348  07C6               	addwf	(69+1)
   904  0349  0823               	movf	(0+?___lwdiv),w
   905  034A  01C5               	clrf	(69)
   906  034B  07C5               	addwf	(69)
   907                           
   908                           	line	242
   909                           ;test1.c: 242: sensor0[0]=average;
   910                           	
   911  034C  1683               	bsf	status, 5	;RP0=1, select bank1
   912  034D  1303               	bcf	status, 6	;RP1=0, select bank1
   913                           	
   914  034E  1283               	bcf	status, 5	;RP0=0, select bank0
   915  034F  1303               	bcf	status, 6	;RP1=0, select bank0
   916  0350  0846               	movf	(69+1),w
   917  0351  1683               	bsf	status, 5	;RP0=1, select bank1
   918  0352  1303               	bcf	status, 6	;RP1=0, select bank1
   919  0353  01E7               	clrf	(230+1)^080h
   920  0354  07E7               	addwf	(230+1)^080h
   921  0355  1283               	bcf	status, 5	;RP0=0, select bank0
   922  0356  1303               	bcf	status, 6	;RP1=0, select bank0
   923  0357  0845               	movf	(69),w
   924  0358  1683               	bsf	status, 5	;RP0=1, select bank1
   925  0359  1303               	bcf	status, 6	;RP1=0, select bank1
   926  035A  01E6               	clrf	(230)^080h
   927  035B  07E6               	addwf	(230)^080h
   928                           
   929                           	line	243
   930                           ;test1.c: 243: sensor=sensor0[0];
   931                           	
   932  035C  1283               	bcf	status, 5	;RP0=0, select bank0
   933  035D  1303               	bcf	status, 6	;RP1=0, select bank0
   934                           	
   935  035E  1683               	bsf	status, 5	;RP0=1, select bank1
   936  035F  1303               	bcf	status, 6	;RP1=0, select bank1
   937  0360  0867               	movf	(230+1)^080h,w
   938  0361  1283               	bcf	status, 5	;RP0=0, select bank0
   939  0362  1303               	bcf	status, 6	;RP1=0, select bank0
   940  0363  01DC               	clrf	(91+1)
   941  0364  07DC               	addwf	(91+1)
   942  0365  1683               	bsf	status, 5	;RP0=1, select bank1
   943  0366  1303               	bcf	status, 6	;RP1=0, select bank1
   944  0367  0866               	movf	(230)^080h,w
   945  0368  1283               	bcf	status, 5	;RP0=0, select bank0
   946  0369  1303               	bcf	status, 6	;RP1=0, select bank0
   947  036A  01DB               	clrf	(91)
   948  036B  07DB               	addwf	(91)
   949                           
   950                           	line	245
   951                           ;test1.c: 245: sensor3 = read_adc (3);
   952  036C  3003               	movlw	(03h)
   953  036D  120A  118A  2731   	fcall	_read_adc
              120A  118A         
   954                           	
   955  0372  1283               	bcf	status, 5	;RP0=0, select bank0
   956  0373  1303               	bcf	status, 6	;RP1=0, select bank0
   957  0374  0824               	movf	(1+?_read_adc),w
   958  0375  01FD               	clrf	(124+1)
   959  0376  07FD               	addwf	(124+1)
   960  0377  0823               	movf	(0+?_read_adc),w
   961  0378  01FC               	clrf	(124)
   962  0379  07FC               	addwf	(124)
   963                           
   964                           	line	246
   965                           ;test1.c: 246: sensor5 = read_adc (5);
   966  037A  3005               	movlw	(05h)
   967  037B  120A  118A  2731   	fcall	_read_adc
              120A  118A         
   968  0380  1283               	bcf	status, 5	;RP0=0, select bank0
   969  0381  1303               	bcf	status, 6	;RP1=0, select bank0
   970                           	
   971  0382  0824               	movf	(1+?_read_adc),w
   972  0383  01DA               	clrf	(89+1)
   973  0384  07DA               	addwf	(89+1)
   974  0385  0823               	movf	(0+?_read_adc),w
   975  0386  01D9               	clrf	(89)
   976  0387  07D9               	addwf	(89)
   977                           
   978                           	line	248
   979                           ;test1.c: 248: while(sensor0[0]<=sensor)
   980  0388  2C20               	goto	l102
   981                           	
   982  0389                     l103:	
   983                           	line	250
   984                           ;test1.c: 249: {
   985                           ;test1.c: 250: sensor=sensor0[0];
   986  0389  1683               	bsf	status, 5	;RP0=1, select bank1
   987  038A  1303               	bcf	status, 6	;RP1=0, select bank1
   988                           	
   989  038B  1283               	bcf	status, 5	;RP0=0, select bank0
   990  038C  1303               	bcf	status, 6	;RP1=0, select bank0
   991                           	
   992  038D  1683               	bsf	status, 5	;RP0=1, select bank1
   993  038E  1303               	bcf	status, 6	;RP1=0, select bank1
   994  038F  0867               	movf	(230+1)^080h,w
   995  0390  1283               	bcf	status, 5	;RP0=0, select bank0
   996  0391  1303               	bcf	status, 6	;RP1=0, select bank0
   997  0392  01DC               	clrf	(91+1)
   998  0393  07DC               	addwf	(91+1)
   999  0394  1683               	bsf	status, 5	;RP0=1, select bank1
  1000  0395  1303               	bcf	status, 6	;RP1=0, select bank1
  1001  0396  0866               	movf	(230)^080h,w
  1002  0397  1283               	bcf	status, 5	;RP0=0, select bank0
  1003  0398  1303               	bcf	status, 6	;RP1=0, select bank0
  1004  0399  01DB               	clrf	(91)
  1005  039A  07DB               	addwf	(91)
  1006                           
  1007                           	line	251
  1008                           ;test1.c: 251: if(sensor3<sensor5)
  1009                           	
  1010                           	
  1011  039B  085A               	movf	(89+1),w
  1012  039C  027D               	subwf	(124+1),w
  1013  039D  1D03               	skipz
  1014  039E  2BA1               	goto	u2385
  1015  039F  0859               	movf	(89),w
  1016  03A0  027C               	subwf	(124),w
  1017  03A1                     u2385:
  1018  03A1  1803               	skipnc
  1019  03A2  2BA4               	goto	u2381
  1020  03A3  2BA5               	goto	u2380
  1021  03A4                     u2381:
  1022  03A4  2BAB               	goto	l105
  1023  03A5                     u2380:
  1024                           	line	253
  1025                           ;test1.c: 253: pivotleft();
  1026  03A5  120A  158A  22EF   	fcall	_pivotleft
              120A  118A         
  1027  03AA  2BB0               	goto	l106
  1028                           	line	256
  1029                           	
  1030  03AB                     l105:	
  1031                           	line	257
  1032                           ;test1.c: 256: else
  1033                           ;test1.c: 257: pivotright();
  1034  03AB  120A  158A  2349   	fcall	_pivotright
              120A  118A         
  1035                           	
  1036  03B0                     l106:	
  1037                           	line	258
  1038                           ;test1.c: 258: pause(90);
  1039  03B0  305A               	movlw	low(05Ah)
  1040  03B1  1283               	bcf	status, 5	;RP0=0, select bank0
  1041  03B2  1303               	bcf	status, 6	;RP1=0, select bank0
  1042                           	
  1043  03B3  00A3               	movwf	(?_pause)
  1044  03B4  3000               	movlw	high(05Ah)
  1045  03B5  00A4               	movwf	((?_pause))+1
  1046  03B6  120A  158A  2408   	fcall	_pause
              120A  118A         
  1047                           	line	259
  1048                           ;test1.c: 259: for(i=0,sum=0;i<5;i++)
  1049  03BB  3000               	movlw	low(0)
  1050  03BC  1283               	bcf	status, 5	;RP0=0, select bank0
  1051  03BD  1303               	bcf	status, 6	;RP1=0, select bank0
  1052                           	
  1053  03BE  00D3               	movwf	(83)
  1054  03BF  3000               	movlw	high(0)
  1055  03C0  00D4               	movwf	((83))+1
  1056  03C1  3000               	movlw	low(0)
  1057                           	
  1058  03C2  00D5               	movwf	(85)
  1059  03C3  3000               	movlw	high(0)
  1060  03C4  00D6               	movwf	((85))+1
  1061  03C5  2BF0               	goto	l110
  1062                           	line	260
  1063                           	
  1064  03C6                     l107:	
  1065                           	line	261
  1066                           ;test1.c: 260: {
  1067                           ;test1.c: 261: sensor0[i]=read_adc(0);
  1068  03C6  3000               	movlw	(0)
  1069  03C7  120A  118A  2731   	fcall	_read_adc
              120A  118A         
  1070  03CC  1283               	bcf	status, 5	;RP0=0, select bank0
  1071  03CD  1303               	bcf	status, 6	;RP1=0, select bank0
  1072                           	
  1073  03CE  0853               	movf	(83),w
  1074  03CF  00A0               	movwf	(??_navigation+0+0)
  1075  03D0  0720               	addwf	(??_navigation+0+0),w
  1076  03D1  3EE6               	addlw	(230)&0ffh
  1077  03D2  1383               	bcf	status, 7	;select IRP bank1
  1078                           	
  1079  03D3  0084               	movwf	fsr0
  1080  03D4  0823               	movf	(0+?_read_adc),w
  1081  03D5  0080               	movwf	indf
  1082  03D6  0A84               	incf	fsr0,f
  1083  03D7  0824               	movf	(1+?_read_adc),w
  1084  03D8  0080               	movwf	indf
  1085                           	line	262
  1086                           ;test1.c: 262: sum+=sensor0[i];
  1087                           	
  1088  03D9  0853               	movf	(83),w
  1089  03DA  00A0               	movwf	(??_navigation+0+0)
  1090  03DB  0720               	addwf	(??_navigation+0+0),w
  1091  03DC  3EE6               	addlw	(230)&0ffh
  1092                           	
  1093  03DD  0084               	movwf	fsr0
  1094  03DE  0800               	movf	indf,w
  1095  03DF  00A1               	movwf	(??_navigation+1+0)
  1096  03E0  3001               	movlw	1
  1097  03E1  0784               	addwf	fsr0,f
  1098  03E2  0800               	movf	indf,w
  1099  03E3  00A2               	movwf	(??_navigation+1+0+1)
  1100                           	
  1101  03E4  0821               	movf	0+(??_navigation+1+0),w
  1102  03E5  07D5               	addwf	(85),f
  1103  03E6  1803               	skipnc
  1104  03E7  0AD6               	incf	(85+1),f
  1105  03E8  0822               	movf	1+(??_navigation+1+0),w
  1106  03E9  07D6               	addwf	(85+1),f
  1107                           	line	259
  1108                           	
  1109  03EA  3001               	movlw	low(01h)
  1110  03EB  07D3               	addwf	(83),f
  1111  03EC  1803               	skipnc
  1112  03ED  0AD4               	incf	(83+1),f
  1113  03EE  3000               	movlw	high(01h)
  1114  03EF  07D4               	addwf	(83+1),f
  1115                           	
  1116  03F0                     l110:	
  1117                           	
  1118  03F0  3000               	movlw	high(05h)
  1119  03F1  0254               	subwf	(83+1),w
  1120  03F2  3005               	movlw	low(05h)
  1121  03F3  1903               	skipnz
  1122  03F4  0253               	subwf	(83),w
  1123  03F5  1C03               	skipc
  1124  03F6  2BF8               	goto	u2391
  1125  03F7  2BF9               	goto	u2390
  1126  03F8                     u2391:
  1127  03F8  2BC6               	goto	l107
  1128  03F9                     u2390:
  1129                           	
  1130  03F9                     l108:	
  1131                           	line	264
  1132                           ;test1.c: 263: }
  1133                           ;test1.c: 264: average=sum/5;
  1134  03F9  3005               	movlw	low(05h)
  1135                           	
  1136  03FA  00A5               	movwf	(0+(?___lwdiv)+02h)
  1137  03FB  3000               	movlw	high(05h)
  1138  03FC  00A6               	movwf	((0+(?___lwdiv)+02h))+1
  1139                           	
  1140                           	
  1141  03FD  0856               	movf	(85+1),w
  1142  03FE  01A4               	clrf	(?___lwdiv+1)
  1143  03FF  07A4               	addwf	(?___lwdiv+1)
  1144  0400  0855               	movf	(85),w
  1145  0401  01A3               	clrf	(?___lwdiv)
  1146  0402  07A3               	addwf	(?___lwdiv)
  1147                           
  1148  0403  120A  118A  27AE   	fcall	___lwdiv
              120A  118A         
  1149  0408  1283               	bcf	status, 5	;RP0=0, select bank0
  1150  0409  1303               	bcf	status, 6	;RP1=0, select bank0
  1151                           	
  1152  040A  0824               	movf	(1+?___lwdiv),w
  1153  040B  01C6               	clrf	(69+1)
  1154  040C  07C6               	addwf	(69+1)
  1155  040D  0823               	movf	(0+?___lwdiv),w
  1156  040E  01C5               	clrf	(69)
  1157  040F  07C5               	addwf	(69)
  1158                           
  1159                           	line	265
  1160                           ;test1.c: 265: sensor0[0]=average;
  1161                           	
  1162  0410  1683               	bsf	status, 5	;RP0=1, select bank1
  1163  0411  1303               	bcf	status, 6	;RP1=0, select bank1
  1164                           	
  1165  0412  1283               	bcf	status, 5	;RP0=0, select bank0
  1166  0413  1303               	bcf	status, 6	;RP1=0, select bank0
  1167  0414  0846               	movf	(69+1),w
  1168  0415  1683               	bsf	status, 5	;RP0=1, select bank1
  1169  0416  1303               	bcf	status, 6	;RP1=0, select bank1
  1170  0417  01E7               	clrf	(230+1)^080h
  1171  0418  07E7               	addwf	(230+1)^080h
  1172  0419  1283               	bcf	status, 5	;RP0=0, select bank0
  1173  041A  1303               	bcf	status, 6	;RP1=0, select bank0
  1174  041B  0845               	movf	(69),w
  1175  041C  1683               	bsf	status, 5	;RP0=1, select bank1
  1176  041D  1303               	bcf	status, 6	;RP1=0, select bank1
  1177  041E  01E6               	clrf	(230)^080h
  1178  041F  07E6               	addwf	(230)^080h
  1179                           
  1180                           	line	267
  1181                           	
  1182  0420                     l102:	
  1183                           	line	248
  1184  0420  1683               	bsf	status, 5	;RP0=1, select bank1
  1185  0421  1303               	bcf	status, 6	;RP1=0, select bank1
  1186                           	
  1187  0422  1283               	bcf	status, 5	;RP0=0, select bank0
  1188  0423  1303               	bcf	status, 6	;RP1=0, select bank0
  1189                           	
  1190  0424  1683               	bsf	status, 5	;RP0=1, select bank1
  1191  0425  1303               	bcf	status, 6	;RP1=0, select bank1
  1192  0426  0867               	movf	(230+1)^080h,w
  1193  0427  1283               	bcf	status, 5	;RP0=0, select bank0
  1194  0428  1303               	bcf	status, 6	;RP1=0, select bank0
  1195  0429  025C               	subwf	(91+1),w
  1196  042A  1D03               	skipz
  1197  042B  2C32               	goto	u2405
  1198  042C  1683               	bsf	status, 5	;RP0=1, select bank1
  1199  042D  1303               	bcf	status, 6	;RP1=0, select bank1
  1200  042E  0866               	movf	(230)^080h,w
  1201  042F  1283               	bcf	status, 5	;RP0=0, select bank0
  1202  0430  1303               	bcf	status, 6	;RP1=0, select bank0
  1203  0431  025B               	subwf	(91),w
  1204  0432                     u2405:
  1205  0432  1803               	skipnc
  1206  0433  2C35               	goto	u2401
  1207  0434  2C36               	goto	u2400
  1208  0435                     u2401:
  1209  0435  2B89               	goto	l103
  1210  0436                     u2400:
  1211                           	
  1212  0436                     l104:	
  1213                           	line	268
  1214                           ;test1.c: 267: }
  1215                           ;test1.c: 268: motorsoff();
  1216  0436  120A  158A  231C   	fcall	_motorsoff
              120A  118A         
  1217                           	line	269
  1218                           ;test1.c: 269: pause(500);
  1219  043B  30F4               	movlw	low(01F4h)
  1220  043C  1283               	bcf	status, 5	;RP0=0, select bank0
  1221  043D  1303               	bcf	status, 6	;RP1=0, select bank0
  1222                           	
  1223  043E  00A3               	movwf	(?_pause)
  1224  043F  3001               	movlw	high(01F4h)
  1225  0440  00A4               	movwf	((?_pause))+1
  1226  0441  120A  158A  2408   	fcall	_pause
              120A  118A         
  1227                           	line	270
  1228                           ;test1.c: 270: motorspeed(1,93);
  1229  0446  305D               	movlw	(05Dh)
  1230  0447  1283               	bcf	status, 5	;RP0=0, select bank0
  1231  0448  1303               	bcf	status, 6	;RP1=0, select bank0
  1232                           	
  1233  0449  00A3               	movwf	(?_motorspeed)
  1234  044A  3001               	movlw	(01h)
  1235  044B  120A  158A  25AC   	fcall	_motorspeed
              120A  118A         
  1236                           	line	271
  1237                           ;test1.c: 271: motorspeed(2,100);
  1238  0450  3064               	movlw	(064h)
  1239  0451  1283               	bcf	status, 5	;RP0=0, select bank0
  1240  0452  1303               	bcf	status, 6	;RP1=0, select bank0
  1241                           	
  1242  0453  00A3               	movwf	(?_motorspeed)
  1243  0454  3002               	movlw	(02h)
  1244  0455  120A  158A  25AC   	fcall	_motorspeed
              120A  118A         
  1245                           	line	272
  1246                           ;test1.c: 272: forward();
  1247  045A  120A  158A  2376   	fcall	_forward
              120A  118A         
  1248                           	line	273
  1249                           ;test1.c: 273: return;
  1250  045F  2C60               	goto	l91
  1251                           	line	277
  1252                           ;test1.c: 277: }
  1253  0460                     l91:	
  1254  0460  0008               	return
  1255                           ; =============== function _navigation ends ===
                                 ============
  1256                           
  1257                           GLOBAL __end_of_navigation
  1258  0461                     	__end_of_navigation:
  1259                           	FNSIZE	_navigation,3,0
  1260                           	signat	_navigation,88
  1261                           	global	_target
  1262                           	global	??_target
  1263                           	global	?_target
  1264                           
  1265                           ; *************** function _target ************
                                 ***
  1266                           ; Defined at:
  1267                           ;		line 142 in file "test1.c"
  1268                           ; Parameters:
  1269                           ;		None
  1270                           ; Auto variables:
  1271                           ;		None
  1272                           ; Return value:
  1273                           ;		type: void 
  1274                           ;		size: 0
  1275                           ; Registers used:
  1276                           ;		wreg, fsr0l, fsr0h, status,2, status,0, pcla
                                 th, cstack
  1277                           ; Tracked objects:
  1278                           ;		On entry : 300/0
  1279                           ;		On exit  : 0/0
  1280                           ;		Unchanged: 0/0
  1281                           ; Data sizes:
  1282                           ;		Autos:    0
  1283                           ;		Params:   0
  1284                           ;		Temp:     3
  1285                           ;		Total:    3
  1286                           ; This function calls:
  1287                           ;		_read_adc
  1288                           ;		_forward
  1289                           ;		_pivotleft
  1290                           ;		_pivotright
  1291                           ;		_pause
  1292                           ;		_motorsoff
  1293                           ;		_motorspeed
  1294                           ;		___lwdiv
  1295                           ; This function is called by:
  1296                           ;		_main
  1297                           ; This function uses a non-reentrant model
  1298                           ; 
  1299                           	psect	text207,local,class=CODE,delta=2
  1300                           	file	"test1.c"
  1301                           	line	142
  1302                           ;test1.c: 141: void target()
  1303                           ;test1.c: 142: {
  1304                           	
  1305  0461                     _target:	
  1306                           	opt stack 3
  1307                           ; Regs used in _target: [wreg-fsr0h+status,2+st
                                 atus,0+pclath+cstack]
  1308                           	line	143
  1309                           ;test1.c: 143: a=0;
  1310  0461  3000               	movlw	low(0)
  1311                           	
  1312  0462  00D1               	movwf	(81)
  1313  0463  3000               	movlw	high(0)
  1314  0464  00D2               	movwf	((81))+1
  1315                           	line	144
  1316                           ;test1.c: 144: sensor3 = read_adc (3);
  1317  0465  3003               	movlw	(03h)
  1318  0466  120A  118A  2731   	fcall	_read_adc
              120A  118A         
  1319                           	
  1320  046B  1283               	bcf	status, 5	;RP0=0, select bank0
  1321  046C  1303               	bcf	status, 6	;RP1=0, select bank0
  1322  046D  0824               	movf	(1+?_read_adc),w
  1323  046E  01FD               	clrf	(124+1)
  1324  046F  07FD               	addwf	(124+1)
  1325  0470  0823               	movf	(0+?_read_adc),w
  1326  0471  01FC               	clrf	(124)
  1327  0472  07FC               	addwf	(124)
  1328                           
  1329                           	line	145
  1330                           ;test1.c: 145: sensor5 = read_adc (5);
  1331  0473  3005               	movlw	(05h)
  1332  0474  120A  118A  2731   	fcall	_read_adc
              120A  118A         
  1333  0479  1283               	bcf	status, 5	;RP0=0, select bank0
  1334  047A  1303               	bcf	status, 6	;RP1=0, select bank0
  1335                           	
  1336  047B  0824               	movf	(1+?_read_adc),w
  1337  047C  01DA               	clrf	(89+1)
  1338  047D  07DA               	addwf	(89+1)
  1339  047E  0823               	movf	(0+?_read_adc),w
  1340  047F  01D9               	clrf	(89)
  1341  0480  07D9               	addwf	(89)
  1342                           
  1343                           	line	146
  1344                           ;test1.c: 146: sensor0[0]=read_adc(0);
  1345  0481  3000               	movlw	(0)
  1346  0482  120A  118A  2731   	fcall	_read_adc
              120A  118A         
  1347  0487  1683               	bsf	status, 5	;RP0=1, select bank1
  1348  0488  1303               	bcf	status, 6	;RP1=0, select bank1
  1349                           	
  1350  0489  1283               	bcf	status, 5	;RP0=0, select bank0
  1351  048A  1303               	bcf	status, 6	;RP1=0, select bank0
  1352  048B  0824               	movf	(1+?_read_adc),w
  1353  048C  1683               	bsf	status, 5	;RP0=1, select bank1
  1354  048D  1303               	bcf	status, 6	;RP1=0, select bank1
  1355  048E  01E7               	clrf	(230+1)^080h
  1356  048F  07E7               	addwf	(230+1)^080h
  1357  0490  1283               	bcf	status, 5	;RP0=0, select bank0
  1358  0491  1303               	bcf	status, 6	;RP1=0, select bank0
  1359  0492  0823               	movf	(0+?_read_adc),w
  1360  0493  1683               	bsf	status, 5	;RP0=1, select bank1
  1361  0494  1303               	bcf	status, 6	;RP1=0, select bank1
  1362  0495  01E6               	clrf	(230)^080h
  1363  0496  07E6               	addwf	(230)^080h
  1364                           
  1365                           	line	147
  1366                           ;test1.c: 147: sensor2[0]=read_adc(2);
  1367  0497  3002               	movlw	(02h)
  1368  0498  120A  118A  2731   	fcall	_read_adc
              120A  118A         
  1369  049D  1283               	bcf	status, 5	;RP0=0, select bank0
  1370  049E  1303               	bcf	status, 6	;RP1=0, select bank0
  1371                           	
  1372  049F  0824               	movf	(1+?_read_adc),w
  1373  04A0  01C8               	clrf	(71+1)
  1374  04A1  07C8               	addwf	(71+1)
  1375  04A2  0823               	movf	(0+?_read_adc),w
  1376  04A3  01C7               	clrf	(71)
  1377  04A4  07C7               	addwf	(71)
  1378                           
  1379                           	line	148
  1380                           ;test1.c: 148: sensor=sensor2[0];
  1381                           	
  1382                           	
  1383  04A5  0848               	movf	(71+1),w
  1384  04A6  01DC               	clrf	(91+1)
  1385  04A7  07DC               	addwf	(91+1)
  1386  04A8  0847               	movf	(71),w
  1387  04A9  01DB               	clrf	(91)
  1388  04AA  07DB               	addwf	(91)
  1389                           
  1390                           	line	150
  1391                           ;test1.c: 150: while(sensor>12000||sensor0[0]<1
                                 2000)
  1392  04AB  2D0C               	goto	l72
  1393                           	
  1394  04AC                     l73:	
  1395                           	line	151
  1396                           ;test1.c: 151: {if(a>23)
  1397  04AC  1283               	bcf	status, 5	;RP0=0, select bank0
  1398                           	
  1399  04AD  3000               	movlw	high(018h)
  1400  04AE  0252               	subwf	(81+1),w
  1401  04AF  3018               	movlw	low(018h)
  1402  04B0  1903               	skipnz
  1403  04B1  0251               	subwf	(81),w
  1404  04B2  1C03               	skipc
  1405  04B3  2CB5               	goto	u2201
  1406  04B4  2CB6               	goto	u2200
  1407  04B5                     u2201:
  1408  04B5  2CBC               	goto	l75
  1409  04B6                     u2200:
  1410                           	line	152
  1411                           ;test1.c: 152: {forward();break;}
  1412  04B6  120A  158A  2376   	fcall	_forward
              120A  118A         
  1413  04BB  2D21               	goto	l74
  1414                           	
  1415  04BC                     l75:	
  1416                           	line	153
  1417                           ;test1.c: 153: sensor=sensor2[0];
  1418                           	
  1419                           	
  1420  04BC  0848               	movf	(71+1),w
  1421  04BD  01DC               	clrf	(91+1)
  1422  04BE  07DC               	addwf	(91+1)
  1423  04BF  0847               	movf	(71),w
  1424  04C0  01DB               	clrf	(91)
  1425  04C1  07DB               	addwf	(91)
  1426                           
  1427                           	line	154
  1428                           ;test1.c: 154: if(sensor3<sensor5)
  1429                           	
  1430                           	
  1431  04C2  085A               	movf	(89+1),w
  1432  04C3  027D               	subwf	(124+1),w
  1433  04C4  1D03               	skipz
  1434  04C5  2CC8               	goto	u2215
  1435  04C6  0859               	movf	(89),w
  1436  04C7  027C               	subwf	(124),w
  1437  04C8                     u2215:
  1438  04C8  1803               	skipnc
  1439  04C9  2CCB               	goto	u2211
  1440  04CA  2CCC               	goto	u2210
  1441  04CB                     u2211:
  1442  04CB  2CD2               	goto	l76
  1443  04CC                     u2210:
  1444                           	line	155
  1445                           ;test1.c: 155: pivotleft();
  1446  04CC  120A  158A  22EF   	fcall	_pivotleft
              120A  118A         
  1447  04D1  2CD7               	goto	l77
  1448                           	line	156
  1449                           	
  1450  04D2                     l76:	
  1451                           	line	157
  1452                           ;test1.c: 156: else
  1453                           ;test1.c: 157: pivotright();
  1454  04D2  120A  158A  2349   	fcall	_pivotright
              120A  118A         
  1455                           	
  1456  04D7                     l77:	
  1457                           	line	158
  1458                           ;test1.c: 158: pause(90);
  1459  04D7  305A               	movlw	low(05Ah)
  1460  04D8  1283               	bcf	status, 5	;RP0=0, select bank0
  1461  04D9  1303               	bcf	status, 6	;RP1=0, select bank0
  1462                           	
  1463  04DA  00A3               	movwf	(?_pause)
  1464  04DB  3000               	movlw	high(05Ah)
  1465  04DC  00A4               	movwf	((?_pause))+1
  1466  04DD  120A  158A  2408   	fcall	_pause
              120A  118A         
  1467                           	line	160
  1468                           ;test1.c: 160: sensor2[0]=read_adc(2);
  1469  04E2  3002               	movlw	(02h)
  1470  04E3  120A  118A  2731   	fcall	_read_adc
              120A  118A         
  1471  04E8  1283               	bcf	status, 5	;RP0=0, select bank0
  1472  04E9  1303               	bcf	status, 6	;RP1=0, select bank0
  1473                           	
  1474  04EA  0824               	movf	(1+?_read_adc),w
  1475  04EB  01C8               	clrf	(71+1)
  1476  04EC  07C8               	addwf	(71+1)
  1477  04ED  0823               	movf	(0+?_read_adc),w
  1478  04EE  01C7               	clrf	(71)
  1479  04EF  07C7               	addwf	(71)
  1480                           
  1481                           	line	161
  1482                           ;test1.c: 161: a++;
  1483                           	
  1484  04F0  3001               	movlw	low(01h)
  1485  04F1  07D1               	addwf	(81),f
  1486  04F2  1803               	skipnc
  1487  04F3  0AD2               	incf	(81+1),f
  1488  04F4  3000               	movlw	high(01h)
  1489  04F5  07D2               	addwf	(81+1),f
  1490                           	line	162
  1491                           ;test1.c: 162: sensor0[0]=read_adc(0);
  1492  04F6  3000               	movlw	(0)
  1493  04F7  120A  118A  2731   	fcall	_read_adc
              120A  118A         
  1494  04FC  1683               	bsf	status, 5	;RP0=1, select bank1
  1495  04FD  1303               	bcf	status, 6	;RP1=0, select bank1
  1496                           	
  1497  04FE  1283               	bcf	status, 5	;RP0=0, select bank0
  1498  04FF  1303               	bcf	status, 6	;RP1=0, select bank0
  1499  0500  0824               	movf	(1+?_read_adc),w
  1500  0501  1683               	bsf	status, 5	;RP0=1, select bank1
  1501  0502  1303               	bcf	status, 6	;RP1=0, select bank1
  1502  0503  01E7               	clrf	(230+1)^080h
  1503  0504  07E7               	addwf	(230+1)^080h
  1504  0505  1283               	bcf	status, 5	;RP0=0, select bank0
  1505  0506  1303               	bcf	status, 6	;RP1=0, select bank0
  1506  0507  0823               	movf	(0+?_read_adc),w
  1507  0508  1683               	bsf	status, 5	;RP0=1, select bank1
  1508  0509  1303               	bcf	status, 6	;RP1=0, select bank1
  1509  050A  01E6               	clrf	(230)^080h
  1510  050B  07E6               	addwf	(230)^080h
  1511                           
  1512                           	line	163
  1513                           	
  1514  050C                     l72:	
  1515                           	line	150
  1516  050C  1283               	bcf	status, 5	;RP0=0, select bank0
  1517                           	
  1518  050D  302E               	movlw	high(02EE1h)
  1519  050E  025C               	subwf	(91+1),w
  1520  050F  30E1               	movlw	low(02EE1h)
  1521  0510  1903               	skipnz
  1522  0511  025B               	subwf	(91),w
  1523  0512  1803               	skipnc
  1524  0513  2D15               	goto	u2221
  1525  0514  2D16               	goto	u2220
  1526  0515                     u2221:
  1527  0515  2CAC               	goto	l73
  1528  0516                     u2220:
  1529  0516  1683               	bsf	status, 5	;RP0=1, select bank1
  1530  0517  1303               	bcf	status, 6	;RP1=0, select bank1
  1531                           	
  1532  0518  302E               	movlw	high(02EE0h)
  1533  0519  0267               	subwf	(230+1)^080h,w
  1534  051A  30E0               	movlw	low(02EE0h)
  1535  051B  1903               	skipnz
  1536  051C  0266               	subwf	(230)^080h,w
  1537  051D  1C03               	skipc
  1538  051E  2D20               	goto	u2231
  1539  051F  2D21               	goto	u2230
  1540  0520                     u2231:
  1541  0520  2CAC               	goto	l73
  1542  0521                     u2230:
  1543                           	
  1544  0521                     l74:	
  1545                           	line	164
  1546                           ;test1.c: 163: }
  1547                           ;test1.c: 164: motorsoff();
  1548  0521  120A  158A  231C   	fcall	_motorsoff
              120A  118A         
  1549                           	line	165
  1550                           ;test1.c: 165: motorspeed(1,50);
  1551  0526  3032               	movlw	(032h)
  1552  0527  1283               	bcf	status, 5	;RP0=0, select bank0
  1553  0528  1303               	bcf	status, 6	;RP1=0, select bank0
  1554                           	
  1555  0529  00A3               	movwf	(?_motorspeed)
  1556  052A  3001               	movlw	(01h)
  1557  052B  120A  158A  25AC   	fcall	_motorspeed
              120A  118A         
  1558                           	line	166
  1559                           ;test1.c: 166: motorspeed(2,70);
  1560  0530  3046               	movlw	(046h)
  1561  0531  1283               	bcf	status, 5	;RP0=0, select bank0
  1562  0532  1303               	bcf	status, 6	;RP1=0, select bank0
  1563                           	
  1564  0533  00A3               	movwf	(?_motorspeed)
  1565  0534  3002               	movlw	(02h)
  1566  0535  120A  158A  25AC   	fcall	_motorspeed
              120A  118A         
  1567                           	line	167
  1568                           ;test1.c: 167: for(i=0,sum=0;i<5;i++)
  1569  053A  3000               	movlw	low(0)
  1570  053B  1283               	bcf	status, 5	;RP0=0, select bank0
  1571  053C  1303               	bcf	status, 6	;RP1=0, select bank0
  1572                           	
  1573  053D  00D3               	movwf	(83)
  1574  053E  3000               	movlw	high(0)
  1575  053F  00D4               	movwf	((83))+1
  1576  0540  3000               	movlw	low(0)
  1577                           	
  1578  0541  00D5               	movwf	(85)
  1579  0542  3000               	movlw	high(0)
  1580  0543  00D6               	movwf	((85))+1
  1581  0544  2D6F               	goto	l81
  1582                           	line	168
  1583                           	
  1584  0545                     l78:	
  1585                           	line	169
  1586                           ;test1.c: 168: {
  1587                           ;test1.c: 169: sensor2[i]=read_adc(2);
  1588  0545  3002               	movlw	(02h)
  1589  0546  120A  118A  2731   	fcall	_read_adc
              120A  118A         
  1590  054B  1283               	bcf	status, 5	;RP0=0, select bank0
  1591  054C  1303               	bcf	status, 6	;RP1=0, select bank0
  1592                           	
  1593  054D  0853               	movf	(83),w
  1594  054E  00A0               	movwf	(??_target+0+0)
  1595  054F  0720               	addwf	(??_target+0+0),w
  1596  0550  3E47               	addlw	(71)&0ffh
  1597  0551  1383               	bcf	status, 7	;select IRP bank1
  1598                           	
  1599  0552  0084               	movwf	fsr0
  1600  0553  0823               	movf	(0+?_read_adc),w
  1601  0554  0080               	movwf	indf
  1602  0555  0A84               	incf	fsr0,f
  1603  0556  0824               	movf	(1+?_read_adc),w
  1604  0557  0080               	movwf	indf
  1605                           	line	170
  1606                           ;test1.c: 170: sum+=sensor2[i];
  1607                           	
  1608  0558  0853               	movf	(83),w
  1609  0559  00A0               	movwf	(??_target+0+0)
  1610  055A  0720               	addwf	(??_target+0+0),w
  1611  055B  3E47               	addlw	(71)&0ffh
  1612                           	
  1613  055C  0084               	movwf	fsr0
  1614  055D  0800               	movf	indf,w
  1615  055E  00A1               	movwf	(??_target+1+0)
  1616  055F  3001               	movlw	1
  1617  0560  0784               	addwf	fsr0,f
  1618  0561  0800               	movf	indf,w
  1619  0562  00A2               	movwf	(??_target+1+0+1)
  1620                           	
  1621  0563  0821               	movf	0+(??_target+1+0),w
  1622  0564  07D5               	addwf	(85),f
  1623  0565  1803               	skipnc
  1624  0566  0AD6               	incf	(85+1),f
  1625  0567  0822               	movf	1+(??_target+1+0),w
  1626  0568  07D6               	addwf	(85+1),f
  1627                           	line	167
  1628                           	
  1629  0569  3001               	movlw	low(01h)
  1630  056A  07D3               	addwf	(83),f
  1631  056B  1803               	skipnc
  1632  056C  0AD4               	incf	(83+1),f
  1633  056D  3000               	movlw	high(01h)
  1634  056E  07D4               	addwf	(83+1),f
  1635                           	
  1636  056F                     l81:	
  1637                           	
  1638  056F  3000               	movlw	high(05h)
  1639  0570  0254               	subwf	(83+1),w
  1640  0571  3005               	movlw	low(05h)
  1641  0572  1903               	skipnz
  1642  0573  0253               	subwf	(83),w
  1643  0574  1C03               	skipc
  1644  0575  2D77               	goto	u2241
  1645  0576  2D78               	goto	u2240
  1646  0577                     u2241:
  1647  0577  2D45               	goto	l78
  1648  0578                     u2240:
  1649                           	
  1650  0578                     l79:	
  1651                           	line	172
  1652                           ;test1.c: 171: }
  1653                           ;test1.c: 172: average=sum/5;
  1654  0578  3005               	movlw	low(05h)
  1655                           	
  1656  0579  00A5               	movwf	(0+(?___lwdiv)+02h)
  1657  057A  3000               	movlw	high(05h)
  1658  057B  00A6               	movwf	((0+(?___lwdiv)+02h))+1
  1659                           	
  1660                           	
  1661  057C  0856               	movf	(85+1),w
  1662  057D  01A4               	clrf	(?___lwdiv+1)
  1663  057E  07A4               	addwf	(?___lwdiv+1)
  1664  057F  0855               	movf	(85),w
  1665  0580  01A3               	clrf	(?___lwdiv)
  1666  0581  07A3               	addwf	(?___lwdiv)
  1667                           
  1668  0582  120A  118A  27AE   	fcall	___lwdiv
              120A  118A         
  1669  0587  1283               	bcf	status, 5	;RP0=0, select bank0
  1670  0588  1303               	bcf	status, 6	;RP1=0, select bank0
  1671                           	
  1672  0589  0824               	movf	(1+?___lwdiv),w
  1673  058A  01C6               	clrf	(69+1)
  1674  058B  07C6               	addwf	(69+1)
  1675  058C  0823               	movf	(0+?___lwdiv),w
  1676  058D  01C5               	clrf	(69)
  1677  058E  07C5               	addwf	(69)
  1678                           
  1679                           	line	173
  1680                           ;test1.c: 173: sensor2[0]=average;
  1681                           	
  1682                           	
  1683  058F  0846               	movf	(69+1),w
  1684  0590  01C8               	clrf	(71+1)
  1685  0591  07C8               	addwf	(71+1)
  1686  0592  0845               	movf	(69),w
  1687  0593  01C7               	clrf	(71)
  1688  0594  07C7               	addwf	(71)
  1689                           
  1690                           	line	174
  1691                           ;test1.c: 174: sensor=sensor2[0];
  1692                           	
  1693                           	
  1694  0595  0848               	movf	(71+1),w
  1695  0596  01DC               	clrf	(91+1)
  1696  0597  07DC               	addwf	(91+1)
  1697  0598  0847               	movf	(71),w
  1698  0599  01DB               	clrf	(91)
  1699  059A  07DB               	addwf	(91)
  1700                           
  1701                           	line	176
  1702                           ;test1.c: 176: sensor3 = read_adc (3);
  1703  059B  3003               	movlw	(03h)
  1704  059C  120A  118A  2731   	fcall	_read_adc
              120A  118A         
  1705                           	
  1706  05A1  1283               	bcf	status, 5	;RP0=0, select bank0
  1707  05A2  1303               	bcf	status, 6	;RP1=0, select bank0
  1708  05A3  0824               	movf	(1+?_read_adc),w
  1709  05A4  01FD               	clrf	(124+1)
  1710  05A5  07FD               	addwf	(124+1)
  1711  05A6  0823               	movf	(0+?_read_adc),w
  1712  05A7  01FC               	clrf	(124)
  1713  05A8  07FC               	addwf	(124)
  1714                           
  1715                           	line	177
  1716                           ;test1.c: 177: sensor5 = read_adc (5);
  1717  05A9  3005               	movlw	(05h)
  1718  05AA  120A  118A  2731   	fcall	_read_adc
              120A  118A         
  1719  05AF  1283               	bcf	status, 5	;RP0=0, select bank0
  1720  05B0  1303               	bcf	status, 6	;RP1=0, select bank0
  1721                           	
  1722  05B1  0824               	movf	(1+?_read_adc),w
  1723  05B2  01DA               	clrf	(89+1)
  1724  05B3  07DA               	addwf	(89+1)
  1725  05B4  0823               	movf	(0+?_read_adc),w
  1726  05B5  01D9               	clrf	(89)
  1727  05B6  07D9               	addwf	(89)
  1728                           
  1729                           	line	179
  1730                           ;test1.c: 179: while(sensor2[0]<=sensor)
  1731  05B7  2E39               	goto	l82
  1732                           	
  1733  05B8                     l83:	
  1734                           	line	181
  1735                           ;test1.c: 180: {
  1736                           ;test1.c: 181: sensor=sensor2[0];
  1737                           	
  1738                           	
  1739  05B8  0848               	movf	(71+1),w
  1740  05B9  01DC               	clrf	(91+1)
  1741  05BA  07DC               	addwf	(91+1)
  1742  05BB  0847               	movf	(71),w
  1743  05BC  01DB               	clrf	(91)
  1744  05BD  07DB               	addwf	(91)
  1745                           
  1746                           	line	182
  1747                           ;test1.c: 182: if(sensor3<sensor5)
  1748                           	
  1749                           	
  1750  05BE  085A               	movf	(89+1),w
  1751  05BF  027D               	subwf	(124+1),w
  1752  05C0  1D03               	skipz
  1753  05C1  2DC4               	goto	u2255
  1754  05C2  0859               	movf	(89),w
  1755  05C3  027C               	subwf	(124),w
  1756  05C4                     u2255:
  1757  05C4  1803               	skipnc
  1758  05C5  2DC7               	goto	u2251
  1759  05C6  2DC8               	goto	u2250
  1760  05C7                     u2251:
  1761  05C7  2DCE               	goto	l85
  1762  05C8                     u2250:
  1763                           	line	184
  1764                           ;test1.c: 184: pivotleft();
  1765  05C8  120A  158A  22EF   	fcall	_pivotleft
              120A  118A         
  1766  05CD  2DD3               	goto	l86
  1767                           	line	187
  1768                           	
  1769  05CE                     l85:	
  1770                           	line	188
  1771                           ;test1.c: 187: else
  1772                           ;test1.c: 188: pivotright();
  1773  05CE  120A  158A  2349   	fcall	_pivotright
              120A  118A         
  1774                           	
  1775  05D3                     l86:	
  1776                           	line	189
  1777                           ;test1.c: 189: pause(90);
  1778  05D3  305A               	movlw	low(05Ah)
  1779  05D4  1283               	bcf	status, 5	;RP0=0, select bank0
  1780  05D5  1303               	bcf	status, 6	;RP1=0, select bank0
  1781                           	
  1782  05D6  00A3               	movwf	(?_pause)
  1783  05D7  3000               	movlw	high(05Ah)
  1784  05D8  00A4               	movwf	((?_pause))+1
  1785  05D9  120A  158A  2408   	fcall	_pause
              120A  118A         
  1786                           	line	190
  1787                           ;test1.c: 190: for(i=0,sum=0;i<5;i++)
  1788  05DE  3000               	movlw	low(0)
  1789  05DF  1283               	bcf	status, 5	;RP0=0, select bank0
  1790  05E0  1303               	bcf	status, 6	;RP1=0, select bank0
  1791                           	
  1792  05E1  00D3               	movwf	(83)
  1793  05E2  3000               	movlw	high(0)
  1794  05E3  00D4               	movwf	((83))+1
  1795  05E4  3000               	movlw	low(0)
  1796                           	
  1797  05E5  00D5               	movwf	(85)
  1798  05E6  3000               	movlw	high(0)
  1799  05E7  00D6               	movwf	((85))+1
  1800  05E8  2E13               	goto	l90
  1801                           	line	191
  1802                           	
  1803  05E9                     l87:	
  1804                           	line	192
  1805                           ;test1.c: 191: {
  1806                           ;test1.c: 192: sensor2[i]=read_adc(2);
  1807  05E9  3002               	movlw	(02h)
  1808  05EA  120A  118A  2731   	fcall	_read_adc
              120A  118A         
  1809  05EF  1283               	bcf	status, 5	;RP0=0, select bank0
  1810  05F0  1303               	bcf	status, 6	;RP1=0, select bank0
  1811                           	
  1812  05F1  0853               	movf	(83),w
  1813  05F2  00A0               	movwf	(??_target+0+0)
  1814  05F3  0720               	addwf	(??_target+0+0),w
  1815  05F4  3E47               	addlw	(71)&0ffh
  1816  05F5  1383               	bcf	status, 7	;select IRP bank1
  1817                           	
  1818  05F6  0084               	movwf	fsr0
  1819  05F7  0823               	movf	(0+?_read_adc),w
  1820  05F8  0080               	movwf	indf
  1821  05F9  0A84               	incf	fsr0,f
  1822  05FA  0824               	movf	(1+?_read_adc),w
  1823  05FB  0080               	movwf	indf
  1824                           	line	193
  1825                           ;test1.c: 193: sum+=sensor2[i];
  1826                           	
  1827  05FC  0853               	movf	(83),w
  1828  05FD  00A0               	movwf	(??_target+0+0)
  1829  05FE  0720               	addwf	(??_target+0+0),w
  1830  05FF  3E47               	addlw	(71)&0ffh
  1831                           	
  1832  0600  0084               	movwf	fsr0
  1833  0601  0800               	movf	indf,w
  1834  0602  00A1               	movwf	(??_target+1+0)
  1835  0603  3001               	movlw	1
  1836  0604  0784               	addwf	fsr0,f
  1837  0605  0800               	movf	indf,w
  1838  0606  00A2               	movwf	(??_target+1+0+1)
  1839                           	
  1840  0607  0821               	movf	0+(??_target+1+0),w
  1841  0608  07D5               	addwf	(85),f
  1842  0609  1803               	skipnc
  1843  060A  0AD6               	incf	(85+1),f
  1844  060B  0822               	movf	1+(??_target+1+0),w
  1845  060C  07D6               	addwf	(85+1),f
  1846                           	line	190
  1847                           	
  1848  060D  3001               	movlw	low(01h)
  1849  060E  07D3               	addwf	(83),f
  1850  060F  1803               	skipnc
  1851  0610  0AD4               	incf	(83+1),f
  1852  0611  3000               	movlw	high(01h)
  1853  0612  07D4               	addwf	(83+1),f
  1854                           	
  1855  0613                     l90:	
  1856                           	
  1857  0613  3000               	movlw	high(05h)
  1858  0614  0254               	subwf	(83+1),w
  1859  0615  3005               	movlw	low(05h)
  1860  0616  1903               	skipnz
  1861  0617  0253               	subwf	(83),w
  1862  0618  1C03               	skipc
  1863  0619  2E1B               	goto	u2261
  1864  061A  2E1C               	goto	u2260
  1865  061B                     u2261:
  1866  061B  2DE9               	goto	l87
  1867  061C                     u2260:
  1868                           	
  1869  061C                     l88:	
  1870                           	line	195
  1871                           ;test1.c: 194: }
  1872                           ;test1.c: 195: average=sum/5;
  1873  061C  3005               	movlw	low(05h)
  1874                           	
  1875  061D  00A5               	movwf	(0+(?___lwdiv)+02h)
  1876  061E  3000               	movlw	high(05h)
  1877  061F  00A6               	movwf	((0+(?___lwdiv)+02h))+1
  1878                           	
  1879                           	
  1880  0620  0856               	movf	(85+1),w
  1881  0621  01A4               	clrf	(?___lwdiv+1)
  1882  0622  07A4               	addwf	(?___lwdiv+1)
  1883  0623  0855               	movf	(85),w
  1884  0624  01A3               	clrf	(?___lwdiv)
  1885  0625  07A3               	addwf	(?___lwdiv)
  1886                           
  1887  0626  120A  118A  27AE   	fcall	___lwdiv
              120A  118A         
  1888  062B  1283               	bcf	status, 5	;RP0=0, select bank0
  1889  062C  1303               	bcf	status, 6	;RP1=0, select bank0
  1890                           	
  1891  062D  0824               	movf	(1+?___lwdiv),w
  1892  062E  01C6               	clrf	(69+1)
  1893  062F  07C6               	addwf	(69+1)
  1894  0630  0823               	movf	(0+?___lwdiv),w
  1895  0631  01C5               	clrf	(69)
  1896  0632  07C5               	addwf	(69)
  1897                           
  1898                           	line	196
  1899                           ;test1.c: 196: sensor2[0]=average;
  1900                           	
  1901                           	
  1902  0633  0846               	movf	(69+1),w
  1903  0634  01C8               	clrf	(71+1)
  1904  0635  07C8               	addwf	(71+1)
  1905  0636  0845               	movf	(69),w
  1906  0637  01C7               	clrf	(71)
  1907  0638  07C7               	addwf	(71)
  1908                           
  1909                           	line	197
  1910                           	
  1911  0639                     l82:	
  1912                           	line	179
  1913                           	
  1914                           	
  1915  0639  0848               	movf	(71+1),w
  1916  063A  025C               	subwf	(91+1),w
  1917  063B  1D03               	skipz
  1918  063C  2E3F               	goto	u2275
  1919  063D  0847               	movf	(71),w
  1920  063E  025B               	subwf	(91),w
  1921  063F                     u2275:
  1922  063F  1803               	skipnc
  1923  0640  2E42               	goto	u2271
  1924  0641  2E43               	goto	u2270
  1925  0642                     u2271:
  1926  0642  2DB8               	goto	l83
  1927  0643                     u2270:
  1928                           	
  1929  0643                     l84:	
  1930                           	line	198
  1931                           ;test1.c: 197: }
  1932                           ;test1.c: 198: motorsoff();
  1933  0643  120A  158A  231C   	fcall	_motorsoff
              120A  118A         
  1934                           	line	199
  1935                           ;test1.c: 199: pause(100);
  1936  0648  3064               	movlw	low(064h)
  1937  0649  1283               	bcf	status, 5	;RP0=0, select bank0
  1938  064A  1303               	bcf	status, 6	;RP1=0, select bank0
  1939                           	
  1940  064B  00A3               	movwf	(?_pause)
  1941  064C  3000               	movlw	high(064h)
  1942  064D  00A4               	movwf	((?_pause))+1
  1943  064E  120A  158A  2408   	fcall	_pause
              120A  118A         
  1944                           	line	200
  1945                           ;test1.c: 200: motorspeed(1,93);
  1946  0653  305D               	movlw	(05Dh)
  1947  0654  1283               	bcf	status, 5	;RP0=0, select bank0
  1948  0655  1303               	bcf	status, 6	;RP1=0, select bank0
  1949                           	
  1950  0656  00A3               	movwf	(?_motorspeed)
  1951  0657  3001               	movlw	(01h)
  1952  0658  120A  158A  25AC   	fcall	_motorspeed
              120A  118A         
  1953                           	line	201
  1954                           ;test1.c: 201: motorspeed(2,100);
  1955  065D  3064               	movlw	(064h)
  1956  065E  1283               	bcf	status, 5	;RP0=0, select bank0
  1957  065F  1303               	bcf	status, 6	;RP1=0, select bank0
  1958                           	
  1959  0660  00A3               	movwf	(?_motorspeed)
  1960  0661  3002               	movlw	(02h)
  1961  0662  120A  158A  25AC   	fcall	_motorspeed
              120A  118A         
  1962                           	line	202
  1963                           ;test1.c: 202: forward();
  1964  0667  120A  158A  2376   	fcall	_forward
              120A  118A         
  1965                           	line	203
  1966                           ;test1.c: 203: return;
  1967  066C  2E6D               	goto	l71
  1968                           	line	208
  1969                           ;test1.c: 208: }
  1970  066D                     l71:	
  1971  066D  0008               	return
  1972                           ; =============== function _target ends =======
                                 ========
  1973                           
  1974                           GLOBAL __end_of_target
  1975  066E                     	__end_of_target:
  1976                           	FNSIZE	_target,3,0
  1977                           	signat	_target,88
  1978                           	global	_configurePIC
  1979                           	global	??_configurePIC
  1980                           	global	?_configurePIC
  1981                           
  1982                           ; *************** function _configurePIC ******
                                 *********
  1983                           ; Defined at:
  1984                           ;		line 29 in file "C:\Program Files (x86)\HI-T
                                 ECH Software\PICC\PRO\9.65\include\PICinit.c"
  1985                           ; Parameters:
  1986                           ;		None
  1987                           ; Auto variables:
  1988                           ;		None
  1989                           ; Return value:
  1990                           ;		type: void 
  1991                           ;		size: 0
  1992                           ; Registers used:
  1993                           ;		wreg, status,2, status,0, pclath, cstack
  1994                           ; Tracked objects:
  1995                           ;		On entry : BFF/0
  1996                           ;		On exit  : 0/0
  1997                           ;		Unchanged: 0/0
  1998                           ; Data sizes:
  1999                           ;		Autos:    0
  2000                           ;		Params:   0
  2001                           ;		Temp:     1
  2002                           ;		Total:    1
  2003                           ; This function calls:
  2004                           ;		_output_low
  2005                           ;		_output_high
  2006                           ;		_read_input
  2007                           ;		_read_adc
  2008                           ;		_putdata
  2009                           ;		_motorspeed
  2010                           ;		_pause
  2011                           ;		_version
  2012                           ; This function is called by:
  2013                           ;		_main
  2014                           ; This function uses a non-reentrant model
  2015                           ; 
  2016                           	psect	text208,local,class=CODE,delta=2
  2017                           	file	"C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  2018                           	line	29
  2019                           ;PICinit.c: 17: void configurePIC()
  2020                           ;PICinit.c: 29: {
  2021                           	
  2022  066E                     _configurePIC:	
  2023                           	opt stack 3
  2024                           ; Regs used in _configurePIC: [wreg+status,2+st
                                 atus,0+pclath+cstack]
  2025                           	line	31
  2026                           ;PICinit.c: 31: ADCON1 = 0b11000010;
  2027  066E  30C2               	movlw	(0C2h)
  2028  066F  1683               	bsf	status, 5	;RP0=1, select bank1
  2029  0670  1303               	bcf	status, 6	;RP1=0, select bank1
  2030                           	
  2031  0671  009F               	movwf	(159)^080h	;volatile
  2032                           	line	32
  2033                           ;PICinit.c: 32: ADCON0 = 0b01000001;
  2034  0672  3041               	movlw	(041h)
  2035  0673  1283               	bcf	status, 5	;RP0=0, select bank0
  2036  0674  1303               	bcf	status, 6	;RP1=0, select bank0
  2037                           	
  2038  0675  009F               	movwf	(31)	;volatile
  2039                           	line	33
  2040                           ;PICinit.c: 33: PORTA = 0b00010000;
  2041  0676  3010               	movlw	(010h)
  2042                           	
  2043  0677  0085               	movwf	(5)	;volatile
  2044                           	line	34
  2045                           ;PICinit.c: 34: TRISA = 0b00101111;
  2046  0678  302F               	movlw	(02Fh)
  2047  0679  1683               	bsf	status, 5	;RP0=1, select bank1
  2048  067A  1303               	bcf	status, 6	;RP1=0, select bank1
  2049                           	
  2050  067B  0085               	movwf	(133)^080h	;volatile
  2051                           	line	35
  2052                           ;PICinit.c: 35: PORTB = 0b00000000;
  2053  067C  1003               	clrc
  2054  067D  1283               	bcf	status, 5	;RP0=0, select bank0
  2055  067E  1303               	bcf	status, 6	;RP1=0, select bank0
  2056                           	
  2057  067F  3000               	movlw	0
  2058  0680  1803               	btfsc	status,0
  2059  0681  3001               	movlw	1
  2060  0682  0086               	movwf	(6)	;volatile
  2061                           	line	36
  2062                           ;PICinit.c: 36: TRISB = 0b11111111;
  2063  0683  1683               	bsf	status, 5	;RP0=1, select bank1
  2064  0684  1303               	bcf	status, 6	;RP1=0, select bank1
  2065                           	
  2066  0685  30FF               	movlw	0ffh
  2067  0686  0086               	movwf	(134)^080h	;volatile
  2068                           	line	37
  2069                           ;PICinit.c: 37: PORTC = 0b00000000;
  2070  0687  1003               	clrc
  2071  0688  1283               	bcf	status, 5	;RP0=0, select bank0
  2072  0689  1303               	bcf	status, 6	;RP1=0, select bank0
  2073                           	
  2074  068A  3000               	movlw	0
  2075  068B  1803               	btfsc	status,0
  2076  068C  3001               	movlw	1
  2077  068D  0087               	movwf	(7)	;volatile
  2078                           	line	38
  2079                           ;PICinit.c: 38: TRISC = 0b11000000;
  2080  068E  30C0               	movlw	(0C0h)
  2081  068F  1683               	bsf	status, 5	;RP0=1, select bank1
  2082  0690  1303               	bcf	status, 6	;RP1=0, select bank1
  2083                           	
  2084  0691  0087               	movwf	(135)^080h	;volatile
  2085                           	line	40
  2086                           ;PICinit.c: 40: PORTD = 0b00000000;
  2087  0692  1003               	clrc
  2088  0693  1283               	bcf	status, 5	;RP0=0, select bank0
  2089  0694  1303               	bcf	status, 6	;RP1=0, select bank0
  2090                           	
  2091  0695  3000               	movlw	0
  2092  0696  1803               	btfsc	status,0
  2093  0697  3001               	movlw	1
  2094  0698  0088               	movwf	(8)	;volatile
  2095                           	line	41
  2096                           ;PICinit.c: 41: TRISD = 0b11111111;
  2097  0699  1683               	bsf	status, 5	;RP0=1, select bank1
  2098  069A  1303               	bcf	status, 6	;RP1=0, select bank1
  2099                           	
  2100  069B  30FF               	movlw	0ffh
  2101  069C  0088               	movwf	(136)^080h	;volatile
  2102                           	line	42
  2103                           ;PICinit.c: 42: PORTE = 0b00000100;
  2104  069D  3004               	movlw	(04h)
  2105  069E  1283               	bcf	status, 5	;RP0=0, select bank0
  2106  069F  1303               	bcf	status, 6	;RP1=0, select bank0
  2107                           	
  2108  06A0  0089               	movwf	(9)	;volatile
  2109                           	line	43
  2110                           ;PICinit.c: 43: TRISE = 0b00000011;
  2111  06A1  3003               	movlw	(03h)
  2112  06A2  1683               	bsf	status, 5	;RP0=1, select bank1
  2113  06A3  1303               	bcf	status, 6	;RP1=0, select bank1
  2114                           	
  2115  06A4  0089               	movwf	(137)^080h	;volatile
  2116                           	line	44
  2117                           ;PICinit.c: 44: OPTION = 0b10000111;
  2118  06A5  3087               	movlw	(087h)
  2119                           	
  2120  06A6  0081               	movwf	(129)^080h
  2121                           	line	46
  2122                           ;PICinit.c: 46: TMR0 = 0b00000000;
  2123  06A7  1003               	clrc
  2124  06A8  1283               	bcf	status, 5	;RP0=0, select bank0
  2125  06A9  1303               	bcf	status, 6	;RP1=0, select bank0
  2126                           	
  2127  06AA  3000               	movlw	0
  2128  06AB  1803               	btfsc	status,0
  2129  06AC  3001               	movlw	1
  2130  06AD  0081               	movwf	(1)	;volatile
  2131                           	line	47
  2132                           ;PICinit.c: 47: SPBRG = 12;
  2133  06AE  300C               	movlw	(0Ch)
  2134  06AF  1683               	bsf	status, 5	;RP0=1, select bank1
  2135  06B0  1303               	bcf	status, 6	;RP1=0, select bank1
  2136                           	
  2137  06B1  0099               	movwf	(153)^080h	;volatile
  2138                           	line	48
  2139                           ;PICinit.c: 48: TXSTA = 0b00100100;
  2140  06B2  3024               	movlw	(024h)
  2141                           	
  2142  06B3  0098               	movwf	(152)^080h	;volatile
  2143                           	line	49
  2144                           ;PICinit.c: 49: RCSTA = 0b10010000;
  2145  06B4  3090               	movlw	(090h)
  2146  06B5  1283               	bcf	status, 5	;RP0=0, select bank0
  2147  06B6  1303               	bcf	status, 6	;RP1=0, select bank0
  2148                           	
  2149  06B7  0098               	movwf	(24)	;volatile
  2150                           	line	55
  2151                           ;PICinit.c: 55: output_low ('c', 0);
  2152  06B8  1003               	clrc
  2153                           	
  2154  06B9  3000               	movlw	0
  2155  06BA  1803               	btfsc	status,0
  2156  06BB  3001               	movlw	1
  2157  06BC  00B3               	movwf	(?_output_low)
  2158  06BD  3063               	movlw	(063h)
  2159  06BE  120A  158A  249D   	fcall	_output_low
              120A  118A         
  2160                           	line	56
  2161                           ;PICinit.c: 56: output_high ('a', 4);
  2162  06C3  3004               	movlw	(04h)
  2163  06C4  1283               	bcf	status, 5	;RP0=0, select bank0
  2164  06C5  1303               	bcf	status, 6	;RP1=0, select bank0
  2165                           	
  2166  06C6  00B3               	movwf	(?_output_high)
  2167  06C7  3061               	movlw	(061h)
  2168  06C8  120A  158A  2448   	fcall	_output_high
              120A  118A         
  2169                           	line	57
  2170                           ;PICinit.c: 57: g_cTmp1=read_input ('e', 0);
  2171  06CD  1003               	clrc
  2172  06CE  1283               	bcf	status, 5	;RP0=0, select bank0
  2173  06CF  1303               	bcf	status, 6	;RP1=0, select bank0
  2174                           	
  2175  06D0  3000               	movlw	0
  2176  06D1  1803               	btfsc	status,0
  2177  06D2  3001               	movlw	1
  2178  06D3  00B3               	movwf	(?_read_input)
  2179  06D4  3065               	movlw	(065h)
  2180  06D5  120A  158A  24F2   	fcall	_read_input
              120A  118A         
  2181  06DA  1283               	bcf	status, 5	;RP0=0, select bank0
  2182  06DB  1303               	bcf	status, 6	;RP1=0, select bank0
  2183  06DC  00A0               	movwf	(??_configurePIC+0+0)
  2184                           	
  2185  06DD  0820               	movf	(??_configurePIC+0+0),w
  2186  06DE  00F0               	movwf	(112)
  2187                           	line	58
  2188                           ;PICinit.c: 58: g_iTmp=read_adc (0);
  2189  06DF  3000               	movlw	(0)
  2190  06E0  120A  118A  2731   	fcall	_read_adc
              120A  118A         
  2191                           	
  2192  06E5  1283               	bcf	status, 5	;RP0=0, select bank0
  2193  06E6  1303               	bcf	status, 6	;RP1=0, select bank0
  2194  06E7  0824               	movf	(1+?_read_adc),w
  2195  06E8  01F7               	clrf	(118+1)
  2196  06E9  07F7               	addwf	(118+1)
  2197  06EA  0823               	movf	(0+?_read_adc),w
  2198  06EB  01F6               	clrf	(118)
  2199  06EC  07F6               	addwf	(118)
  2200                           
  2201                           	line	59
  2202                           ;PICinit.c: 59: putdata (0);
  2203  06ED  3000               	movlw	low(0)
  2204                           	
  2205  06EE  00A1               	movwf	(?_putdata)
  2206  06EF  3000               	movlw	high(0)
  2207  06F0  00A2               	movwf	((?_putdata))+1
  2208  06F1  120A  158A  254E   	fcall	_putdata
              120A  118A         
  2209                           	line	60
  2210                           ;PICinit.c: 60: motorspeed (1, 100);
  2211  06F6  3064               	movlw	(064h)
  2212  06F7  1283               	bcf	status, 5	;RP0=0, select bank0
  2213  06F8  1303               	bcf	status, 6	;RP1=0, select bank0
  2214                           	
  2215  06F9  00A3               	movwf	(?_motorspeed)
  2216  06FA  3001               	movlw	(01h)
  2217  06FB  120A  158A  25AC   	fcall	_motorspeed
              120A  118A         
  2218                           	line	61
  2219                           ;PICinit.c: 61: motorspeed (2, 100);
  2220  0700  3064               	movlw	(064h)
  2221  0701  1283               	bcf	status, 5	;RP0=0, select bank0
  2222  0702  1303               	bcf	status, 6	;RP1=0, select bank0
  2223                           	
  2224  0703  00A3               	movwf	(?_motorspeed)
  2225  0704  3002               	movlw	(02h)
  2226  0705  120A  158A  25AC   	fcall	_motorspeed
              120A  118A         
  2227                           	line	62
  2228                           ;PICinit.c: 62: pause(250);
  2229  070A  30FA               	movlw	low(0FAh)
  2230  070B  1283               	bcf	status, 5	;RP0=0, select bank0
  2231  070C  1303               	bcf	status, 6	;RP1=0, select bank0
  2232                           	
  2233  070D  00A3               	movwf	(?_pause)
  2234  070E  3000               	movlw	high(0FAh)
  2235  070F  00A4               	movwf	((?_pause))+1
  2236  0710  120A  158A  2408   	fcall	_pause
              120A  118A         
  2237                           	line	63
  2238                           ;PICinit.c: 63: version();
  2239  0715  120A  158A  23A3   	fcall	_version
              120A  118A         
  2240                           	line	65
  2241                           ;PICinit.c: 65: cInputErr=0;
  2242  071A  1003               	clrc
  2243                           	
  2244  071B  3000               	movlw	0
  2245  071C  1803               	btfsc	status,0
  2246  071D  3001               	movlw	1
  2247  071E  00F9               	movwf	(121)
  2248                           	line	66
  2249                           ;PICinit.c: 66: rt_toggle=0;
  2250  071F  1003               	clrc
  2251  0720  1283               	bcf	status, 5	;RP0=0, select bank0
  2252  0721  1303               	bcf	status, 6	;RP1=0, select bank0
  2253                           	
  2254  0722  3000               	movlw	0
  2255  0723  1803               	btfsc	status,0
  2256  0724  3001               	movlw	1
  2257  0725  00DF               	movwf	(95)
  2258                           	line	67
  2259                           ;PICinit.c: 67: rt_clock=0;
  2260  0726  3000               	movlw	low(0)
  2261                           	
  2262  0727  00DD               	movwf	(93)
  2263  0728  3000               	movlw	high(0)
  2264  0729  00DE               	movwf	((93))+1
  2265                           	line	68
  2266                           ;PICinit.c: 68: isr_active=0;
  2267  072A  1003               	clrc
  2268                           	
  2269  072B  3000               	movlw	0
  2270  072C  1803               	btfsc	status,0
  2271  072D  3001               	movlw	1
  2272  072E  00F8               	movwf	(120)
  2273                           	line	69
  2274                           ;PICinit.c: 69: return;
  2275  072F  2F30               	goto	l11
  2276                           	line	70
  2277                           ;PICinit.c: 70: }
  2278  0730                     l11:	
  2279  0730  0008               	return
  2280                           ; =============== function _configurePIC ends =
                                 ==============
  2281                           
  2282                           GLOBAL __end_of_configurePIC
  2283  0731                     	__end_of_configurePIC:
  2284                           	FNSIZE	_configurePIC,1,0
  2285                           	signat	_configurePIC,88
  2286                           	global	_pivotleft
  2287                           	global	??_pivotleft
  2288                           	global	?_pivotleft
  2289                           
  2290                           ; *************** function _pivotleft *********
                                 ******
  2291                           ; Defined at:
  2292                           ;		line 122 in file "test1.c"
  2293                           ; Parameters:
  2294                           ;		None
  2295                           ; Auto variables:
  2296                           ;		None
  2297                           ; Return value:
  2298                           ;		type: void 
  2299                           ;		size: 0
  2300                           ; Registers used:
  2301                           ;		wreg, status,2, status,0, pclath, cstack
  2302                           ; Tracked objects:
  2303                           ;		On entry : 0/0
  2304                           ;		On exit  : 0/0
  2305                           ;		Unchanged: 0/0
  2306                           ; Data sizes:
  2307                           ;		Autos:    0
  2308                           ;		Params:   0
  2309                           ;		Temp:     0
  2310                           ;		Total:    0
  2311                           ; This function calls:
  2312                           ;		_output_low
  2313                           ;		_output_high
  2314                           ; This function is called by:
  2315                           ;		_target
  2316                           ;		_navigation
  2317                           ;		_isr
  2318                           ; This function uses a non-reentrant model
  2319                           ; 
  2320                           	psect	text209,local,class=CODE,delta=2
  2321                           	file	"test1.c"
  2322                           	line	122
  2323                           ;test1.c: 121: void pivotleft()
  2324                           ;test1.c: 122: {
  2325                           	
  2326  0AEF                     _pivotleft:	
  2327                           	opt stack 2
  2328                           ; Regs used in _pivotleft: [wreg+status,2+statu
                                 s,0+pclath+cstack]
  2329                           	line	123
  2330                           ;test1.c: 123: output_low('C',5);
  2331  0AEF  3005               	movlw	(05h)
  2332  0AF0  1283               	bcf	status, 5	;RP0=0, select bank0
  2333  0AF1  1303               	bcf	status, 6	;RP1=0, select bank0
  2334                           	
  2335  0AF2  00B3               	movwf	(?_output_low)
  2336  0AF3  3043               	movlw	(043h)
  2337  0AF4  120A  158A  249D   	fcall	_output_low
              120A  158A         
  2338                           	line	124
  2339                           ;test1.c: 124: output_low('C',4);
  2340  0AF9  3004               	movlw	(04h)
  2341  0AFA  1283               	bcf	status, 5	;RP0=0, select bank0
  2342  0AFB  1303               	bcf	status, 6	;RP1=0, select bank0
  2343                           	
  2344  0AFC  00B3               	movwf	(?_output_low)
  2345  0AFD  3043               	movlw	(043h)
  2346  0AFE  120A  158A  249D   	fcall	_output_low
              120A  158A         
  2347                           	line	125
  2348                           ;test1.c: 125: output_high('C',3);
  2349  0B03  3003               	movlw	(03h)
  2350  0B04  1283               	bcf	status, 5	;RP0=0, select bank0
  2351  0B05  1303               	bcf	status, 6	;RP1=0, select bank0
  2352                           	
  2353  0B06  00B3               	movwf	(?_output_high)
  2354  0B07  3043               	movlw	(043h)
  2355  0B08  120A  158A  2448   	fcall	_output_high
              120A  158A         
  2356                           	line	126
  2357                           ;test1.c: 126: output_high('C',0);
  2358  0B0D  1003               	clrc
  2359  0B0E  1283               	bcf	status, 5	;RP0=0, select bank0
  2360  0B0F  1303               	bcf	status, 6	;RP1=0, select bank0
  2361                           	
  2362  0B10  3000               	movlw	0
  2363  0B11  1803               	btfsc	status,0
  2364  0B12  3001               	movlw	1
  2365  0B13  00B3               	movwf	(?_output_high)
  2366  0B14  3043               	movlw	(043h)
  2367  0B15  120A  158A  2448   	fcall	_output_high
              120A  158A         
  2368                           	line	128
  2369                           ;test1.c: 128: return;
  2370  0B1A  2B1B               	goto	l69
  2371                           	line	129
  2372                           ;test1.c: 129: }
  2373  0B1B                     l69:	
  2374  0B1B  0008               	return
  2375                           ; =============== function _pivotleft ends ====
                                 ===========
  2376                           
  2377                           GLOBAL __end_of_pivotleft
  2378  0B1C                     	__end_of_pivotleft:
  2379                           	FNSIZE	_pivotleft,0,0
  2380                           	signat	_pivotleft,88
  2381                           	global	_forward
  2382                           	global	??_forward
  2383                           	global	?_forward
  2384                           
  2385                           ; *************** function _forward ***********
                                 ****
  2386                           ; Defined at:
  2387                           ;		line 104 in file "test1.c"
  2388                           ; Parameters:
  2389                           ;		None
  2390                           ; Auto variables:
  2391                           ;		None
  2392                           ; Return value:
  2393                           ;		type: void 
  2394                           ;		size: 0
  2395                           ; Registers used:
  2396                           ;		wreg, status,2, status,0, pclath, cstack
  2397                           ; Tracked objects:
  2398                           ;		On entry : 0/0
  2399                           ;		On exit  : 0/0
  2400                           ;		Unchanged: 0/0
  2401                           ; Data sizes:
  2402                           ;		Autos:    0
  2403                           ;		Params:   0
  2404                           ;		Temp:     0
  2405                           ;		Total:    0
  2406                           ; This function calls:
  2407                           ;		_output_low
  2408                           ;		_output_high
  2409                           ; This function is called by:
  2410                           ;		_main
  2411                           ;		_target
  2412                           ;		_navigation
  2413                           ;		_isr
  2414                           ; This function uses a non-reentrant model
  2415                           ; 
  2416                           	psect	text210,local,class=CODE,delta=2
  2417                           	file	"test1.c"
  2418                           	line	104
  2419                           ;test1.c: 103: void forward()
  2420                           ;test1.c: 104: {
  2421                           	
  2422  0B76                     _forward:	
  2423                           	opt stack 2
  2424                           ; Regs used in _forward: [wreg+status,2+status,
                                 0+pclath+cstack]
  2425                           	line	105
  2426                           ;test1.c: 105: output_low('C',5);
  2427  0B76  3005               	movlw	(05h)
  2428  0B77  1283               	bcf	status, 5	;RP0=0, select bank0
  2429  0B78  1303               	bcf	status, 6	;RP1=0, select bank0
  2430                           	
  2431  0B79  00B3               	movwf	(?_output_low)
  2432  0B7A  3043               	movlw	(043h)
  2433  0B7B  120A  158A  249D   	fcall	_output_low
              120A  158A         
  2434                           	line	106
  2435                           ;test1.c: 106: output_low('C',3);
  2436  0B80  3003               	movlw	(03h)
  2437  0B81  1283               	bcf	status, 5	;RP0=0, select bank0
  2438  0B82  1303               	bcf	status, 6	;RP1=0, select bank0
  2439                           	
  2440  0B83  00B3               	movwf	(?_output_low)
  2441  0B84  3043               	movlw	(043h)
  2442  0B85  120A  158A  249D   	fcall	_output_low
              120A  158A         
  2443                           	line	107
  2444                           ;test1.c: 107: output_high('C',4);
  2445  0B8A  3004               	movlw	(04h)
  2446  0B8B  1283               	bcf	status, 5	;RP0=0, select bank0
  2447  0B8C  1303               	bcf	status, 6	;RP1=0, select bank0
  2448                           	
  2449  0B8D  00B3               	movwf	(?_output_high)
  2450  0B8E  3043               	movlw	(043h)
  2451  0B8F  120A  158A  2448   	fcall	_output_high
              120A  158A         
  2452                           	line	108
  2453                           ;test1.c: 108: output_high('C',0);
  2454  0B94  1003               	clrc
  2455  0B95  1283               	bcf	status, 5	;RP0=0, select bank0
  2456  0B96  1303               	bcf	status, 6	;RP1=0, select bank0
  2457                           	
  2458  0B97  3000               	movlw	0
  2459  0B98  1803               	btfsc	status,0
  2460  0B99  3001               	movlw	1
  2461  0B9A  00B3               	movwf	(?_output_high)
  2462  0B9B  3043               	movlw	(043h)
  2463  0B9C  120A  158A  2448   	fcall	_output_high
              120A  158A         
  2464                           	line	109
  2465                           ;test1.c: 109: return;
  2466  0BA1  2BA2               	goto	l67
  2467                           	line	110
  2468                           ;test1.c: 110: }
  2469  0BA2                     l67:	
  2470  0BA2  0008               	return
  2471                           ; =============== function _forward ends ======
                                 =========
  2472                           
  2473                           GLOBAL __end_of_forward
  2474  0BA3                     	__end_of_forward:
  2475                           	FNSIZE	_forward,0,0
  2476                           	signat	_forward,88
  2477                           	global	___lwdiv
  2478                           	global	??___lwdiv
  2479                           	global	?___lwdiv
  2480                           
  2481                           ; *************** function ___lwdiv ***********
                                 ****
  2482                           ; Defined at:
  2483                           ;		line 5 in file "C:\Program Files (x86)\HI-TE
                                 CH Software\PICC\PRO\9.65\sources\lwdiv.c"
  2484                           ; Parameters:
  2485                           ;		dividend    	offs:   0	type: unsigned int 
  2486                           ;		divisor     	offs:   2	type: unsigned int 
  2487                           ; Auto variables:
  2488                           ;		counter     	       	type: unsigned char 
  2489                           ;		quotient    	       	type: unsigned int 
  2490                           ; Return value:
  2491                           ;		type: unsigned int 
  2492                           ;		size: 2
  2493                           ; Registers used:
  2494                           ;		wreg, status,2, status,0
  2495                           ; Tracked objects:
  2496                           ;		On entry : 300/0
  2497                           ;		On exit  : 0/0
  2498                           ;		Unchanged: 0/0
  2499                           ; Data sizes:
  2500                           ;		Autos:    3
  2501                           ;		Params:   4
  2502                           ;		Temp:     1
  2503                           ;		Total:    8
  2504                           ; This function calls:
  2505                           ;		Nothing
  2506                           ; This function is called by:
  2507                           ;		_target
  2508                           ;		_navigation
  2509                           ; This function uses a non-reentrant model
  2510                           ; 
  2511                           	psect	text211,local,class=CODE,delta=2
  2512                           	file	"C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\sources\lwdiv.c"
  2513                           	line	5
  2514                           	
  2515  07AE                     ___lwdiv:	
  2516                           	opt stack 2
  2517                           ; Regs used in ___lwdiv: [wreg+status,2+status,
                                 0]
  2518                           	line	9
  2519  07AE  3000               	movlw	low(0)
  2520                           	
  2521  07AF  00A8               	movwf	(___lwdiv_quotient)
  2522  07B0  3000               	movlw	high(0)
  2523  07B1  00A9               	movwf	((___lwdiv_quotient))+1
  2524                           	line	10
  2525                           	
  2526  07B2  0826               	movf	(___lwdiv_divisor+1),w
  2527  07B3  0425               	iorwf	(___lwdiv_divisor),w
  2528  07B4  1903               	skipnz
  2529  07B5  2FB7               	goto	u2511
  2530  07B6  2FB8               	goto	u2510
  2531  07B7                     u2511:
  2532  07B7  2FF3               	goto	l133
  2533  07B8                     u2510:
  2534                           	line	11
  2535                           	
  2536  07B8  01A7               	clrf	(___lwdiv_counter)
  2537  07B9  1403               	bsf	status,0
  2538  07BA  0DA7               	rlf	(___lwdiv_counter),f
  2539                           	line	12
  2540  07BB  2FC7               	goto	l134
  2541                           	
  2542  07BC                     l135:	
  2543                           	line	13
  2544                           	
  2545  07BC  3001               	movlw	01h
  2546  07BD                     u2525:
  2547  07BD  1003               	clrc
  2548  07BE  0DA5               	rlf	(___lwdiv_divisor),f
  2549  07BF  0DA6               	rlf	(___lwdiv_divisor+1),f
  2550  07C0  3EFF               	addlw	-1
  2551  07C1  1D03               	skipz
  2552  07C2  2FBD               	goto	u2525
  2553                           	line	14
  2554  07C3  3001               	movlw	(01h)
  2555  07C4  00AA               	movwf	(??___lwdiv+3+0)
  2556                           	
  2557  07C5  082A               	movf	(??___lwdiv+3+0),w
  2558  07C6  07A7               	addwf	(___lwdiv_counter),f
  2559                           	line	15
  2560                           	
  2561  07C7                     l134:	
  2562                           	line	12
  2563                           	
  2564  07C7  1FA6               	btfss	(___lwdiv_divisor+1),(15)&7
  2565  07C8  2FCA               	goto	u2531
  2566  07C9  2FCB               	goto	u2530
  2567  07CA                     u2531:
  2568  07CA  2FBC               	goto	l135
  2569  07CB                     u2530:
  2570                           	
  2571  07CB                     l136:	
  2572                           	line	16
  2573                           	
  2574  07CB                     l139:	
  2575                           	line	17
  2576                           	
  2577  07CB  3001               	movlw	01h
  2578  07CC                     u2545:
  2579  07CC  1003               	clrc
  2580  07CD  0DA8               	rlf	(___lwdiv_quotient),f
  2581  07CE  0DA9               	rlf	(___lwdiv_quotient+1),f
  2582  07CF  3EFF               	addlw	-1
  2583  07D0  1D03               	skipz
  2584  07D1  2FCC               	goto	u2545
  2585                           	line	18
  2586                           	
  2587                           	
  2588  07D2  0826               	movf	(___lwdiv_divisor+1),w
  2589  07D3  0224               	subwf	(___lwdiv_dividend+1),w
  2590  07D4  1D03               	skipz
  2591  07D5  2FD8               	goto	u2555
  2592  07D6  0825               	movf	(___lwdiv_divisor),w
  2593  07D7  0223               	subwf	(___lwdiv_dividend),w
  2594  07D8                     u2555:
  2595  07D8  1C03               	skipc
  2596  07D9  2FDB               	goto	u2551
  2597  07DA  2FDC               	goto	u2550
  2598  07DB                     u2551:
  2599  07DB  2FE6               	goto	l140
  2600  07DC                     u2550:
  2601                           	line	19
  2602                           	
  2603                           	
  2604  07DC  0825               	movf	(___lwdiv_divisor),w
  2605  07DD  02A3               	subwf	(___lwdiv_dividend),f
  2606  07DE  0826               	movf	(___lwdiv_divisor+1),w
  2607  07DF  1C03               	skipc
  2608  07E0  03A4               	decf	(___lwdiv_dividend+1),f
  2609  07E1  02A4               	subwf	(___lwdiv_dividend+1),f
  2610                           	line	20
  2611                           	
  2612  07E2  3001               	movlw	low(01h)
  2613  07E3  04A8               	iorwf	(___lwdiv_quotient),f
  2614  07E4  3000               	movlw	high(01h)
  2615  07E5  04A9               	iorwf	(___lwdiv_quotient+1),f
  2616                           	line	21
  2617                           	
  2618  07E6                     l140:	
  2619                           	line	22
  2620                           	
  2621  07E6  3001               	movlw	01h
  2622  07E7                     u2565:
  2623  07E7  1003               	clrc
  2624  07E8  0CA6               	rrf	(___lwdiv_divisor+1),f
  2625  07E9  0CA5               	rrf	(___lwdiv_divisor),f
  2626  07EA  3EFF               	addlw	-1
  2627  07EB  1D03               	skipz
  2628  07EC  2FE7               	goto	u2565
  2629                           	line	23
  2630                           	
  2631                           	
  2632  07ED  3001               	movlw	low(01h)
  2633  07EE  02A7               	subwf	(___lwdiv_counter),f
  2634  07EF  1D03               	btfss	status,2
  2635  07F0  2FF2               	goto	u2571
  2636  07F1  2FF3               	goto	u2570
  2637  07F2                     u2571:
  2638  07F2  2FCB               	goto	l139
  2639  07F3                     u2570:
  2640                           	
  2641  07F3                     l138:	
  2642                           	line	24
  2643                           	
  2644  07F3                     l133:	
  2645                           	line	25
  2646                           	
  2647                           	
  2648  07F3  0829               	movf	(___lwdiv_quotient+1),w
  2649  07F4  01A4               	clrf	(?___lwdiv+1)
  2650  07F5  07A4               	addwf	(?___lwdiv+1)
  2651  07F6  0828               	movf	(___lwdiv_quotient),w
  2652  07F7  01A3               	clrf	(?___lwdiv)
  2653  07F8  07A3               	addwf	(?___lwdiv)
  2654                           
  2655  07F9  2FFA               	goto	l132
  2656                           	line	26
  2657  07FA                     l132:	
  2658  07FA  0008               	return
  2659                           ; =============== function ___lwdiv ends ======
                                 =========
  2660                           
  2661                           GLOBAL __end_of___lwdiv
  2662  07FB                     	__end_of___lwdiv:
  2663                           	FNSIZE	___lwdiv,4,4
  2664                           	signat	___lwdiv,8314
  2665                           	global	_motorsoff
  2666                           	global	??_motorsoff
  2667                           	global	?_motorsoff
  2668                           
  2669                           ; *************** function _motorsoff *********
                                 ******
  2670                           ; Defined at:
  2671                           ;		line 95 in file "test1.c"
  2672                           ; Parameters:
  2673                           ;		None
  2674                           ; Auto variables:
  2675                           ;		None
  2676                           ; Return value:
  2677                           ;		type: void 
  2678                           ;		size: 0
  2679                           ; Registers used:
  2680                           ;		wreg, status,2, status,0, pclath, cstack
  2681                           ; Tracked objects:
  2682                           ;		On entry : 0/0
  2683                           ;		On exit  : 0/0
  2684                           ;		Unchanged: 0/0
  2685                           ; Data sizes:
  2686                           ;		Autos:    0
  2687                           ;		Params:   0
  2688                           ;		Temp:     0
  2689                           ;		Total:    0
  2690                           ; This function calls:
  2691                           ;		_output_low
  2692                           ; This function is called by:
  2693                           ;		_main
  2694                           ;		_target
  2695                           ;		_navigation
  2696                           ;		_isr
  2697                           ; This function uses a non-reentrant model
  2698                           ; 
  2699                           	psect	text212,local,class=CODE,delta=2
  2700                           	file	"test1.c"
  2701                           	line	95
  2702                           ;test1.c: 94: void motorsoff()
  2703                           ;test1.c: 95: {
  2704                           	
  2705  0B1C                     _motorsoff:	
  2706                           	opt stack 2
  2707                           ; Regs used in _motorsoff: [wreg+status,2+statu
                                 s,0+pclath+cstack]
  2708                           	line	96
  2709                           ;test1.c: 96: output_low('C',0);
  2710  0B1C  1003               	clrc
  2711  0B1D  1283               	bcf	status, 5	;RP0=0, select bank0
  2712  0B1E  1303               	bcf	status, 6	;RP1=0, select bank0
  2713                           	
  2714  0B1F  3000               	movlw	0
  2715  0B20  1803               	btfsc	status,0
  2716  0B21  3001               	movlw	1
  2717  0B22  00B3               	movwf	(?_output_low)
  2718  0B23  3043               	movlw	(043h)
  2719  0B24  120A  158A  249D   	fcall	_output_low
              120A  158A         
  2720                           	line	97
  2721                           ;test1.c: 97: output_low('C',5);
  2722  0B29  3005               	movlw	(05h)
  2723  0B2A  1283               	bcf	status, 5	;RP0=0, select bank0
  2724  0B2B  1303               	bcf	status, 6	;RP1=0, select bank0
  2725                           	
  2726  0B2C  00B3               	movwf	(?_output_low)
  2727  0B2D  3043               	movlw	(043h)
  2728  0B2E  120A  158A  249D   	fcall	_output_low
              120A  158A         
  2729                           	line	98
  2730                           ;test1.c: 98: output_low('C',3);
  2731  0B33  3003               	movlw	(03h)
  2732  0B34  1283               	bcf	status, 5	;RP0=0, select bank0
  2733  0B35  1303               	bcf	status, 6	;RP1=0, select bank0
  2734                           	
  2735  0B36  00B3               	movwf	(?_output_low)
  2736  0B37  3043               	movlw	(043h)
  2737  0B38  120A  158A  249D   	fcall	_output_low
              120A  158A         
  2738                           	line	99
  2739                           ;test1.c: 99: output_low('C',4);
  2740  0B3D  3004               	movlw	(04h)
  2741  0B3E  1283               	bcf	status, 5	;RP0=0, select bank0
  2742  0B3F  1303               	bcf	status, 6	;RP1=0, select bank0
  2743                           	
  2744  0B40  00B3               	movwf	(?_output_low)
  2745  0B41  3043               	movlw	(043h)
  2746  0B42  120A  158A  249D   	fcall	_output_low
              120A  158A         
  2747                           	line	100
  2748                           ;test1.c: 100: return;
  2749  0B47  2B48               	goto	l66
  2750                           	line	101
  2751                           ;test1.c: 101: }
  2752  0B48                     l66:	
  2753  0B48  0008               	return
  2754                           ; =============== function _motorsoff ends ====
                                 ===========
  2755                           
  2756                           GLOBAL __end_of_motorsoff
  2757  0B49                     	__end_of_motorsoff:
  2758                           	FNSIZE	_motorsoff,0,0
  2759                           	signat	_motorsoff,88
  2760                           	global	_pivotright
  2761                           	global	??_pivotright
  2762                           	global	?_pivotright
  2763                           
  2764                           ; *************** function _pivotright ********
                                 *******
  2765                           ; Defined at:
  2766                           ;		line 132 in file "test1.c"
  2767                           ; Parameters:
  2768                           ;		None
  2769                           ; Auto variables:
  2770                           ;		None
  2771                           ; Return value:
  2772                           ;		type: void 
  2773                           ;		size: 0
  2774                           ; Registers used:
  2775                           ;		wreg, status,2, status,0, pclath, cstack
  2776                           ; Tracked objects:
  2777                           ;		On entry : 0/0
  2778                           ;		On exit  : 0/0
  2779                           ;		Unchanged: 0/0
  2780                           ; Data sizes:
  2781                           ;		Autos:    0
  2782                           ;		Params:   0
  2783                           ;		Temp:     0
  2784                           ;		Total:    0
  2785                           ; This function calls:
  2786                           ;		_output_low
  2787                           ;		_output_high
  2788                           ; This function is called by:
  2789                           ;		_target
  2790                           ;		_navigation
  2791                           ;		_isr
  2792                           ; This function uses a non-reentrant model
  2793                           ; 
  2794                           	psect	text213,local,class=CODE,delta=2
  2795                           	file	"test1.c"
  2796                           	line	132
  2797                           ;test1.c: 131: void pivotright()
  2798                           ;test1.c: 132: {
  2799                           	
  2800  0B49                     _pivotright:	
  2801                           	opt stack 2
  2802                           ; Regs used in _pivotright: [wreg+status,2+stat
                                 us,0+pclath+cstack]
  2803                           	line	133
  2804                           ;test1.c: 133: output_low('C',0);
  2805  0B49  1003               	clrc
  2806  0B4A  1283               	bcf	status, 5	;RP0=0, select bank0
  2807  0B4B  1303               	bcf	status, 6	;RP1=0, select bank0
  2808                           	
  2809  0B4C  3000               	movlw	0
  2810  0B4D  1803               	btfsc	status,0
  2811  0B4E  3001               	movlw	1
  2812  0B4F  00B3               	movwf	(?_output_low)
  2813  0B50  3043               	movlw	(043h)
  2814  0B51  120A  158A  249D   	fcall	_output_low
              120A  158A         
  2815                           	line	134
  2816                           ;test1.c: 134: output_low('C',3);
  2817  0B56  3003               	movlw	(03h)
  2818  0B57  1283               	bcf	status, 5	;RP0=0, select bank0
  2819  0B58  1303               	bcf	status, 6	;RP1=0, select bank0
  2820                           	
  2821  0B59  00B3               	movwf	(?_output_low)
  2822  0B5A  3043               	movlw	(043h)
  2823  0B5B  120A  158A  249D   	fcall	_output_low
              120A  158A         
  2824                           	line	135
  2825                           ;test1.c: 135: output_high('C',4);
  2826  0B60  3004               	movlw	(04h)
  2827  0B61  1283               	bcf	status, 5	;RP0=0, select bank0
  2828  0B62  1303               	bcf	status, 6	;RP1=0, select bank0
  2829                           	
  2830  0B63  00B3               	movwf	(?_output_high)
  2831  0B64  3043               	movlw	(043h)
  2832  0B65  120A  158A  2448   	fcall	_output_high
              120A  158A         
  2833                           	line	136
  2834                           ;test1.c: 136: output_high('C',5);
  2835  0B6A  3005               	movlw	(05h)
  2836  0B6B  1283               	bcf	status, 5	;RP0=0, select bank0
  2837  0B6C  1303               	bcf	status, 6	;RP1=0, select bank0
  2838                           	
  2839  0B6D  00B3               	movwf	(?_output_high)
  2840  0B6E  3043               	movlw	(043h)
  2841  0B6F  120A  158A  2448   	fcall	_output_high
              120A  158A         
  2842                           	line	138
  2843                           ;test1.c: 138: return;
  2844  0B74  2B75               	goto	l70
  2845                           	line	139
  2846                           ;test1.c: 139: }
  2847  0B75                     l70:	
  2848  0B75  0008               	return
  2849                           ; =============== function _pivotright ends ===
                                 ============
  2850                           
  2851                           GLOBAL __end_of_pivotright
  2852  0B76                     	__end_of_pivotright:
  2853                           	FNSIZE	_pivotright,0,0
  2854                           	signat	_pivotright,88
  2855                           	global	_version
  2856                           	global	??_version
  2857                           	global	?_version
  2858                           
  2859                           ; *************** function _version ***********
                                 ****
  2860                           ; Defined at:
  2861                           ;		line 914 in file "C:\Program Files (x86)\HI-
                                 TECH Software\PICC\PRO\9.65\include\PICinit.c"
  2862                           ; Parameters:
  2863                           ;		None
  2864                           ; Auto variables:
  2865                           ;		i           	       	type: unsigned char 
  2866                           ; Return value:
  2867                           ;		type: void 
  2868                           ;		size: 0
  2869                           ; Registers used:
  2870                           ;		wreg, status,2, status,0, pclath, cstack
  2871                           ; Tracked objects:
  2872                           ;		On entry : 0/0
  2873                           ;		On exit  : 0/0
  2874                           ;		Unchanged: 0/0
  2875                           ; Data sizes:
  2876                           ;		Autos:    1
  2877                           ;		Params:   0
  2878                           ;		Temp:     1
  2879                           ;		Total:    2
  2880                           ; This function calls:
  2881                           ;		_putchar
  2882                           ; This function is called by:
  2883                           ;		_configurePIC
  2884                           ; This function uses a non-reentrant model
  2885                           ; 
  2886                           	psect	text214,local,class=CODE,delta=2
  2887                           	file	"C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  2888                           	line	914
  2889                           ;PICinit.c: 910: void version ()
  2890                           ;PICinit.c: 914: {
  2891                           	
  2892  0BA3                     _version:	
  2893                           	opt stack 2
  2894                           ; Regs used in _version: [wreg+status,2+status,
                                 0+pclath+cstack]
  2895                           	line	915
  2896                           ;PICinit.c: 915: char i=0;
  2897  0BA3  1003               	clrc
  2898  0BA4  1283               	bcf	status, 5	;RP0=0, select bank0
  2899  0BA5  1303               	bcf	status, 6	;RP1=0, select bank0
  2900                           	
  2901  0BA6  3000               	movlw	0
  2902  0BA7  1803               	btfsc	status,0
  2903  0BA8  3001               	movlw	1
  2904  0BA9  00A1               	movwf	(_version_i)
  2905                           	line	916
  2906                           ;PICinit.c: 916: while (ver[i] != 0)
  2907  0BAA  2BBD               	goto	l47
  2908                           	
  2909  0BAB                     l48:	
  2910                           	line	918
  2911                           ;PICinit.c: 917: {
  2912                           ;PICinit.c: 918: putchar (ver[i]);
  2913                           	
  2914                           	
  2915  0BAB  0840               	movf	(64),w
  2916  0BAC  0721               	addwf	(_version_i),w
  2917                           	FNCALL _version,stringtab
  2918  0BAD  120A  118A  2209   	fcall	stringdir
              120A  158A         
  2919  0BB2  120A  158A  21D8   	fcall	_putchar
              120A  158A         
  2920                           	line	919
  2921                           ;PICinit.c: 919: i++;
  2922  0BB7  3001               	movlw	(01h)
  2923  0BB8  1283               	bcf	status, 5	;RP0=0, select bank0
  2924  0BB9  1303               	bcf	status, 6	;RP1=0, select bank0
  2925  0BBA  00A2               	movwf	(??_version+1+0)
  2926                           	
  2927  0BBB  0822               	movf	(??_version+1+0),w
  2928  0BBC  07A1               	addwf	(_version_i),f
  2929                           	line	920
  2930                           	
  2931  0BBD                     l47:	
  2932                           	line	916
  2933                           	
  2934                           	
  2935  0BBD  0840               	movf	(64),w
  2936  0BBE  0721               	addwf	(_version_i),w
  2937                           	FNCALL _version,stringtab
  2938  0BBF  120A  118A  2209   	fcall	stringdir
              120A  158A         
  2939  0BC4  3800               	iorlw	0
  2940  0BC5  1D03               	skipz
  2941  0BC6  2BC8               	goto	u2691
  2942  0BC7  2BC9               	goto	u2690
  2943  0BC8                     u2691:
  2944  0BC8  2BAB               	goto	l48
  2945  0BC9                     u2690:
  2946                           	
  2947  0BC9                     l49:	
  2948                           	line	921
  2949                           ;PICinit.c: 920: }
  2950                           ;PICinit.c: 921: putchar(13);
  2951  0BC9  300D               	movlw	(0Dh)
  2952  0BCA  120A  158A  21D8   	fcall	_putchar
              120A  158A         
  2953                           	line	922
  2954                           ;PICinit.c: 922: return;
  2955  0BCF  2BD0               	goto	l46
  2956                           	line	923
  2957                           ;PICinit.c: 923: }
  2958  0BD0                     l46:	
  2959  0BD0  0008               	return
  2960                           ; =============== function _version ends ======
                                 =========
  2961                           
  2962                           GLOBAL __end_of_version
  2963  0BD1                     	__end_of_version:
  2964                           	FNSIZE	_version,2,0
  2965                           	signat	_version,88
  2966                           	global	_putdata
  2967                           	global	??_putdata
  2968                           	global	?_putdata
  2969                           
  2970                           ; *************** function _putdata ***********
                                 ****
  2971                           ; Defined at:
  2972                           ;		line 519 in file "C:\Program Files (x86)\HI-
                                 TECH Software\PICC\PRO\9.65\include\PICinit.c"
  2973                           ; Parameters:
  2974                           ;		data        	offs:   0	type: unsigned int 
  2975                           ; Auto variables:
  2976                           ;		None
  2977                           ; Return value:
  2978                           ;		type: void 
  2979                           ;		size: 0
  2980                           ; Registers used:
  2981                           ;		wreg, status,2, status,0
  2982                           ; Tracked objects:
  2983                           ;		On entry : 300/0
  2984                           ;		On exit  : 0/0
  2985                           ;		Unchanged: 0/0
  2986                           ; Data sizes:
  2987                           ;		Autos:    0
  2988                           ;		Params:   2
  2989                           ;		Temp:     0
  2990                           ;		Total:    2
  2991                           ; This function calls:
  2992                           ;		Nothing
  2993                           ; This function is called by:
  2994                           ;		_configurePIC
  2995                           ; This function uses a non-reentrant model
  2996                           ; 
  2997                           	psect	text215,local,class=CODE,delta=2
  2998                           	file	"C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  2999                           	line	519
  3000                           ;PICinit.c: 510: void putdata (unsigned int dat
                                 a)
  3001                           ;PICinit.c: 519: {
  3002                           	
  3003  0D4E                     _putdata:	
  3004                           	opt stack 2
  3005                           ; Regs used in _putdata: [wreg+status,2+status,
                                 0]
  3006                           	line	520
  3007                           ;PICinit.c: 520: INTE=0;
  3008  0D4E  120B               	bcf	(92/8),(92)&7
  3009                           	line	521
  3010                           ;PICinit.c: 521: g_iArg = data;
  3011                           	
  3012                           	
  3013  0D4F  0822               	movf	(_putdata_data+1),w
  3014  0D50  01F5               	clrf	(116+1)
  3015  0D51  07F5               	addwf	(116+1)
  3016  0D52  0821               	movf	(_putdata_data),w
  3017  0D53  01F4               	clrf	(116)
  3018  0D54  07F4               	addwf	(116)
  3019                           
  3020                           	line	524
  3021                           # 524 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3022  0D55  0803                       movf status, w ;save Status to restore 
                                 before exiting ;#
  3023                           	line	525
  3024                           # 525 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3025  0D56  00F3                       movwf _cStatusR ;possible need to prese
                                 rve Bank bits for 0x00 code ;#
  3026                           	line	527
  3027                           # 527 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3028  0D57  01F2                       clrf _g_cTmp3 ;flag used to supress lea
                                 ding zeros ;#
  3029                           	line	528
  3030                           # 528 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3031  0D58  01F0                       clrf _g_cTmp1 ;#
  3032                           	line	529
  3033                           # 529 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3034  0D59  1470                       bsf _g_cTmp1, 0 ;00000001 ;#
  3035                           	line	532
  3036                           # 532 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3037  0D5A  3010                       movlw 0x10 ;low byte of 10000 ;#
  3038                           	line	533
  3039                           # 533 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3040  0D5B  00F6                       movwf _g_iTmp ;#
  3041                           	line	534
  3042                           # 534 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3043  0D5C  3027                       movlw 0x27 ;high byte of 10000 ;#
  3044                           	line	535
  3045                           # 535 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3046  0D5D  00F7                       movwf _g_iTmp+1 ;#
  3047                           	line	537
  3048                           # 537 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3049                                                       ;~~~~~~~~~~~~~~~~~~
                                 ~~~~~~~~~~~~~~~~~~~OUTER LOOP ;#
  3050                           	line	538
  3051                           # 538 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3052  0D5E  1CF0                       btfss _g_cTmp1, 1 ;if bit 1 = 1 ;#
  3053                           	line	539
  3054                           # 539 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3055  0D5F  2D64                       goto $+5 ;#
  3056                           	line	540
  3057                           # 540 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3058  0D60  30E8                       movlw 0xE8 ;low byte of 1000 ;#
  3059                           	line	541
  3060                           # 541 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3061  0D61  00F6                       movwf _g_iTmp ;#
  3062                           	line	542
  3063                           # 542 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3064  0D62  3003                       movlw 0x03 ;high byte of 1000 ;#
  3065                           	line	543
  3066                           # 543 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3067  0D63  00F7                       movwf _g_iTmp+1 ;#
  3068                           	line	545
  3069                           # 545 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3070  0D64  1D70                       btfss _g_cTmp1, 2 ;if bit 2 = 1 ;#
  3071                           	line	546
  3072                           # 546 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3073  0D65  2D6A                       goto $+5 ;#
  3074                           	line	547
  3075                           # 547 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3076  0D66  3064                       movlw 0x64 ;low byte of 100 ;#
  3077                           	line	548
  3078                           # 548 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3079  0D67  00F6                       movwf _g_iTmp ;#
  3080                           	line	549
  3081                           # 549 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3082  0D68  3000                       movlw 0x00 ;high byte of 100 ;#
  3083                           	line	550
  3084                           # 550 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3085  0D69  00F7                       movwf _g_iTmp+1 ;#
  3086                           	line	552
  3087                           # 552 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3088  0D6A  1DF0                       btfss _g_cTmp1, 3 ;if bit 3 = 1 ;#
  3089                           	line	553
  3090                           # 553 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3091  0D6B  2D70                       goto $+5 ;#
  3092                           	line	554
  3093                           # 554 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3094  0D6C  300A                       movlw 0x0A ;low byte of 10 ;#
  3095                           	line	555
  3096                           # 555 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3097  0D6D  00F6                       movwf _g_iTmp ;#
  3098                           	line	556
  3099                           # 556 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3100  0D6E  3000                       movlw 0x00 ;high byte of 10 ;#
  3101                           	line	557
  3102                           # 557 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3103  0D6F  00F7                       movwf _g_iTmp+1 ;#
  3104                           	line	559
  3105                           # 559 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3106  0D70  1E70                       btfss _g_cTmp1, 4 ;if bit 4 = 1 ;#
  3107                           	line	560
  3108                           # 560 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3109  0D71  2D76                       goto $+5 ;#
  3110                           	line	561
  3111                           # 561 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3112  0D72  3001                       movlw 0x01 ;low byte of 1 ;#
  3113                           	line	562
  3114                           # 562 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3115  0D73  00F6                       movwf _g_iTmp ;#
  3116                           	line	563
  3117                           # 563 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3118  0D74  3000                       movlw 0x00 ;high byte of 1 ;#
  3119                           	line	564
  3120                           # 564 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3121  0D75  00F7                       movwf _g_iTmp+1 ;#
  3122                           	line	566
  3123                           # 566 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3124  0D76  01F1                       clrf _g_cTmp2 ;clear digit value counte
                                 r ;#
  3125                           	line	567
  3126                           # 567 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3127                                                       ;each loop iteratio
                                 n will subtract a value of ;#
  3128                           	line	568
  3129                           # 568 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3130                                                       ; 10000, 1000, 1000
                                 , 100, 10 until the value ;#
  3131                           	line	569
  3132                           # 569 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3133                                                       ; becomes negative 
                                 ;#
  3134                           	line	570
  3135                           # 570 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3136                                                       ; digit value count
                                 er will inc. each iteration ;#
  3137                           	line	571
  3138                           # 571 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3139  0D77  0AF1                       incf _g_cTmp2, f ;~~~~~~~~~~~~~~~~~~~~~
                                 ~~~~~~~~~~~~~~INNER LOOP ;#
  3140                           	line	572
  3141                           # 572 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3142  0D78  0876                       movf _g_iTmp, w ;low of 10000, 1000, 10
                                 00 ;#
  3143                           	line	573
  3144                           # 573 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3145  0D79  0274                       subwf _g_iArg, w ; ;#
  3146                           	line	574
  3147                           # 574 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3148  0D7A  00F4                       movwf _g_iArg ;#
  3149                           	line	575
  3150                           # 575 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3151  0D7B  0877                       movf _g_iTmp+1, w ;high of 10000, 1000,
                                  1000 ;#
  3152                           	line	576
  3153                           # 576 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3154  0D7C  1C03                       btfss status, 0x00 ;Carry, skip if carr
                                 y ;#
  3155                           	line	577
  3156                           # 577 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3157  0D7D  0A77                       incf _g_iTmp+1, w ;#
  3158                           	line	578
  3159                           # 578 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3160  0D7E  0275                       subwf _g_iArg+1, w ;#
  3161                           	line	579
  3162                           # 579 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3163  0D7F  00F5                       movwf _g_iArg+1 ;#
  3164                           	line	580
  3165                           # 580 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3166  0D80  1803                       btfsc status, 0x00 ;Carry, skip if carr
                                 y ;#
  3167                           	line	581
  3168                           # 581 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3169  0D81  2D77                       goto $-10 ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                 ~~~~~~~INNER LOOP ;#
  3170                           	line	583
  3171                           # 583 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3172                                                       ;need to add subtra
                                 ction value back to ;#
  3173                           	line	584
  3174                           # 584 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3175  0D82  0876                       movf _g_iTmp, w ; correct for rollover 
                                 ;#
  3176                           	line	585
  3177                           # 585 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3178  0D83  07F4                       addwf _g_iArg, f ;#
  3179                           	line	586
  3180                           # 586 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3181  0D84  0877                       movf _g_iTmp+1, w ;#
  3182                           	line	587
  3183                           # 587 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3184  0D85  1803                       btfsc status, 0x00 ;Carry, skip if no c
                                 arry ;#
  3185                           	line	588
  3186                           # 588 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3187  0D86  3E01                       addlw 1 ;#
  3188                           	line	589
  3189                           # 589 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3190  0D87  07F5                       addwf _g_iArg+1, f ;#
  3191                           	line	591
  3192                           # 591 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3193  0D88  1383                               bcf status, 0x07 ;Clear 0x07 fo
                                 r indirect addressing to data Bank 0,1 ;#
  3194                           	line	592
  3195                           # 592 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3196  0D89  3098                       movlw 98h ;8 bit indirect address for T
                                 XSTA ;#
  3197                           	line	593
  3198                           # 593 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3199  0D8A  0084                       movwf fsr ;#
  3200                           	line	594
  3201                           # 594 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3202  0D8B  1C80                       btfss indf, 1 ;1=Transmit Shift Reg Sta
                                 tus, 1=TSR empty ;#
  3203                           	line	595
  3204                           # 595 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3205  0D8C  2D8B                       goto $-1 ;Loop until xmit shift registe
                                 r empty ;#
  3206                           	line	596
  3207                           # 596 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3208  0D8D  3019                       movlw 19h ;8 bit indirect address for T
                                 XREG ;#
  3209                           	line	597
  3210                           # 597 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3211  0D8E  0084                       movwf fsr ;#
  3212                           	line	598
  3213                           # 598 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3214  0D8F  0871                       movf _g_cTmp2, w ;#
  3215                           	line	599
  3216                           # 599 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3217  0D90  3E2F                       addlw 47 ;convert value to Ascii char (
                                 47 = '0' - 1) ;#
  3218                           	line	600
  3219                           # 600 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3220                                        ;w holds ASCII character ready to 
                                 send ;#
  3221                           	line	601
  3222                           # 601 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3223  0D91  1003                       bcf status, 0x00 ;insure carry bit is c
                                 lear for rotate ;#
  3224                           	line	602
  3225                           # 602 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3226  0D92  0DF0                       rlf _g_cTmp1, f ;00000010, 00000100, 00
                                 001000, 00010000, 00100000 ;#
  3227                           	line	603
  3228                           # 603 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3229  0D93  1AF0                       btfsc _g_cTmp1, 5 ;if bit 5 set -->this
                                  is last (or only) character to send ;#
  3230                           	line	604
  3231                           # 604 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3232  0D94  2D9C                       goto $+8 ;goto output the character (al
                                 low a zero to pass) ;#
  3233                           	line	605
  3234                           # 605 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3235                                        ;i.e., do not check for leading ze
                                 ro suppression ;#
  3236                           	line	606
  3237                           # 606 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3238  0D95  1872                       btfsc _g_cTmp3, 0 ;check leading zero s
                                 uppression bit flag ;#
  3239                           	line	607
  3240                           # 607 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3241  0D96  2D9C                       goto $+6 ;if bit flag=0, keep supressin
                                 g ;#
  3242                           	line	608
  3243                           # 608 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3244  0D97  00F1                       movwf _g_cTmp2 ;save ASCII character ;#
  3245                           	line	609
  3246                           # 609 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3247  0D98  390F                       andlw 0x0F ;check for zero character ;#
  3248                           	line	610
  3249                           # 610 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3250  0D99  1903                       btfsc status, 0x02 ;#
  3251                           	line	611
  3252                           # 611 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3253  0D9A  2D9E                       goto $+4 ;#
  3254                           	line	612
  3255                           # 612 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3256  0D9B  0871                       movf _g_cTmp2, w ;if here, its not a le
                                 ading zero, reload character and ;#
  3257                           	line	613
  3258                           # 613 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3259  0D9C  0080                       movwf indf ;output the character ;#
  3260                           	line	614
  3261                           # 614 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3262  0D9D  1472                       bsf _g_cTmp3, 0 ;set leading zero suppr
                                 ession flag-->we have output a ;#
  3263                           	line	615
  3264                           # 615 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3265                                        ;non-zero character, or a final ch
                                 aracter = 0 volts ;#
  3266                           	line	616
  3267                           # 616 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3268  0D9E  1EF0                       btfss _g_cTmp1, 5 ;check if this was th
                                 e last character ;#
  3269                           	line	617
  3270                           # 617 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3271  0D9F  2D5E                       goto $-65 ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                 ~~~~~~~~~OUTER LOOP ;#
  3272                           	line	619
  3273                           # 619 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3274  0DA0  3020                       movlw ' ' ;send trailing space ;#
  3275                           	line	620
  3276                           # 620 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3277  0DA1  1683                       bsf status, 5 ;RP0=1, select bank1 for 
                                 direct addressing ;#
  3278                           	line	621
  3279                           # 621 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3280  0DA2  1303                       bcf status, 6 ;RP1=0, select bank1 ;#
  3281                           	line	622
  3282                           # 622 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3283  0DA3  1C98                       btfss 0x18, 1 ;18h is 7 bit address of 
                                 TXSTA (on Bank1) ;#
  3284                           	line	623
  3285                           # 623 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3286                                        ;1=Transmit Shift Reg Status, 1=TS
                                 R empty ;#
  3287                           	line	624
  3288                           # 624 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3289  0DA4  2DA3                       goto $-1 ;Loop until xmit shift registe
                                 r empty ;#
  3290                           	line	625
  3291                           # 625 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3292  0DA5  1283                       bcf status, 5 ;RP0=0, select bank0 for 
                                 TXREG (on Bank0) ;#
  3293                           	line	626
  3294                           # 626 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3295  0DA6  0099                       movwf TXREG ;UART Transmit Reg, send by
                                 te ;#
  3296                           	line	628
  3297                           # 628 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3298  0DA7  0873                       movf _cStatusR, w ;restore original Sta
                                 tus before exiting ;#
  3299                           	line	629
  3300                           # 629 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3301  0DA8  0083                       movwf status ;possible need to preserve
                                  Bank & 0x07 bits for 0x00 code ;#
  3302                           	psect	text215
  3303                           	line	631
  3304                           ;PICinit.c: 631: INTE=1;
  3305  0DA9  160B               	bsf	(92/8),(92)&7
  3306                           	line	632
  3307                           ;PICinit.c: 632: return;
  3308  0DAA  2DAB               	goto	l23
  3309                           	line	633
  3310                           ;PICinit.c: 633: }
  3311  0DAB                     l23:	
  3312  0DAB  0008               	return
  3313                           ; =============== function _putdata ends ======
                                 =========
  3314                           
  3315                           GLOBAL __end_of_putdata
  3316  0DAC                     	__end_of_putdata:
  3317                           	FNSIZE	_putdata,0,2
  3318                           	signat	_putdata,4216
  3319                           	global	_read_adc
  3320                           	global	??_read_adc
  3321                           	global	?_read_adc
  3322                           
  3323                           ; *************** function _read_adc **********
                                 *****
  3324                           ; Defined at:
  3325                           ;		line 669 in file "C:\Program Files (x86)\HI-
                                 TECH Software\PICC\PRO\9.65\include\PICinit.c"
  3326                           ; Parameters:
  3327                           ;		channel     	reg:   wr	type: unsigned char 
  3328                           ; Auto variables:
  3329                           ;		channel     	       	type: unsigned char 
  3330                           ;		i           	       	type: unsigned char 
  3331                           ;		iADout      	       	type: unsigned int 
  3332                           ;		iVoltsSum   	       	type: unsigned int 
  3333                           ; Return value:
  3334                           ;		type: unsigned int 
  3335                           ;		size: 2
  3336                           ; Registers used:
  3337                           ;		wreg, status,2, status,0
  3338                           ; Tracked objects:
  3339                           ;		On entry : 0/0
  3340                           ;		On exit  : 0/0
  3341                           ;		Unchanged: 0/0
  3342                           ; Data sizes:
  3343                           ;		Autos:    6
  3344                           ;		Params:   2
  3345                           ;		Temp:     4
  3346                           ;		Total:   12
  3347                           ; This function calls:
  3348                           ;		Nothing
  3349                           ; This function is called by:
  3350                           ;		_configurePIC
  3351                           ;		_main
  3352                           ;		_target
  3353                           ;		_navigation
  3354                           ;		_isr
  3355                           ; This function uses a non-reentrant model
  3356                           ; 
  3357                           	psect	text216,local,class=CODE,delta=2
  3358                           	file	"C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3359                           	line	669
  3360                           ;PICinit.c: 660: unsigned int read_adc (char ch
                                 annel)
  3361                           ;PICinit.c: 669: {
  3362                           	
  3363  0731                     _read_adc:	
  3364                           	opt stack 2
  3365                           ; Regs used in _read_adc: [wreg+status,2+status
                                 ,0]
  3366                           ;_read_adc_channel stored from wreg
  3367  0731  1283               	bcf	status, 5	;RP0=0, select bank0
  3368  0732  1303               	bcf	status, 6	;RP1=0, select bank0
  3369                           	
  3370  0733  00A5               	movwf	(_read_adc_channel)
  3371                           	line	670
  3372                           ;PICinit.c: 670: unsigned int iVoltsSum=0, iADo
                                 ut=0;
  3373  0734  3000               	movlw	low(0)
  3374                           	
  3375  0735  00A9               	movwf	(_read_adc_iVoltsSum)
  3376  0736  3000               	movlw	high(0)
  3377  0737  00AA               	movwf	((_read_adc_iVoltsSum))+1
  3378  0738  3000               	movlw	low(0)
  3379                           	
  3380  0739  00A7               	movwf	(_read_adc_iADout)
  3381  073A  3000               	movlw	high(0)
  3382  073B  00A8               	movwf	((_read_adc_iADout))+1
  3383                           	line	671
  3384                           ;PICinit.c: 671: char i=0;
  3385  073C  1003               	clrc
  3386                           	
  3387  073D  3000               	movlw	0
  3388  073E  1803               	btfsc	status,0
  3389  073F  3001               	movlw	1
  3390  0740  00A6               	movwf	(_read_adc_i)
  3391                           	line	673
  3392                           ;PICinit.c: 673: if (channel>5)
  3393  0741  3006               	movlw	(06h)
  3394                           	
  3395  0742  0225               	subwf	(_read_adc_channel),w
  3396  0743  1C03               	skipc
  3397  0744  2F46               	goto	u2641
  3398  0745  2F47               	goto	u2640
  3399  0746                     u2641:
  3400  0746  2F4D               	goto	l29
  3401  0747                     u2640:
  3402                           	line	675
  3403                           ;PICinit.c: 674: {
  3404                           ;PICinit.c: 675: cInputErr |= 0b00001000;
  3405                           	
  3406  0747  15F9               	bsf	(121)+(3/8),(3)&7
  3407                           	line	676
  3408  0748  30FF               	movlw	low(0FFFFh)
  3409                           	
  3410  0749  00A3               	movwf	(?_read_adc)
  3411  074A  30FF               	movlw	high(0FFFFh)
  3412  074B  00A4               	movwf	((?_read_adc))+1
  3413  074C  2FAD               	goto	l28
  3414                           	line	678
  3415                           	
  3416  074D                     l29:	
  3417                           	line	680
  3418                           ;PICinit.c: 678: else
  3419                           ;PICinit.c: 679: {
  3420                           ;PICinit.c: 680: if (channel == 5)
  3421                           	
  3422  074D  0825               	movf	(_read_adc_channel),w
  3423  074E  3A05               	xorlw	05h
  3424  074F  1D03               	skipz
  3425  0750  2F52               	goto	u2651
  3426  0751  2F53               	goto	u2650
  3427  0752                     u2651:
  3428  0752  2F55               	goto	l30
  3429  0753                     u2650:
  3430                           	line	681
  3431                           ;PICinit.c: 681: {channel = 4;}
  3432  0753  3004               	movlw	(04h)
  3433                           	
  3434  0754  00A5               	movwf	(_read_adc_channel)
  3435                           	
  3436  0755                     l31:	
  3437                           	line	682
  3438                           	
  3439  0755                     l30:	
  3440                           	line	683
  3441                           ;PICinit.c: 682: }
  3442                           ;PICinit.c: 683: INTE=0;
  3443  0755  120B               	bcf	(92/8),(92)&7
  3444                           	line	685
  3445                           ;PICinit.c: 685: g_cTmp1 = channel;
  3446                           	
  3447  0756  0825               	movf	(_read_adc_channel),w
  3448  0757  00AB               	movwf	(??_read_adc+6+0)
  3449                           	
  3450  0758  082B               	movf	(??_read_adc+6+0),w
  3451  0759  00F0               	movwf	(112)
  3452                           	line	688
  3453                           # 688 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3454  075A  0803                  movf status, w ;save Status to restore befor
                                 e exiting ;#
  3455                           	line	689
  3456                           # 689 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3457  075B  00F3                  movwf _cStatusR ;possible need to preserve B
                                 ank & 0x07 bits for 0x00 code ;#
  3458                           	line	690
  3459                           # 690 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3460  075C  1683                  bsf status, 5 ;RP0=1, select bank1 for direc
                                 t addressing ;#
  3461                           	line	691
  3462                           # 691 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3463  075D  1303                  bcf status, 6 ;RP1=0, select bank1 ;#
  3464                           	line	692
  3465                           # 692 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3466  075E  30C2                  movlw 0xC2 ;configure A/D port ;#
  3467                           	line	693
  3468                           # 693 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3469  075F  009F                  movwf 0x1F ;1Fh is 7 bit address of ADCON1 o
                                 n Bank1 ;#
  3470                           	line	694
  3471                           # 694 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3472  0760  1003                  clrc ;#
  3473                           	line	695
  3474                           # 695 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3475  0761  0DF0                  rlf _g_cTmp1, f ;variable g_cTmp1 (location 
                                 70h) can be accessed regardless ;#
  3476                           	line	696
  3477                           # 696 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3478  0762  0DF0                  rlf _g_cTmp1, f ;of bank selected. Rotate ch
                                 annel (0-4) to be in position ;#
  3479                           	line	697
  3480                           # 697 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3481  0763  0DF0                  rlf _g_cTmp1, f ;required by register ADCON0
                                  ;#
  3482                           	line	698
  3483                           # 698 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3484  0764  3041                  movlw 0x41 ;#
  3485                           	line	699
  3486                           # 699 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3487  0765  0470                  iorwf _g_cTmp1, w ;#
  3488                           	line	700
  3489                           # 700 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3490  0766  1283                  bcf status, 5 ;RP0=0, select Bank0 for direc
                                 t addressing ;#
  3491                           	line	701
  3492                           # 701 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3493  0767  009F                  movwf _ADCON0 ;ADCON0 is on Bank0 ;#
  3494                           	line	702
  3495                           # 702 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3496  0768  30FF                  movlw 0xff ;implements 2 millisecond delay ;
                                 #
  3497                           	line	703
  3498                           # 703 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3499  0769  3EFF                  addlw 0xff ;to allow for acquisition time ;#
  3500                           	line	704
  3501                           # 704 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3502  076A  0000                  nop ;0xff (255)* 8us = 2.04ms ;#
  3503                           	line	705
  3504                           # 705 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3505  076B  0000                  nop ;#
  3506                           	line	706
  3507                           # 706 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3508  076C  0000                  nop ;#
  3509                           	line	707
  3510                           # 707 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3511  076D  0000                  nop ;#
  3512                           	line	708
  3513                           # 708 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3514  076E  1D03                  btfss status, 0x02 ;#
  3515                           	line	709
  3516                           # 709 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3517  076F  2F69                  goto $-6 ;#
  3518                           	line	710
  3519                           # 710 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3520  0770  151F                  bsf _ADCON0, 2 ;start A/D convesion (We are 
                                 on Bank 0) ;#
  3521                           	line	711
  3522                           # 711 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3523  0771  191F                  btfsc _ADCON0, 2 ;#
  3524                           	line	712
  3525                           # 712 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3526  0772  2F71                  goto $-1 ;wait for conversion to complete ;#
  3527                           	line	713
  3528                           # 713 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3529  0773  0873                  movf _cStatusR, w ;restore original Status b
                                 efore exiting ;#
  3530                           	line	714
  3531                           # 714 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3532  0774  0083                  movwf status ;possible need to preserve Bank
                                  & 0x07 bits for 0x00 code ;#
  3533                           	psect	text216
  3534                           	line	717
  3535                           ;PICinit.c: 717: iADout=(ADRESH<<8)+ADRESL;
  3536  0775  1683               	bsf	status, 5	;RP0=1, select bank1
  3537  0776  1303               	bcf	status, 6	;RP1=0, select bank1
  3538                           	
  3539  0777  1283               	bcf	status, 5	;RP0=0, select bank0
  3540  0778  1303               	bcf	status, 6	;RP1=0, select bank0
  3541                           	
  3542  0779  081E               	movf	(30),w	;volatile
  3543  077A  00AB               	movwf	(??_read_adc+6+0)
  3544  077B  01AC               	clrf	(??_read_adc+6+0+1)
  3545  077C  3008               	movlw	08h
  3546  077D  00AD               	movwf	(??_read_adc+8+0)
  3547  077E                     u2665:
  3548  077E  1003               	clrc
  3549  077F  0DAB               	rlf	(??_read_adc+6+0),f
  3550  0780  0DAC               	rlf	(??_read_adc+6+1),f
  3551  0781  0BAD               	decfsz	(??_read_adc+8+0),f
  3552  0782  2F7E               	goto	u2665
  3553  0783  1683               	bsf	status, 5	;RP0=1, select bank1
  3554  0784  1303               	bcf	status, 6	;RP1=0, select bank1
  3555  0785  081E               	movf	(158)^080h,w	;volatile
  3556  0786  1283               	bcf	status, 5	;RP0=0, select bank0
  3557  0787  1303               	bcf	status, 6	;RP1=0, select bank0
  3558  0788  072B               	addwf	0+(??_read_adc+6+0),w
  3559                           	
  3560  0789  00A7               	movwf	(_read_adc_iADout)
  3561  078A  3000               	movlw	0
  3562  078B  1803               	skipnc
  3563  078C  3001               	movlw	1
  3564  078D  072C               	addwf	1+(??_read_adc+6+0),w
  3565  078E  00A8               	movwf	1+(_read_adc_iADout)
  3566                           	line	719
  3567                           ;PICinit.c: 719: for (i=1; i <=49; i++)
  3568                           	
  3569  078F  01A6               	clrf	(_read_adc_i)
  3570  0790  1403               	bsf	status,0
  3571  0791  0DA6               	rlf	(_read_adc_i),f
  3572  0792  2F93               	goto	l32
  3573                           	line	720
  3574                           	
  3575  0793                     l32:	
  3576                           ;PICinit.c: 720: {iVoltsSum=iVoltsSum + iADout;
                                 }
  3577                           	
  3578                           	
  3579  0793  0827               	movf	(_read_adc_iADout),w
  3580  0794  0729               	addwf	(_read_adc_iVoltsSum),w
  3581                           	
  3582  0795  00A9               	movwf	(_read_adc_iVoltsSum)
  3583  0796  0828               	movf	(_read_adc_iADout+1),w
  3584  0797  1803               	skipnc
  3585  0798  0A28               	incf	(_read_adc_iADout+1),w
  3586  0799  072A               	addwf	(_read_adc_iVoltsSum+1),w
  3587  079A  00AA               	movwf	1+(_read_adc_iVoltsSum)
  3588                           	line	719
  3589  079B  3001               	movlw	(01h)
  3590  079C  00AB               	movwf	(??_read_adc+6+0)
  3591                           	
  3592  079D  082B               	movf	(??_read_adc+6+0),w
  3593  079E  07A6               	addwf	(_read_adc_i),f
  3594  079F  3032               	movlw	(032h)
  3595                           	
  3596  07A0  0226               	subwf	(_read_adc_i),w
  3597  07A1  1C03               	skipc
  3598  07A2  2FA4               	goto	u2681
  3599  07A3  2FA5               	goto	u2680
  3600  07A4                     u2681:
  3601  07A4  2F93               	goto	l32
  3602  07A5                     u2680:
  3603                           	
  3604  07A5                     l33:	
  3605                           	line	721
  3606                           ;PICinit.c: 721: INTE=1;
  3607  07A5  160B               	bsf	(92/8),(92)&7
  3608                           	line	722
  3609                           	
  3610                           	
  3611  07A6  082A               	movf	(_read_adc_iVoltsSum+1),w
  3612  07A7  01A4               	clrf	(?_read_adc+1)
  3613  07A8  07A4               	addwf	(?_read_adc+1)
  3614  07A9  0829               	movf	(_read_adc_iVoltsSum),w
  3615  07AA  01A3               	clrf	(?_read_adc)
  3616  07AB  07A3               	addwf	(?_read_adc)
  3617                           
  3618  07AC  2FAD               	goto	l28
  3619                           	line	724
  3620                           ;PICinit.c: 724: }
  3621  07AD                     l28:	
  3622  07AD  0008               	return
  3623                           ; =============== function _read_adc ends =====
                                 ==========
  3624                           
  3625                           GLOBAL __end_of_read_adc
  3626  07AE                     	__end_of_read_adc:
  3627                           	FNSIZE	_read_adc,10,2
  3628                           	signat	_read_adc,4218
  3629                           	global	_read_input
  3630                           	global	??_read_input
  3631                           	global	?_read_input
  3632                           
  3633                           ; *************** function _read_input ********
                                 *******
  3634                           ; Defined at:
  3635                           ;		line 391 in file "C:\Program Files (x86)\HI-
                                 TECH Software\PICC\PRO\9.65\include\PICinit.c"
  3636                           ; Parameters:
  3637                           ;		Port        	reg:   wr	type: unsigned char 
  3638                           ;		Bit         	offs:   0	type: unsigned char 
  3639                           ; Auto variables:
  3640                           ;		Port        	       	type: unsigned char 
  3641                           ; Return value:
  3642                           ;		type: unsigned char 
  3643                           ;		size: 1
  3644                           ; Registers used:
  3645                           ;		wreg, status,2, status,0
  3646                           ; Tracked objects:
  3647                           ;		On entry : 300/0
  3648                           ;		On exit  : 0/0
  3649                           ;		Unchanged: 0/0
  3650                           ; Data sizes:
  3651                           ;		Autos:    1
  3652                           ;		Params:   1
  3653                           ;		Temp:     1
  3654                           ;		Total:    3
  3655                           ; This function calls:
  3656                           ;		Nothing
  3657                           ; This function is called by:
  3658                           ;		_configurePIC
  3659                           ;		_isr
  3660                           ; This function uses a non-reentrant model
  3661                           ; 
  3662                           	psect	text217,local,class=CODE,delta=2
  3663                           	file	"C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3664                           	line	391
  3665                           ;PICinit.c: 380: char read_input(char Port, cha
                                 r Bit)
  3666                           ;PICinit.c: 391: {
  3667                           	
  3668  0CF2                     _read_input:	
  3669                           	opt stack 2
  3670                           ; Regs used in _read_input: [wreg+status,2+stat
                                 us,0]
  3671                           ;_read_input_Port stored from wreg
  3672                           	
  3673  0CF2  00B4               	movwf	(_read_input_Port)
  3674                           	line	392
  3675                           ;PICinit.c: 392: INTE=0;
  3676  0CF3  120B               	bcf	(92/8),(92)&7
  3677                           	line	396
  3678                           ;PICinit.c: 396: cPortTmp = Port;
  3679                           	
  3680  0CF4  0834               	movf	(_read_input_Port),w
  3681  0CF5  00B5               	movwf	(??_read_input+1+0)
  3682                           	
  3683  0CF6  0835               	movf	(??_read_input+1+0),w
  3684  0CF7  00F0               	movwf	(112)
  3685                           	line	397
  3686                           ;PICinit.c: 397: cBitTmp = Bit;
  3687                           	
  3688  0CF8  0833               	movf	(_read_input_Bit),w
  3689  0CF9  00B5               	movwf	(??_read_input+1+0)
  3690                           	
  3691  0CFA  0835               	movf	(??_read_input+1+0),w
  3692  0CFB  00F1               	movwf	(113)
  3693                           	line	398
  3694                           ;PICinit.c: 398: cBitPat = 0b00000001;
  3695                           	
  3696  0CFC  01F2               	clrf	(114)
  3697  0CFD  1403               	bsf	status,0
  3698  0CFE  0DF2               	rlf	(114),f
  3699                           	line	399
  3700                           ;PICinit.c: 399: INTE=1;
  3701  0CFF  160B               	bsf	(92/8),(92)&7
  3702                           	line	406
  3703                           # 406 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3704  0D00  0870                 movf _cPortTmp,w ;move Port value to W, ASCII
                                  letter value ;#
  3705                           	line	407
  3706                           # 407 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3707                                    ;'A'=0x41, 'a'=0x61, ..., 'E'=0x45, 'e
                                 '=0x65 ;#
  3708                           	line	408
  3709                           # 408 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3710                                    ; 7654 3210 7654 3210 ;#
  3711                           	line	409
  3712                           # 409 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3713                                       ; 'A'=0100 0001 'E'=0100 0101 ;#
  3714                           	line	410
  3715                           # 410 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3716                                    ; 'a'=0110 0001 'e'=0110 0101 ;#
  3717                           	line	411
  3718                           # 411 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3719  0D01  39D8                 andlw 11011000B ; 1101 1000 1s = positions we
                                  want to check ;#
  3720                           	line	412
  3721                           # 412 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3722  0D02  3A40                 xorlw 01000000B ; 01 0 0 insure ANDed bits = 
                                 these values ;#
  3723                           	line	413
  3724                           # 413 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3725                                    ;if bits are expected values, W=0--> 0
                                 x02 flag=0 (Good!) ;#
  3726                           	line	414
  3727                           # 414 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3728  0D03  1D03                 btfss status, 0x02 ;skip if Zero flag clear, 
                                 Error ;#
  3729                           	line	415
  3730                           # 415 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3731  0D04  2D0E                 goto $+10 ;Error so exit >>> ;#
  3732                           	line	416
  3733                           # 416 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3734  0D05  0870                 movf _cPortTmp,w ;Get original port ;#
  3735                           	line	417
  3736                           # 417 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3737  0D06  3907                 andlw 00000111B ;#
  3738                           	line	418
  3739                           # 418 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3740  0D07  1903                 btfsc status, 0x02 ;Check for invalid ascii p
                                 ort 0, -->0x02 flag=0 (Bad!) ;#
  3741                           	line	419
  3742                           # 419 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3743  0D08  2D0E                 goto $+6 ;Error so exit >>> ;#
  3744                           	line	420
  3745                           # 420 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3746  0D09  00F0                 movwf _cPortTmp ;_cPortTmp can now only be in
                                  range of 1-7 ;#
  3747                           	line	421
  3748                           # 421 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3749  0D0A  3006                 movlw 06h ;check to elimate ports 6 & 7, i.e.
                                  must be 1-5 ;#
  3750                           	line	422
  3751                           # 422 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3752  0D0B  0270                 subwf _cPortTmp,w ;#
  3753                           	line	423
  3754                           # 423 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3755  0D0C  1C03                 btfss status, 0x00 ;Carry clear means a borro
                                 w occurred, so Port <6 (Good!) ;#
  3756                           	line	424
  3757                           # 424 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3758  0D0D  2D10                 goto $+3 ;Carry set means Error ;#
  3759                           	line	425
  3760                           # 425 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3761  0D0E  1579                 bsf _cInputErr, 2 ;set error bit, bit 2 for r
                                 ead_input() ;#
  3762                           	line	426
  3763                           # 426 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3764  0D0F  34FF                 retlw 0xFF ;Error so exit >>> ;#
  3765                           	line	428
  3766                           # 428 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3767                               ;******** If we get here, _cPortTmp holds v
                                 alid port# in the range of 1-5 (A-E or a-e) ;#
  3768                           	line	429
  3769                           # 429 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3770                             ;******** Now check if Bit range is 0-7 ;#
  3771                           	line	430
  3772                           # 430 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3773  0D10  0871                 movf _cBitTmp,w ;First check Bit is in the Ra
                                 nge 0-7 ;#
  3774                           	line	431
  3775                           # 431 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3776  0D11  1903                 btfsc status, 0x02 ;If 0x02 bit set, Bit =0 a
                                 nd CBitPat already initialized to 00000001B ;#
  3777                           	line	432
  3778                           # 432 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3779  0D12  2D1C                 goto $+10 ;Done (Good!) ;#
  3780                           	line	433
  3781                           # 433 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3782  0D13  39F8                 andlw 11111000B ;Now check that Bit is in the
                                  range of 1-7 (already checked for 0) ;#
  3783                           	line	434
  3784                           # 434 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3785  0D14  1D03                 btfss status, 0x02 ;Zero flag set means Bit i
                                 s in range 1-7 (Good!) ;#
  3786                           	line	435
  3787                           # 435 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3788  0D15  2D0E                 goto $-7 ;Error so exit >>> ;#
  3789                           	line	436
  3790                           # 436 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3791  0D16  0871                 movf _cBitTmp,w ;Now generate binary bit patt
                                 ern associated with numeric Bit (1-7) ;#
  3792                           	line	437
  3793                           # 437 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3794  0D17  1003                 clrc ;#
  3795                           	line	438
  3796                           # 438 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3797  0D18  0DF2                 rlf _cBitPat,f ;Rotate bit pattern in cBitPat
                                  one to the left ;#
  3798                           	line	439
  3799                           # 439 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3800  0D19  3EFF                 addlw 0xFF ;Decrement Bit being held in w ;#
  3801                           	line	440
  3802                           # 440 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3803  0D1A  1D03                 btfss status, 0x02 ;If 0x02 bit set-done, cBi
                                 tPatx has been rotated to the correct pattern ;
                                 #
  3804                           	line	441
  3805                           # 441 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3806  0D1B  2D17                 goto $-4 ;ie 00000010, 00000100, 00001000, ..
                                 . ;#
  3807                           	line	443
  3808                           # 443 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3809                               ;******** Now check if requested bit is all
                                 owed for Port using bit masks ;#
  3810                           	line	444
  3811                           # 444 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3812  0D1C  0870                 movf _cPortTmp,w ;move Port value (1-5) to W 
                                 ;#
  3813                           	line	445
  3814                           # 445 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3815  0D1D  00F1                 movwf _cBitTmp ;A=001, B=010, 0x00=011, D=100
                                 , E=101 ;#
  3816                           	line	446
  3817                           # 446 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3818  0D1E  0872                   movf _cBitPat, w ;W=00000001, 00000010, 000
                                 00100, ...requested bit ;#
  3819                           	line	447
  3820                           # 447 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3821                                                         ;W will be And'd 
                                 with only one mask below ;#
  3822                           	line	448
  3823                           # 448 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3824  0D1F  0BF1                 decfsz _cBitTmp, f ;_cPortTmp = 0 if 'A' or '
                                 a' ;#
  3825                           	line	449
  3826                           # 449 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3827  0D20  2D22                 goto $+2 ;#
  3828                           	line	450
  3829                           # 450 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3830  0D21  3900                 andlw MASK_IN_PORTA ;mask for PortA ;#
  3831                           	line	451
  3832                           # 451 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3833  0D22  0BF1                  decfsz _cBitTmp, f ;_cPortTmp = 0 if 'B' or 
                                 'b' ;#
  3834                           	line	452
  3835                           # 452 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3836  0D23  2D25                   goto $+2 ;#
  3837                           	line	453
  3838                           # 453 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3839  0D24  39FF                  andlw MASK_IN_PORTB ;mask for PortB ;#
  3840                           	line	454
  3841                           # 454 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3842  0D25  0BF1                  decfsz _cBitTmp, f ;_cPortTmp = 0 if 'C' or 
                                 'c' ;#
  3843                           	line	455
  3844                           # 455 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3845  0D26  2D28                   goto $+2 ;#
  3846                           	line	456
  3847                           # 456 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3848  0D27  3900                   andlw MASK_IN_PORTC ;mask for PortC ;#
  3849                           	line	457
  3850                           # 457 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3851  0D28  0BF1                    decfsz _cBitTmp, f ;_cPortTmp = 0 if 'D' o
                                 r 'd' ;#
  3852                           	line	458
  3853                           # 458 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3854  0D29  2D2B                   goto $+2 ;#
  3855                           	line	459
  3856                           # 459 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3857  0D2A  39FF                    andlw MASK_IN_PORTD ;mask for PortD ;#
  3858                           	line	460
  3859                           # 460 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3860  0D2B  0BF1                    decfsz _cBitTmp, f ;_cPortTmp = 0 if 'E' o
                                 r 'e' ;#
  3861                           	line	461
  3862                           # 461 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3863  0D2C  2D2E                  goto $+2 ;#
  3864                           	line	462
  3865                           # 462 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3866  0D2D  3903                    andlw MASK_IN_PORTE ;mask for PortE ;#
  3867                           	line	463
  3868                           # 463 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3869  0D2E  39FF                 andlw 11111111B ;if W = 0, there was a bit mi
                                 smatch ;#
  3870                           	line	464
  3871                           # 464 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3872  0D2F  1D03                 btfss status, 0x02 ;if Zero flag clear, means
                                  check passed ;#
  3873                           	line	465
  3874                           # 465 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3875  0D30  2D33                 goto $+3 ;#
  3876                           	line	466
  3877                           # 466 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3878  0D31  1579                 bsf _cInputErr, 2 ;set error bit, bit 2 for r
                                 ead_input() ;#
  3879                           	line	467
  3880                           # 467 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3881  0D32  34FF                 retlw 0xFF ;Error so exit >>> ;#
  3882                           	line	469
  3883                           # 469 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3884                               ;******* If we get here, cPortTmp and cBitP
                                 at are valid, ie, Port/Bit combo are valid ;#
  3885                           	line	470
  3886                           # 470 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3887                             ;******* Now update associated TRIS register 
                                 and read PORT ;#
  3888                           	line	471
  3889                           # 471 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3890  0D33  120B                 bcf INTCON, 4 ;Disable RB0 interrupt to allow
                                  hardware to finish ;#
  3891                           	line	472
  3892                           # 472 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3893                                    ;reconfiguring and get data without in
                                 terruption ;#
  3894                           	line	473
  3895                           # 473 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3896  0D34  0803                 movf status, w ;save Status Register for rest
                                 ore before exiting ;#
  3897                           	line	474
  3898                           # 474 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3899  0D35  00F3                 movwf _cStatusR ;possible need to preserve Ba
                                 nk & 0x07 bits for 0x00 code ;#
  3900                           	line	475
  3901                           # 475 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3902  0D36  0870                 movf _cPortTmp,w ;Now holds valid port number
                                  1-5 for ports A-E ;#
  3903                           	line	476
  3904                           # 476 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3905  0D37  3E04                 addlw 04h ;Add 4 to _cPortTmp to calculate PO
                                 RT SFR address ;#
  3906                           	line	477
  3907                           # 477 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3908                                    ;PORTA=05h, PORTB=06h, PORTC=07h, etc 
                                 ;#
  3909                           	line	478
  3910                           # 478 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3911  0D38  0084                 movwf fsr ;FSR = 05h to 09h, points to PORTx 
                                 ;#
  3912                           	line	479
  3913                           # 479 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3914  0D39  1383                 bcf status, 0x07 ;Clear 0x07 for indirect add
                                 ressing to data bank 0,1 ;#
  3915                           	line	480
  3916                           # 480 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3917                                    ;set PORTx pin to an input via TRIS re
                                 gister, Bit must be set ;#
  3918                           	line	481
  3919                           # 481 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3920  0D3A  1784                 bsf fsr, 7 ;add 0x80 to FSR so it now points 
                                 to TRISx, ie set bit 7 ;#
  3921                           	line	482
  3922                           # 482 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3923                                    ;fsr = 85h, 86h, 87h, 88h, 89h, points
                                  to TRISx ;#
  3924                           	line	483
  3925                           # 483 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3926  0D3B  0800                 movf indf, w ;Read TRISx and move value to W 
                                 ;#
  3927                           	line	484
  3928                           # 484 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3929  0D3C  0472                 iorwf _cBitPat,w ;Or with bit pattern, ie 000
                                 00001, 00000010, ... ;#
  3930                           	line	485
  3931                           # 485 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3932                                    ;to set bit to 1 (input), other bits w
                                 on't change ;#
  3933                           	line	486
  3934                           # 486 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3935  0D3D  0080                 movwf indf ;write W to TRISx ;#
  3936                           	line	487
  3937                           # 487 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3938  0D3E  3032                 movlw 50 ;Implement 200 us delay for input ca
                                 pacitance ;#
  3939                           	line	488
  3940                           # 488 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3941  0D3F  3EFF                 addlw 0xFF ;decrement W, FFh is 2's complemen
                                 t of -1 ;#
  3942                           	line	489
  3943                           # 489 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3944  0D40  1D03                 btfss status, 0x02 ;Bit Test 0x02 Flag Skip i
                                 f Zero flag Set ;#
  3945                           	line	490
  3946                           # 490 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3947  0D41  2D3F                 goto $-2 ;jump to continue loop count down ;#
  3948                           	line	491
  3949                           # 491 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3950                                    ;read PORTx pin state ;#
  3951                           	line	492
  3952                           # 492 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3953  0D42  1384                 bcf fsr, 7 ;clearing bit 7 performs fsr = fsr
                                  - 0x80 ;#
  3954                           	line	493
  3955                           # 493 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3956                                    ;fsr now points to PORTx = 05h, 06h, 0
                                 7h, 08h, 09h ;#
  3957                           	line	494
  3958                           # 494 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3959  0D43  01F1                 clrf _cBitTmp ;#
  3960                           	line	495
  3961                           # 495 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3962  0D44  0800                 movf indf, w ;read PORTx and store value to W
                                  ;#
  3963                           	line	496
  3964                           # 496 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3965  0D45  05F2                 andwf _cBitPat ;AND with bit of interest, bit
                                  pattern, ie 00000001, 00000010, ... ;#
  3966                           	line	497
  3967                           # 497 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3968                                    ;if pin is logic 0 (0V), W will be 000
                                 00000 ;#
  3969                           	line	498
  3970                           # 498 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3971  0D46  1D03                 btfss status, 0x02 ;skip is Zero flag clear, 
                                 pin was 0 ;#
  3972                           	line	499
  3973                           # 499 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3974  0D47  1471                 bsf _cBitTmp,0 ;set bit 0, _cBitTmp=1 ;#
  3975                           	line	500
  3976                           # 500 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3977  0D48  0873                 movf _cStatusR,w ;restore original Status Reg
                                 ister before exiting ;#
  3978                           	line	501
  3979                           # 501 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  3980  0D49  0083                 movwf status ;possible need to preserve Bank 
                                 & 0x07 bits for 0x00 code ;#
  3981                           	psect	text217
  3982                           	line	503
  3983                           ;PICinit.c: 503: INTE=1;
  3984  0D4A  160B               	bsf	(92/8),(92)&7
  3985                           	line	504
  3986                           ;PICinit.c: 504: return(cBitTmp);
  3987                           	
  3988  0D4B  0871               	movf	(113),w
  3989  0D4C  2D4D               	goto	l22
  3990                           	line	505
  3991                           ;PICinit.c: 505: }
  3992  0D4D                     l22:	
  3993  0D4D  0008               	return
  3994                           ; =============== function _read_input ends ===
                                 ============
  3995                           
  3996                           GLOBAL __end_of_read_input
  3997  0D4E                     	__end_of_read_input:
  3998                           	FNSIZE	_read_input,2,1
  3999                           	signat	_read_input,8313
  4000                           	global	_pause
  4001                           	global	??_pause
  4002                           	global	?_pause
  4003                           
  4004                           ; *************** function _pause *************
                                 **
  4005                           ; Defined at:
  4006                           ;		line 736 in file "C:\Program Files (x86)\HI-
                                 TECH Software\PICC\PRO\9.65\include\PICinit.c"
  4007                           ; Parameters:
  4008                           ;		time        	offs:   0	type: unsigned int 
  4009                           ; Auto variables:
  4010                           ;		cTimeTmp    	       	type: unsigned char 
  4011                           ; Return value:
  4012                           ;		type: void 
  4013                           ;		size: 0
  4014                           ; Registers used:
  4015                           ;		wreg, status,2, status,0
  4016                           ; Tracked objects:
  4017                           ;		On entry : 300/0
  4018                           ;		On exit  : 0/0
  4019                           ;		Unchanged: 0/0
  4020                           ; Data sizes:
  4021                           ;		Autos:    1
  4022                           ;		Params:   2
  4023                           ;		Temp:     0
  4024                           ;		Total:    3
  4025                           ; This function calls:
  4026                           ;		Nothing
  4027                           ; This function is called by:
  4028                           ;		_configurePIC
  4029                           ;		_main
  4030                           ;		_target
  4031                           ;		_navigation
  4032                           ;		_isr
  4033                           ; This function uses a non-reentrant model
  4034                           ; 
  4035                           	psect	text218,local,class=CODE,delta=2
  4036                           	file	"C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4037                           	line	736
  4038                           ;PICinit.c: 728: void pause (unsigned int time)
  4039                           ;PICinit.c: 736: {
  4040                           	
  4041  0C08                     _pause:	
  4042                           	opt stack 2
  4043                           ; Regs used in _pause: [wreg+status,2+status,0]
  4044                           	line	739
  4045                           ;PICinit.c: 737: char cTimeTmp;
  4046                           ;PICinit.c: 739: while (time != 0)
  4047  0C08  2C40               	goto	l36
  4048                           	
  4049  0C09                     l37:	
  4050                           	line	741
  4051                           ;PICinit.c: 740: {
  4052                           ;PICinit.c: 741: if (time <= 255){
  4053                           	
  4054  0C09  3001               	movlw	high(0100h)
  4055  0C0A  0224               	subwf	(_pause_time+1),w
  4056  0C0B  3000               	movlw	low(0100h)
  4057  0C0C  1903               	skipnz
  4058  0C0D  0223               	subwf	(_pause_time),w
  4059  0C0E  1803               	skipnc
  4060  0C0F  2C11               	goto	u2311
  4061  0C10  2C12               	goto	u2310
  4062  0C11                     u2311:
  4063  0C11  2C15               	goto	l39
  4064  0C12                     u2310:
  4065                           	line	742
  4066                           ;PICinit.c: 742: cTimeTmp = time;}
  4067                           	
  4068  0C12  0823               	movf	(_pause_time),w
  4069                           	
  4070  0C13  00A5               	movwf	(_pause_cTimeTmp)
  4071  0C14  2C17               	goto	l40
  4072                           	line	743
  4073                           	
  4074  0C15                     l39:	
  4075                           	line	744
  4076                           ;PICinit.c: 743: else{
  4077                           ;PICinit.c: 744: cTimeTmp = 0xFF;}
  4078                           	
  4079  0C15  01A5               	clrf	(_pause_cTimeTmp)
  4080  0C16  03A5               	decf	(_pause_cTimeTmp),f
  4081                           	
  4082  0C17                     l40:	
  4083                           	line	745
  4084                           ;PICinit.c: 745: time = time - cTimeTmp;
  4085                           	
  4086  0C17  0825               	movf	(_pause_cTimeTmp),w
  4087                           	
  4088  0C18  0223               	subwf	(_pause_time),w
  4089                           	
  4090  0C19  00A3               	movwf	(_pause_time)
  4091  0C1A  0824               	movf	(_pause_time+1),w
  4092  0C1B  1C03               	skipc
  4093  0C1C  0324               	decf	(_pause_time+1),w
  4094  0C1D  00A4               	movwf	(_pause_time)+1
  4095                           	line	747
  4096                           ;PICinit.c: 747: while (cTimeTmp != 0)
  4097  0C1E  2C3B               	goto	l41
  4098                           	
  4099  0C1F                     l42:	
  4100                           	line	750
  4101                           # 750 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4102  0C1F  1C78                   btfss _isr_active, 0 ;Check if pause is ope
                                 rating in the ISR ;#
  4103                           	line	751
  4104                           # 751 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4105  0C20  2C35                   goto $+21 ;If interrupts not enabled, bypas
                                 s TMR0 check ;#
  4106                           	line	752
  4107                           # 752 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4108  0C21  1A8B                   btfsc INTCON, 5 ;check if TMR0 interrupt en
                                 abled, 1=yes ;#
  4109                           	line	753
  4110                           # 753 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4111  0C22  1D0B                   btfss INTCON, 2 ;check if TMR0 interrupt oc
                                 curred, 1=yes ;#
  4112                           	line	754
  4113                           # 754 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4114  0C23  2C35                   goto $+18 ;TMR0 not enabled OR TMR0 interru
                                 pt did not occur, bypass servicing TMR0 ;#
  4115                           	line	755
  4116                           # 755 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4117                               ;**********If here, must be executing in th
                                 e interrupt and TMR0 needs servicing ;#
  4118                           	line	756
  4119                           # 756 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4120  0C24  0803                   movf status, w ;save Status to restore befo
                                 re exiting ;#
  4121                           	line	757
  4122                           # 757 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4123  0C25  00F3                   movwf _cStatusR ;possible need to preserve 
                                 Bank & 0x07 bits for 0x00 code ;#
  4124                           	line	758
  4125                           # 758 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4126  0C26  1283                   bcf status, 5 ;RP0=0, select bank0 for dire
                                 ct addressing ;#
  4127                           	line	759
  4128                           # 759 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4129  0C27  1303                   bcf status, 6 ;RP1=0, bank0 ;#
  4130                           	line	760
  4131                           # 760 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4132  0C28  1C5F                   btfss _rt_toggle, 0 ;Check if rt_clock shou
                                 ld be incremented ;#
  4133                           	line	761
  4134                           # 761 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4135  0C29  2C2F                   goto $+6 ;#
  4136                           	line	762
  4137                           # 762 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4138  0C2A  0FDD                   incfsz _rt_clock ;Increment rt_clock on eve
                                 ry other 50msec interrupt (i.e. 1/10 second) ;#
  4139                           	line	763
  4140                           # 763 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4141  0C2B  2C2D                   goto $+2 ;#
  4142                           	line	764
  4143                           # 764 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4144  0C2C  0ADE                   incf _rt_clock+1 ;increment second byte on 
                                 overflow- 2 byte counter ;#
  4145                           	line	765
  4146                           # 765 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4147  0C2D  01DF                   clrf _rt_toggle ;#
  4148                           	line	766
  4149                           # 766 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4150  0C2E  2C30                   goto $+2 ;#
  4151                           	line	767
  4152                           # 767 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4153  0C2F  145F                   bsf _rt_toggle, 0 ;#
  4154                           	line	768
  4155                           # 768 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4156  0C30  303D                   movlw 0x3D ;Reload TMR0 for 50msec countdow
                                 n, assumes 4Mhz clock ;#
  4157                           	line	769
  4158                           # 769 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4159  0C31  0081                   movwf _TMR0 ;#
  4160                           	line	770
  4161                           # 770 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4162  0C32  110B                   bcf INTCON, 2 ;#
  4163                           	line	771
  4164                           # 771 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4165  0C33  0873                   movf _cStatusR, w ;restore original Status 
                                 before exiting ;#
  4166                           	line	772
  4167                           # 772 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4168  0C34  0083                   movwf status ;possible need to preserve Ban
                                 k & 0x07 bits for 0x00 ;#
  4169                           	line	773
  4170                           # 773 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4171                               ;***********Done with TMR0 servicing, conti
                                 nue with pause ;#
  4172                           	line	774
  4173                           # 774 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4174  0C35  30F8                   movlw 0xf8 ;<-implements 1 msec delay, loop
                                  counter ;#
  4175                           	line	775
  4176                           # 775 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4177  0C36  3EFF                   addlw 0xff ;<-accounts for code overhead ;#
  4178                           	line	776
  4179                           # 776 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4180  0C37  1D03                   btfss status, 0x02 ;<-assumes a 4 Mhz clock
                                  ;#
  4181                           	line	777
  4182                           # 777 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4183  0C38  2C36                   goto $-2 ;<- ;#
  4184                           	psect	text218
  4185                           	line	779
  4186                           ;PICinit.c: 748: {
  4187                           ;PICinit.c: 779: cTimeTmp-- ;
  4188                           	
  4189                           	
  4190  0C39  3001               	movlw	low(01h)
  4191  0C3A  02A5               	subwf	(_pause_cTimeTmp),f
  4192                           	line	780
  4193                           	
  4194  0C3B                     l41:	
  4195                           	line	747
  4196                           	
  4197  0C3B  08A5               	movf	(_pause_cTimeTmp),f
  4198  0C3C  1D03               	skipz
  4199  0C3D  2C3F               	goto	u2321
  4200  0C3E  2C40               	goto	u2320
  4201  0C3F                     u2321:
  4202  0C3F  2C1F               	goto	l42
  4203  0C40                     u2320:
  4204                           	
  4205  0C40                     l43:	
  4206                           	line	781
  4207                           	
  4208  0C40                     l36:	
  4209                           	line	739
  4210                           	
  4211  0C40  0824               	movf	((_pause_time+1)),w
  4212  0C41  0423               	iorwf	((_pause_time)),w
  4213  0C42  1D03               	skipz
  4214  0C43  2C45               	goto	u2331
  4215  0C44  2C46               	goto	u2330
  4216  0C45                     u2331:
  4217  0C45  2C09               	goto	l37
  4218  0C46                     u2330:
  4219                           	
  4220  0C46                     l38:	
  4221                           	line	782
  4222                           ;PICinit.c: 780: }
  4223                           ;PICinit.c: 781: }
  4224                           ;PICinit.c: 782: return;
  4225  0C46  2C47               	goto	l35
  4226                           	line	784
  4227                           ;PICinit.c: 784: }
  4228  0C47                     l35:	
  4229  0C47  0008               	return
  4230                           ; =============== function _pause ends ========
                                 =======
  4231                           
  4232                           GLOBAL __end_of_pause
  4233  0C48                     	__end_of_pause:
  4234                           	FNSIZE	_pause,1,2
  4235                           	signat	_pause,4216
  4236                           	global	_motorspeed
  4237                           	global	??_motorspeed
  4238                           	global	?_motorspeed
  4239                           
  4240                           ; *************** function _motorspeed ********
                                 *******
  4241                           ; Defined at:
  4242                           ;		line 86 in file "C:\Program Files (x86)\HI-T
                                 ECH Software\PICC\PRO\9.65\include\PICinit.c"
  4243                           ; Parameters:
  4244                           ;		motornum    	reg:   wr	type: unsigned char 
  4245                           ;		speed       	offs:   0	type: unsigned char 
  4246                           ; Auto variables:
  4247                           ;		motornum    	       	type: unsigned char 
  4248                           ; Return value:
  4249                           ;		type: void 
  4250                           ;		size: 0
  4251                           ; Registers used:
  4252                           ;		wreg, status,2, status,0
  4253                           ; Tracked objects:
  4254                           ;		On entry : 300/0
  4255                           ;		On exit  : 0/0
  4256                           ;		Unchanged: 0/0
  4257                           ; Data sizes:
  4258                           ;		Autos:    1
  4259                           ;		Params:   1
  4260                           ;		Temp:     1
  4261                           ;		Total:    3
  4262                           ; This function calls:
  4263                           ;		Nothing
  4264                           ; This function is called by:
  4265                           ;		_configurePIC
  4266                           ;		_main
  4267                           ;		_target
  4268                           ;		_navigation
  4269                           ; This function uses a non-reentrant model
  4270                           ; 
  4271                           	psect	text219,local,class=CODE,delta=2
  4272                           	file	"C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4273                           	line	86
  4274                           ;PICinit.c: 75: void motorspeed (char motornum,
                                  char speed)
  4275                           ;PICinit.c: 86: {
  4276                           	
  4277  0DAC                     _motorspeed:	
  4278                           	opt stack 2
  4279                           ; Regs used in _motorspeed: [wreg+status,2+stat
                                 us,0]
  4280                           ;_motorspeed_motornum stored from wreg
  4281                           	
  4282  0DAC  00A4               	movwf	(_motorspeed_motornum)
  4283                           	line	87
  4284                           ;PICinit.c: 87: if ((speed < 30) || (speed > 10
                                 0))
  4285  0DAD  301E               	movlw	(01Eh)
  4286                           	
  4287  0DAE  0223               	subwf	(_motorspeed_speed),w
  4288  0DAF  1C03               	skipc
  4289  0DB0  2DB2               	goto	u2581
  4290  0DB1  2DB3               	goto	u2580
  4291  0DB2                     u2581:
  4292  0DB2  2DB9               	goto	l600000517
  4293  0DB3                     u2580:
  4294  0DB3  3065               	movlw	(065h)
  4295                           	
  4296  0DB4  0223               	subwf	(_motorspeed_speed),w
  4297  0DB5  1C03               	skipc
  4298  0DB6  2DB8               	goto	u2591
  4299  0DB7  2DB9               	goto	u2590
  4300  0DB8                     u2591:
  4301  0DB8  2DBB               	goto	l13
  4302  0DB9                     u2590:
  4303                           	
  4304  0DB9                     l600000517:	
  4305                           	line	88
  4306                           ;PICinit.c: 88: { cInputErr |= 0b00010000 ;
  4307                           	
  4308  0DB9  1679               	bsf	(121)+(4/8),(4)&7
  4309                           	line	89
  4310                           ;PICinit.c: 89: return;
  4311  0DBA  2E0D               	goto	l12
  4312                           	line	90
  4313                           	
  4314  0DBB                     l13:	
  4315                           	line	92
  4316                           ;PICinit.c: 90: }
  4317                           ;PICinit.c: 92: INTE=0;
  4318  0DBB  120B               	bcf	(92/8),(92)&7
  4319                           	line	95
  4320                           ;PICinit.c: 95: PR2=103;
  4321  0DBC  3067               	movlw	(067h)
  4322  0DBD  1683               	bsf	status, 5	;RP0=1, select bank1
  4323  0DBE  1303               	bcf	status, 6	;RP1=0, select bank1
  4324                           	
  4325  0DBF  0092               	movwf	(146)^080h	;volatile
  4326                           	line	97
  4327                           ;PICinit.c: 97: if (motornum == 1)
  4328  0DC0  1283               	bcf	status, 5	;RP0=0, select bank0
  4329  0DC1  1303               	bcf	status, 6	;RP1=0, select bank0
  4330                           	
  4331  0DC2  0824               	movf	(_motorspeed_motornum),w
  4332  0DC3  3A01               	xorlw	01h
  4333  0DC4  1D03               	skipz
  4334  0DC5  2DC7               	goto	u2601
  4335  0DC6  2DC8               	goto	u2600
  4336  0DC7                     u2601:
  4337  0DC7  2DE6               	goto	l14
  4338  0DC8                     u2600:
  4339                           	line	99
  4340                           ;PICinit.c: 98: {
  4341                           ;PICinit.c: 99: if (speed == g_cSpeedMotor1)
  4342                           	
  4343                           	
  4344  0DC8  0823               	movf	(_motorspeed_speed),w
  4345  0DC9  0657               	xorwf	(87),w
  4346  0DCA  1D03               	skipz
  4347  0DCB  2DCD               	goto	u2611
  4348  0DCC  2DCE               	goto	u2610
  4349  0DCD                     u2611:
  4350  0DCD  2DD0               	goto	l15
  4351  0DCE                     u2610:
  4352                           	line	100
  4353                           ;PICinit.c: 100: {INTE=1; return;}
  4354  0DCE  160B               	bsf	(92/8),(92)&7
  4355  0DCF  2E0D               	goto	l12
  4356                           	
  4357  0DD0                     l15:	
  4358                           	line	101
  4359                           ;PICinit.c: 101: g_cSpeedMotor1 = speed;
  4360                           	
  4361  0DD0  0823               	movf	(_motorspeed_speed),w
  4362  0DD1  00A5               	movwf	(??_motorspeed+1+0)
  4363                           	
  4364  0DD2  0825               	movf	(??_motorspeed+1+0),w
  4365  0DD3  00D7               	movwf	(87)
  4366                           	line	102
  4367                           ;PICinit.c: 102: CCP1CON=0x00;
  4368  0DD4  1003               	clrc
  4369                           	
  4370  0DD5  3000               	movlw	0
  4371  0DD6  1803               	btfsc	status,0
  4372  0DD7  3001               	movlw	1
  4373  0DD8  0097               	movwf	(23)	;volatile
  4374                           	line	103
  4375                           ;PICinit.c: 103: CCPR1L=(speed+5);
  4376                           	
  4377  0DD9  0823               	movf	(_motorspeed_speed),w
  4378  0DDA  3E05               	addlw	05h
  4379                           	
  4380  0DDB  0095               	movwf	(21)	;volatile
  4381                           	line	104
  4382                           ;PICinit.c: 104: TRISC2=0;
  4383  0DDC  1683               	bsf	status, 5	;RP0=1, select bank1
  4384  0DDD  1303               	bcf	status, 6	;RP1=0, select bank1
  4385  0DDE  1107               	bcf	(1082/8)^080h,(1082)&7
  4386                           	line	105
  4387                           ;PICinit.c: 105: CCP1CON=0x0c;
  4388  0DDF  300C               	movlw	(0Ch)
  4389  0DE0  1283               	bcf	status, 5	;RP0=0, select bank0
  4390  0DE1  1303               	bcf	status, 6	;RP1=0, select bank0
  4391                           	
  4392  0DE2  0097               	movwf	(23)	;volatile
  4393                           	line	106
  4394                           ;PICinit.c: 106: T2CON=0x06;
  4395  0DE3  3006               	movlw	(06h)
  4396                           	
  4397  0DE4  0092               	movwf	(18)	;volatile
  4398                           	line	107
  4399                           ;PICinit.c: 107: }
  4400  0DE5  2E0B               	goto	l16
  4401                           	line	108
  4402                           	
  4403  0DE6                     l14:	
  4404                           ;PICinit.c: 108: else if (motornum == 2)
  4405                           	
  4406  0DE6  0824               	movf	(_motorspeed_motornum),w
  4407  0DE7  3A02               	xorlw	02h
  4408  0DE8  1D03               	skipz
  4409  0DE9  2DEB               	goto	u2621
  4410  0DEA  2DEC               	goto	u2620
  4411  0DEB                     u2621:
  4412  0DEB  2E0A               	goto	l17
  4413  0DEC                     u2620:
  4414                           	line	110
  4415                           ;PICinit.c: 109: {
  4416                           ;PICinit.c: 110: if (speed == g_cSpeedMotor2)
  4417                           	
  4418                           	
  4419  0DEC  0823               	movf	(_motorspeed_speed),w
  4420  0DED  0658               	xorwf	(88),w
  4421  0DEE  1D03               	skipz
  4422  0DEF  2DF1               	goto	u2631
  4423  0DF0  2DF2               	goto	u2630
  4424  0DF1                     u2631:
  4425  0DF1  2DF4               	goto	l18
  4426  0DF2                     u2630:
  4427                           	line	111
  4428                           ;PICinit.c: 111: {INTE=1; return;}
  4429  0DF2  160B               	bsf	(92/8),(92)&7
  4430  0DF3  2E0D               	goto	l12
  4431                           	
  4432  0DF4                     l18:	
  4433                           	line	112
  4434                           ;PICinit.c: 112: g_cSpeedMotor2 = speed;
  4435                           	
  4436  0DF4  0823               	movf	(_motorspeed_speed),w
  4437  0DF5  00A5               	movwf	(??_motorspeed+1+0)
  4438                           	
  4439  0DF6  0825               	movf	(??_motorspeed+1+0),w
  4440  0DF7  00D8               	movwf	(88)
  4441                           	line	113
  4442                           ;PICinit.c: 113: CCP2CON=0x00;
  4443  0DF8  1003               	clrc
  4444                           	
  4445  0DF9  3000               	movlw	0
  4446  0DFA  1803               	btfsc	status,0
  4447  0DFB  3001               	movlw	1
  4448  0DFC  009D               	movwf	(29)	;volatile
  4449                           	line	114
  4450                           ;PICinit.c: 114: CCPR2L=(speed+5);
  4451                           	
  4452  0DFD  0823               	movf	(_motorspeed_speed),w
  4453  0DFE  3E05               	addlw	05h
  4454                           	
  4455  0DFF  009B               	movwf	(27)	;volatile
  4456                           	line	115
  4457                           ;PICinit.c: 115: TRISC1=0;
  4458  0E00  1683               	bsf	status, 5	;RP0=1, select bank1
  4459  0E01  1303               	bcf	status, 6	;RP1=0, select bank1
  4460  0E02  1087               	bcf	(1081/8)^080h,(1081)&7
  4461                           	line	116
  4462                           ;PICinit.c: 116: CCP2CON=0x0c;
  4463  0E03  300C               	movlw	(0Ch)
  4464  0E04  1283               	bcf	status, 5	;RP0=0, select bank0
  4465  0E05  1303               	bcf	status, 6	;RP1=0, select bank0
  4466                           	
  4467  0E06  009D               	movwf	(29)	;volatile
  4468                           	line	117
  4469                           ;PICinit.c: 117: T2CON=0x06;
  4470  0E07  3006               	movlw	(06h)
  4471                           	
  4472  0E08  0092               	movwf	(18)	;volatile
  4473                           	line	118
  4474                           ;PICinit.c: 118: }
  4475  0E09  2E0B               	goto	l16
  4476                           	line	119
  4477                           	
  4478  0E0A                     l17:	
  4479                           	line	121
  4480                           ;PICinit.c: 119: else
  4481                           ;PICinit.c: 120: {
  4482                           ;PICinit.c: 121: cInputErr |= 0b00010000 ;
  4483                           	
  4484  0E0A  1679               	bsf	(121)+(4/8),(4)&7
  4485                           	line	122
  4486                           	
  4487  0E0B                     l19:	
  4488                           	
  4489  0E0B                     l16:	
  4490                           	line	123
  4491                           ;PICinit.c: 122: }
  4492                           ;PICinit.c: 123: INTE=1;
  4493  0E0B  160B               	bsf	(92/8),(92)&7
  4494                           	line	124
  4495                           ;PICinit.c: 124: return;
  4496  0E0C  2E0D               	goto	l12
  4497                           	line	125
  4498                           ;PICinit.c: 125: }
  4499  0E0D                     l12:	
  4500  0E0D  0008               	return
  4501                           ; =============== function _motorspeed ends ===
                                 ============
  4502                           
  4503                           GLOBAL __end_of_motorspeed
  4504  0E0E                     	__end_of_motorspeed:
  4505                           	FNSIZE	_motorspeed,2,1
  4506                           	signat	_motorspeed,8312
  4507                           	global	_output_low
  4508                           	global	??_output_low
  4509                           	global	?_output_low
  4510                           
  4511                           ; *************** function _output_low ********
                                 *******
  4512                           ; Defined at:
  4513                           ;		line 267 in file "C:\Program Files (x86)\HI-
                                 TECH Software\PICC\PRO\9.65\include\PICinit.c"
  4514                           ; Parameters:
  4515                           ;		Port        	reg:   wr	type: unsigned char 
  4516                           ;		Bit         	offs:   0	type: unsigned char 
  4517                           ; Auto variables:
  4518                           ;		Port        	       	type: unsigned char 
  4519                           ; Return value:
  4520                           ;		type: void 
  4521                           ;		size: 0
  4522                           ; Registers used:
  4523                           ;		wreg, status,2, status,0
  4524                           ; Tracked objects:
  4525                           ;		On entry : 300/0
  4526                           ;		On exit  : 0/0
  4527                           ;		Unchanged: 0/0
  4528                           ; Data sizes:
  4529                           ;		Autos:    1
  4530                           ;		Params:   1
  4531                           ;		Temp:     1
  4532                           ;		Total:    3
  4533                           ; This function calls:
  4534                           ;		Nothing
  4535                           ; This function is called by:
  4536                           ;		_configurePIC
  4537                           ;		_main
  4538                           ;		_motorsoff
  4539                           ;		_forward
  4540                           ;		_backward
  4541                           ;		_pivotleft
  4542                           ;		_pivotright
  4543                           ;		_isr
  4544                           ; This function uses a non-reentrant model
  4545                           ; 
  4546                           	psect	text220,local,class=CODE,delta=2
  4547                           	file	"C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4548                           	line	267
  4549                           ;PICinit.c: 257: void output_low(char Port, cha
                                 r Bit)
  4550                           ;PICinit.c: 267: {
  4551                           	
  4552  0C9D                     _output_low:	
  4553                           	opt stack 1
  4554                           ; Regs used in _output_low: [wreg+status,2+stat
                                 us,0]
  4555                           ;_output_low_Port stored from wreg
  4556                           	
  4557  0C9D  00B4               	movwf	(_output_low_Port)
  4558                           	line	268
  4559                           ;PICinit.c: 268: INTE=0;
  4560  0C9E  120B               	bcf	(92/8),(92)&7
  4561                           	line	272
  4562                           ;PICinit.c: 272: cPortTmp = Port;
  4563                           	
  4564  0C9F  0834               	movf	(_output_low_Port),w
  4565  0CA0  00B5               	movwf	(??_output_low+1+0)
  4566                           	
  4567  0CA1  0835               	movf	(??_output_low+1+0),w
  4568  0CA2  00F0               	movwf	(112)
  4569                           	line	273
  4570                           ;PICinit.c: 273: cBitTmp = Bit;
  4571                           	
  4572  0CA3  0833               	movf	(_output_low_Bit),w
  4573  0CA4  00B5               	movwf	(??_output_low+1+0)
  4574                           	
  4575  0CA5  0835               	movf	(??_output_low+1+0),w
  4576  0CA6  00F1               	movwf	(113)
  4577                           	line	274
  4578                           ;PICinit.c: 274: cBitPat = 0b00000001;
  4579                           	
  4580  0CA7  01F2               	clrf	(114)
  4581  0CA8  1403               	bsf	status,0
  4582  0CA9  0DF2               	rlf	(114),f
  4583                           	line	275
  4584                           ;PICinit.c: 275: INTE=1;
  4585  0CAA  160B               	bsf	(92/8),(92)&7
  4586                           	line	282
  4587                           # 282 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4588  0CAB  0870                 movf _cPortTmp,w ;move Port value to W, ASCII
                                  letter value ;#
  4589                           	line	283
  4590                           # 283 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4591                                    ;'A'=0x41, 'a'=0x61, ..., 'E'=0x45, 'e
                                 '=0x65 ;#
  4592                           	line	284
  4593                           # 284 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4594                                    ; 7654 3210 7654 3210 ;#
  4595                           	line	285
  4596                           # 285 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4597                                       ; 'A'=0100 0001 'E'=0100 0101 ;#
  4598                           	line	286
  4599                           # 286 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4600                                    ; 'a'=0110 0001 'e'=0110 0101 ;#
  4601                           	line	287
  4602                           # 287 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4603  0CAC  39D8                 andlw 11011000B ; 1101 1000 1s = positions we
                                  want to check ;#
  4604                           	line	288
  4605                           # 288 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4606  0CAD  3A40                 xorlw 01000000B ; 01 0 0 insure ANDed bits = 
                                 these values ;#
  4607                           	line	289
  4608                           # 289 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4609                                    ;if bits are expected values, W=0--> 0
                                 x02 flag=0 (Good!) ;#
  4610                           	line	290
  4611                           # 290 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4612  0CAE  1D03                 btfss status, 0x02 ;skip if Zero flag clear, 
                                 Error ;#
  4613                           	line	291
  4614                           # 291 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4615  0CAF  2CB9                 goto $+10 ;Error so exit >>> ;#
  4616                           	line	292
  4617                           # 292 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4618  0CB0  0870                 movf _cPortTmp,w ;Get original port ;#
  4619                           	line	293
  4620                           # 293 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4621  0CB1  3907                 andlw 00000111B ;#
  4622                           	line	294
  4623                           # 294 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4624  0CB2  1903                 btfsc status, 0x02 ;Check for invalid ascii p
                                 ort 0, -->0x02 flag=0 (Bad!) ;#
  4625                           	line	295
  4626                           # 295 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4627  0CB3  2CB9                 goto $+6 ;Error so exit >>> ;#
  4628                           	line	296
  4629                           # 296 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4630  0CB4  00F0                 movwf _cPortTmp ;_cPortTmp can now only be in
                                  range of 1-7 ;#
  4631                           	line	297
  4632                           # 297 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4633  0CB5  3006                 movlw 06h ;check to elimate ports 6 & 7, i.e.
                                  must be 1-5 ;#
  4634                           	line	298
  4635                           # 298 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4636  0CB6  0270                 subwf _cPortTmp,w ;#
  4637                           	line	299
  4638                           # 299 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4639  0CB7  1C03                 btfss status, 0x00 ;Carry clear means a borro
                                 w occurred, so Port <6 (Good!) ;#
  4640                           	line	300
  4641                           # 300 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4642  0CB8  2CBB                 goto $+3 ;Carry set means Error ;#
  4643                           	line	301
  4644                           # 301 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4645  0CB9  14F9                 bsf _cInputErr, 1 ;set error bit, bit 1 for o
                                 utput_low() ;#
  4646                           	line	302
  4647                           # 302 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4648  0CBA  0008                 return ;Error so exit >>> ;#
  4649                           	line	304
  4650                           # 304 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4651                               ;******** If we get here, _cPortTmp holds v
                                 alid port# in the range of 1-5 (A-E or a-e) ;#
  4652                           	line	305
  4653                           # 305 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4654                             ;******** Now check if Bit range is 0-7 ;#
  4655                           	line	306
  4656                           # 306 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4657  0CBB  0871                 movf _cBitTmp,w ;First check Bit is in the Ra
                                 nge 0-7 ;#
  4658                           	line	307
  4659                           # 307 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4660  0CBC  1903                 btfsc status, 0x02 ;If 0x02 bit set, Bit =0 a
                                 nd CBitPat already initialized to 00000001B ;#
  4661                           	line	308
  4662                           # 308 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4663  0CBD  2CC7                 goto $+10 ;Done (Good!) ;#
  4664                           	line	309
  4665                           # 309 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4666  0CBE  39F8                 andlw 11111000B ;Now check that Bit is in the
                                  range of 1-7 (already checked for 0) ;#
  4667                           	line	310
  4668                           # 310 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4669  0CBF  1D03                 btfss status, 0x02 ;Zero flag set means Bit i
                                 s in range 1-7 (Good!) ;#
  4670                           	line	311
  4671                           # 311 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4672  0CC0  2CB9                 goto $-7 ;Error so exit >>> ;#
  4673                           	line	312
  4674                           # 312 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4675  0CC1  0871                 movf _cBitTmp,w ;Now generate binary bit patt
                                 ern associated with numeric Bit (1-7) ;#
  4676                           	line	313
  4677                           # 313 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4678  0CC2  1003                 clrc ;#
  4679                           	line	314
  4680                           # 314 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4681  0CC3  0DF2                 rlf _cBitPat,f ;Rotate bit pattern in cBitPat
                                  one to the left ;#
  4682                           	line	315
  4683                           # 315 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4684  0CC4  3EFF                 addlw 0xFF ;Decrement Bit being held in w ;#
  4685                           	line	316
  4686                           # 316 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4687  0CC5  1D03                 btfss status, 0x02 ;If 0x02 bit set-done, cBi
                                 tPatx has been rotated to the correct pattern ;
                                 #
  4688                           	line	317
  4689                           # 317 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4690  0CC6  2CC2                 goto $-4 ;ie 00000010, 00000100, 00001000, ..
                                 . ;#
  4691                           	line	319
  4692                           # 319 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4693                               ;******** Now check if requested bit is all
                                 owed for Port using bit masks ;#
  4694                           	line	320
  4695                           # 320 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4696  0CC7  0870                 movf _cPortTmp,w ;move Port value (1-5) to W 
                                 ;#
  4697                           	line	321
  4698                           # 321 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4699  0CC8  00F1                    movwf _cBitTmp ;A=001, B=010, 0x00=011, D=
                                 100, E=101 ;#
  4700                           	line	322
  4701                           # 322 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4702  0CC9  0872                       movf _cBitPat, w ;W=00000001, 00000010,
                                  00000100, ...requested bit ;#
  4703                           	line	323
  4704                           # 323 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4705                                                         ;W will be And'd 
                                 with only one mask below ;#
  4706                           	line	324
  4707                           # 324 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4708  0CCA  0BF1                 decfsz _cBitTmp, f ;_cPortTmp = 0 if 'A' or '
                                 a' ;#
  4709                           	line	325
  4710                           # 325 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4711  0CCB  2CCD                 goto $+2 ;#
  4712                           	line	326
  4713                           # 326 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4714  0CCC  3910                       andlw MASK_OUT_PORTA ;mask for PortA ;#
  4715                           	line	327
  4716                           # 327 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4717  0CCD  0BF1                       decfsz _cBitTmp, f ;_cPortTmp = 0 if 'B
                                 ' or 'b' ;#
  4718                           	line	328
  4719                           # 328 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4720  0CCE  2CD0                       goto $+2 ;#
  4721                           	line	329
  4722                           # 329 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4723  0CCF  39FF                       andlw MASK_OUT_PORTB ;mask for PortB ;#
  4724                           	line	330
  4725                           # 330 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4726  0CD0  0BF1                       decfsz _cBitTmp, f ;_cPortTmp = 0 if 'C
                                 ' or 'c' ;#
  4727                           	line	331
  4728                           # 331 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4729  0CD1  2CD3                       goto $+2 ;#
  4730                           	line	332
  4731                           # 332 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4732  0CD2  3939                       andlw MASK_OUT_PORTC ;mask for PortC ;#
  4733                           	line	333
  4734                           # 333 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4735  0CD3  0BF1                       decfsz _cBitTmp, f ;_cPortTmp = 0 if 'D
                                 ' or 'd' ;#
  4736                           	line	334
  4737                           # 334 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4738  0CD4  2CD6                       goto $+2 ;#
  4739                           	line	335
  4740                           # 335 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4741  0CD5  39FF                       andlw MASK_OUT_PORTD ;mask for PortD ;#
  4742                           	line	336
  4743                           # 336 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4744  0CD6  0BF1                       decfsz _cBitTmp, f ;_cPortTmp = 0 if 'E
                                 ' or 'e' ;#
  4745                           	line	337
  4746                           # 337 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4747  0CD7  2CD9                       goto $+2 ;#
  4748                           	line	338
  4749                           # 338 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4750  0CD8  3904                       andlw MASK_OUT_PORTE ;mask for PortE ;#
  4751                           	line	339
  4752                           # 339 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4753  0CD9  39FF                    andlw 11111111B ;check W, if = 0, there wa
                                 s a bit mismatch ;#
  4754                           	line	340
  4755                           # 340 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4756  0CDA  1D03                 btfss status, 0x02 ;if Zero flag clear, means
                                  check passed ;#
  4757                           	line	341
  4758                           # 341 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4759  0CDB  2CDE                 goto $+3 ;#
  4760                           	line	342
  4761                           # 342 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4762  0CDC  14F9                 bsf _cInputErr, 1 ;set error bit, bit 1 for o
                                 utput_low() ;#
  4763                           	line	343
  4764                           # 343 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4765  0CDD  0008                 return ;Error so exit >>> ;#
  4766                           	line	345
  4767                           # 345 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4768                               ;******* If we get here, cPortTmp and cBitP
                                 at are valid, ie, Port/Bit combo are valid ;#
  4769                           	line	346
  4770                           # 346 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4771                             ;******* Now update associated PORT and TRIS 
                                 registers ;#
  4772                           	line	347
  4773                           # 347 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4774  0CDE  120B                 bcf INTCON, 4 ;Disable RB0 interrupt to allow
                                  hardware to finish ;#
  4775                           	line	348
  4776                           # 348 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4777                                    ;reconfiguring without interruption ;#
  4778                           	line	349
  4779                           # 349 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4780  0CDF  0803                 movf status, w ;save Status Register for rest
                                 ore before exiting ;#
  4781                           	line	350
  4782                           # 350 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4783  0CE0  00F3                 movwf _cStatusR ;possible need to preserve Ba
                                 nk & 0x07 bits for 0x00 code ;#
  4784                           	line	351
  4785                           # 351 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4786  0CE1  09F2                 comf _cBitPat,f ;complement bit pattern. Bit 
                                 of interest will now be zero ;#
  4787                           	line	352
  4788                           # 352 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4789                                    ;ie, _cBitPat is now 11111110, 1111110
                                 1, ... ;#
  4790                           	line	353
  4791                           # 353 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4792  0CE2  0870                 movf _cPortTmp,w ;Now holds valid portnumber 
                                 1-5 for ports A-E ;#
  4793                           	line	354
  4794                           # 354 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4795  0CE3  3E04                 addlw 04h ;Add 4 to _cPortTmp to calculate PO
                                 RT SFR address ;#
  4796                           	line	355
  4797                           # 355 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4798                                    ;PORTA=05h, PORTB=06h, PORTC=07h, etc 
                                 ;#
  4799                           	line	356
  4800                           # 356 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4801  0CE4  0084                 movwf fsr ;FSR = 05h to 09h, points to PORTx 
                                 ;#
  4802                           	line	357
  4803                           # 357 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4804  0CE5  1383                 bcf status, 0x07 ;Clear 0x07 for indirect add
                                 ressing to data Bank 0,1 ;#
  4805                           	line	358
  4806                           # 358 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4807                                    ;set PORTx pin state ;#
  4808                           	line	359
  4809                           # 359 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4810  0CE6  0800                 movf indf, w ;read PORTx and move value to W 
                                 ;#
  4811                           	line	360
  4812                           # 360 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4813  0CE7  0572                 andwf _cBitPat,w ;AND with bit pattern, ie 11
                                 111110, 11111101, ... ;#
  4814                           	line	361
  4815                           # 361 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4816                                    ;bit of interest will be set to 0 (off
                                 ), others bits won't change ;#
  4817                           	line	362
  4818                           # 362 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4819  0CE8  0080                 movwf indf ;write W back to PORTx ;#
  4820                           	line	363
  4821                           # 363 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4822                                    ;set PORTx pin to an output via TRIS r
                                 egister, Bit must be cleared ;#
  4823                           	line	364
  4824                           # 364 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4825  0CE9  1784                 bsf fsr, 7 ;add 0x80 to FSR so it now points 
                                 to TRISx, ie set bit 7 ;#
  4826                           	line	365
  4827                           # 365 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4828                                    ;fsr = 85h, 86h, 87h, 88h, 89h, points
                                  to TRISx ;#
  4829                           	line	366
  4830                           # 366 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4831  0CEA  0800                 movf indf, w ;read TRISx and move value to W 
                                 ;#
  4832                           	line	367
  4833                           # 367 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4834  0CEB  0572                 andwf _cBitPat,w ;AND with already complement
                                 ed bit pattern,ie 11111110, 11111101,... ;#
  4835                           	line	368
  4836                           # 368 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4837                                    ;to clear TRISx bit, other bits won't 
                                 change ;#
  4838                           	line	369
  4839                           # 369 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4840  0CEC  0080                 movwf indf ;write W to TRISx ;#
  4841                           	line	370
  4842                           # 370 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4843  0CED  0873                 movf _cStatusR,w ;restore original Status Reg
                                 ister before exiting ;#
  4844                           	line	371
  4845                           # 371 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4846  0CEE  0083                 movwf status ;possible need to preserve Bank 
                                 & 0x07 bits for 0x00 code ;#
  4847                           	psect	text220
  4848                           	line	373
  4849                           ;PICinit.c: 373: INTE=1;
  4850  0CEF  160B               	bsf	(92/8),(92)&7
  4851                           	line	374
  4852                           ;PICinit.c: 374: return;
  4853  0CF0  2CF1               	goto	l21
  4854                           	line	375
  4855                           ;PICinit.c: 375: }
  4856  0CF1                     l21:	
  4857  0CF1  0008               	return
  4858                           ; =============== function _output_low ends ===
                                 ============
  4859                           
  4860                           GLOBAL __end_of_output_low
  4861  0CF2                     	__end_of_output_low:
  4862                           	FNSIZE	_output_low,2,1
  4863                           	signat	_output_low,8312
  4864                           	global	_output_high
  4865                           	global	??_output_high
  4866                           	global	?_output_high
  4867                           
  4868                           ; *************** function _output_high *******
                                 ********
  4869                           ; Defined at:
  4870                           ;		line 140 in file "C:\Program Files (x86)\HI-
                                 TECH Software\PICC\PRO\9.65\include\PICinit.c"
  4871                           ; Parameters:
  4872                           ;		Port        	reg:   wr	type: unsigned char 
  4873                           ;		Bit         	offs:   0	type: unsigned char 
  4874                           ; Auto variables:
  4875                           ;		Port        	       	type: unsigned char 
  4876                           ; Return value:
  4877                           ;		type: void 
  4878                           ;		size: 0
  4879                           ; Registers used:
  4880                           ;		wreg, status,2, status,0
  4881                           ; Tracked objects:
  4882                           ;		On entry : 300/0
  4883                           ;		On exit  : 0/0
  4884                           ;		Unchanged: 0/0
  4885                           ; Data sizes:
  4886                           ;		Autos:    1
  4887                           ;		Params:   1
  4888                           ;		Temp:     1
  4889                           ;		Total:    3
  4890                           ; This function calls:
  4891                           ;		Nothing
  4892                           ; This function is called by:
  4893                           ;		_configurePIC
  4894                           ;		_main
  4895                           ;		_forward
  4896                           ;		_backward
  4897                           ;		_pivotleft
  4898                           ;		_pivotright
  4899                           ;		_isr
  4900                           ; This function uses a non-reentrant model
  4901                           ; 
  4902                           	psect	text221,local,class=CODE,delta=2
  4903                           	file	"C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4904                           	line	140
  4905                           ;PICinit.c: 130: void output_high(char Port, ch
                                 ar Bit)
  4906                           ;PICinit.c: 140: {
  4907                           	
  4908  0C48                     _output_high:	
  4909                           	opt stack 1
  4910                           ; Regs used in _output_high: [wreg+status,2+sta
                                 tus,0]
  4911                           ;_output_high_Port stored from wreg
  4912                           	
  4913  0C48  00B4               	movwf	(_output_high_Port)
  4914                           	line	141
  4915                           ;PICinit.c: 141: INTE=0;
  4916  0C49  120B               	bcf	(92/8),(92)&7
  4917                           	line	145
  4918                           ;PICinit.c: 145: cPortTmp = Port;
  4919                           	
  4920  0C4A  0834               	movf	(_output_high_Port),w
  4921  0C4B  00B5               	movwf	(??_output_high+1+0)
  4922                           	
  4923  0C4C  0835               	movf	(??_output_high+1+0),w
  4924  0C4D  00F0               	movwf	(112)
  4925                           	line	146
  4926                           ;PICinit.c: 146: cBitTmp = Bit;
  4927                           	
  4928  0C4E  0833               	movf	(_output_high_Bit),w
  4929  0C4F  00B5               	movwf	(??_output_high+1+0)
  4930                           	
  4931  0C50  0835               	movf	(??_output_high+1+0),w
  4932  0C51  00F1               	movwf	(113)
  4933                           	line	147
  4934                           ;PICinit.c: 147: cBitPat = 0b00000001;
  4935                           	
  4936  0C52  01F2               	clrf	(114)
  4937  0C53  1403               	bsf	status,0
  4938  0C54  0DF2               	rlf	(114),f
  4939                           	line	148
  4940                           ;PICinit.c: 148: INTE=1;
  4941  0C55  160B               	bsf	(92/8),(92)&7
  4942                           	line	155
  4943                           # 155 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4944  0C56  0870                 movf _cPortTmp,w ;move Port value to W, ASCII
                                  letter value ;#
  4945                           	line	156
  4946                           # 156 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4947                                    ;'A'=0x41, 'a'=0x61, ..., 'E'=0x45, 'e
                                 '=0x65 ;#
  4948                           	line	157
  4949                           # 157 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4950                                    ; 7654 3210 7654 3210 ;#
  4951                           	line	158
  4952                           # 158 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4953                                       ; 'A'=0100 0001 'E'=0100 0101 ;#
  4954                           	line	159
  4955                           # 159 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4956                                    ; 'a'=0110 0001 'e'=0110 0101 ;#
  4957                           	line	160
  4958                           # 160 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4959  0C57  39D8                 andlw 11011000B ; 1101 1000 1s = positions we
                                  want to check ;#
  4960                           	line	161
  4961                           # 161 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4962  0C58  3A40                 xorlw 01000000B ; 01 0 0 insure ANDed bits = 
                                 these values ;#
  4963                           	line	162
  4964                           # 162 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4965                                    ;if bits are expected values, W=0--> 0
                                 x02 flag=0 (Good!) ;#
  4966                           	line	163
  4967                           # 163 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4968  0C59  1D03                 btfss status, 0x02 ;skip if Zero flag clear, 
                                 Error ;#
  4969                           	line	164
  4970                           # 164 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4971  0C5A  2C64                 goto $+10 ;Error so exit >>> ;#
  4972                           	line	165
  4973                           # 165 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4974  0C5B  0870                 movf _cPortTmp,w ;Get original port ;#
  4975                           	line	166
  4976                           # 166 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4977  0C5C  3907                 andlw 00000111B ;#
  4978                           	line	167
  4979                           # 167 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4980  0C5D  1903                 btfsc status, 0x02 ;Check for invalid ascii p
                                 ort 0, -->0x02 flag=0 (Bad!) ;#
  4981                           	line	168
  4982                           # 168 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4983  0C5E  2C64                 goto $+6 ;Error so exit >>> ;#
  4984                           	line	169
  4985                           # 169 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4986  0C5F  00F0                 movwf _cPortTmp ;_cPortTmp can now only be in
                                  range of 1-7 ;#
  4987                           	line	170
  4988                           # 170 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4989  0C60  3006                 movlw 06h ;check to elimate ports 6 & 7, i.e.
                                  must be 1-5 ;#
  4990                           	line	171
  4991                           # 171 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4992  0C61  0270                 subwf _cPortTmp,w ;#
  4993                           	line	172
  4994                           # 172 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4995  0C62  1C03                 btfss status, 0x00 ;Carry clear means a borro
                                 w occurred, so Port <6 (Good!) ;#
  4996                           	line	173
  4997                           # 173 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  4998  0C63  2C66                 goto $+3 ;Carry set means Error ;#
  4999                           	line	174
  5000                           # 174 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5001  0C64  1479                 bsf _cInputErr, 0 ;set error bit, bit 0 for o
                                 utput_high() ;#
  5002                           	line	175
  5003                           # 175 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5004  0C65  0008                 return ;Error so exit >>> ;#
  5005                           	line	177
  5006                           # 177 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5007                               ;******** If we get here, _cPortTmp holds v
                                 alid port# in the range of 1-5 (A-E or a-e) ;#
  5008                           	line	178
  5009                           # 178 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5010                             ;******** Now check if Bit range is 0-7 ;#
  5011                           	line	179
  5012                           # 179 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5013  0C66  0871                 movf _cBitTmp,w ;First check Bit is in the Ra
                                 nge 0-7 ;#
  5014                           	line	180
  5015                           # 180 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5016  0C67  1903                 btfsc status, 0x02 ;If 0x02 bit set, Bit =0 a
                                 nd CBitPat already initialized to 00000001B ;#
  5017                           	line	181
  5018                           # 181 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5019  0C68  2C72                 goto $+10 ;Done (Good!) ;#
  5020                           	line	182
  5021                           # 182 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5022  0C69  39F8                 andlw 11111000B ;Now check that Bit is in the
                                  range of 1-7 (already checked for 0) ;#
  5023                           	line	183
  5024                           # 183 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5025  0C6A  1D03                 btfss status, 0x02 ;Zero flag set means Bit i
                                 s in range 1-7 (Good!) ;#
  5026                           	line	184
  5027                           # 184 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5028  0C6B  2C64                 goto $-7 ;Error so exit >>> ;#
  5029                           	line	185
  5030                           # 185 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5031  0C6C  0871                 movf _cBitTmp,w ;Now generate binary bit patt
                                 ern associated with numeric Bit (1-7) ;#
  5032                           	line	186
  5033                           # 186 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5034  0C6D  1003                 clrc ;#
  5035                           	line	187
  5036                           # 187 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5037  0C6E  0DF2                 rlf _cBitPat,f ;Rotate bit pattern in cBitPat
                                  one to the left ;#
  5038                           	line	188
  5039                           # 188 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5040  0C6F  3EFF                 addlw 0xFF ;Decrement Bit being held in w ;#
  5041                           	line	189
  5042                           # 189 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5043  0C70  1D03                 btfss status, 0x02 ;If 0x02 bit set-done, cBi
                                 tPatx has been rotated to the correct pattern ;
                                 #
  5044                           	line	190
  5045                           # 190 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5046  0C71  2C6D                 goto $-4 ;ie 00000010, 00000100, 00001000, ..
                                 . ;#
  5047                           	line	192
  5048                           # 192 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5049                               ;******** Now check if requested bit is all
                                 owed for Port using bit masks ;#
  5050                           	line	193
  5051                           # 193 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5052  0C72  0870                 movf _cPortTmp,w ;move Port value (1-5) to W 
                                 ;#
  5053                           	line	194
  5054                           # 194 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5055  0C73  00F1                    movwf _cBitTmp ;A=001, B=010, 0x00=011, D=
                                 100, E=101 ;#
  5056                           	line	195
  5057                           # 195 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5058  0C74  0872                    movf _cBitPat, w ;W=00000001, 00000010, 00
                                 000100, ...requested bit ;#
  5059                           	line	196
  5060                           # 196 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5061                                                         ;W will be And'd 
                                 with only one mask below ;#
  5062                           	line	197
  5063                           # 197 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5064  0C75  0BF1                 decfsz _cBitTmp, f ;_cPortTmp = 0 if 'A' or '
                                 a' ;#
  5065                           	line	198
  5066                           # 198 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5067  0C76  2C78                 goto $+2 ;#
  5068                           	line	199
  5069                           # 199 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5070  0C77  3910                    andlw MASK_OUT_PORTA ;mask for PortA ;#
  5071                           	line	200
  5072                           # 200 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5073  0C78  0BF1                    decfsz _cBitTmp, f ;_cPortTmp = 0 if 'B' o
                                 r 'b' ;#
  5074                           	line	201
  5075                           # 201 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5076  0C79  2C7B                    goto $+2 ;#
  5077                           	line	202
  5078                           # 202 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5079  0C7A  39FF                    andlw MASK_OUT_PORTB ;mask for PortB ;#
  5080                           	line	203
  5081                           # 203 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5082  0C7B  0BF1                    decfsz _cBitTmp, f ;_cPortTmp = 0 if 'C' o
                                 r 'c' ;#
  5083                           	line	204
  5084                           # 204 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5085  0C7C  2C7E                    goto $+2 ;#
  5086                           	line	205
  5087                           # 205 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5088  0C7D  3939                    andlw MASK_OUT_PORTC ;mask for PortC ;#
  5089                           	line	206
  5090                           # 206 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5091  0C7E  0BF1                    decfsz _cBitTmp, f ;_cPortTmp = 0 if 'D' o
                                 r 'd' ;#
  5092                           	line	207
  5093                           # 207 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5094  0C7F  2C81                    goto $+2 ;#
  5095                           	line	208
  5096                           # 208 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5097  0C80  39FF                    andlw MASK_OUT_PORTD ;mask for PortD ;#
  5098                           	line	209
  5099                           # 209 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5100  0C81  0BF1                    decfsz _cBitTmp, f ;_cPortTmp = 0 if 'E' o
                                 r 'e' ;#
  5101                           	line	210
  5102                           # 210 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5103  0C82  2C84                    goto $+2 ;#
  5104                           	line	211
  5105                           # 211 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5106  0C83  3904                    andlw MASK_OUT_PORTE ;mask for PortE ;#
  5107                           	line	212
  5108                           # 212 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5109  0C84  39FF                    andlw 11111111B ;if W = 0, there was a bit
                                  mismatch ;#
  5110                           	line	213
  5111                           # 213 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5112  0C85  1D03                 btfss status, 0x02 ;if Zero flag clear, means
                                  check passed ;#
  5113                           	line	214
  5114                           # 214 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5115  0C86  2C89                 goto $+3 ;#
  5116                           	line	215
  5117                           # 215 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5118  0C87  1479                 bsf _cInputErr, 0 ;set error bit, bit 0 for o
                                 utput_high() ;#
  5119                           	line	216
  5120                           # 216 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5121  0C88  0008                 return ;Error so exit >>> ;#
  5122                           	line	218
  5123                           # 218 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5124                               ;******* If we get here, cPortTmp and cBitP
                                 at are valid, ie, Port/Bit combo are valid ;#
  5125                           	line	219
  5126                           # 219 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5127                             ;******* Now update associated PORT and TRIS 
                                 registers ;#
  5128                           	line	220
  5129                           # 220 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5130  0C89  120B                 bcf INTCON, 4 ;Disable RB0 interrupt to allow
                                  hardware to finish ;#
  5131                           	line	221
  5132                           # 221 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5133                                    ;reconfiguring without interruption ;#
  5134                           	line	222
  5135                           # 222 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5136  0C8A  0803                 movf status, w ;save Status Register for rest
                                 ore before exiting ;#
  5137                           	line	223
  5138                           # 223 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5139  0C8B  00F3                 movwf _cStatusR ;possible need to preserve Ba
                                 nk & 0x07 bits for 0x00 code ;#
  5140                           	line	225
  5141                           # 225 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5142  0C8C  0870                   movf _cPortTmp,w ;Now holds valid port numb
                                 er 1-5 for ports a-e ;#
  5143                           	line	226
  5144                           # 226 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5145  0C8D  3E04                 addlw 04h ;Add 4 to _cPortTmp to calculate PO
                                 RT SFR address ;#
  5146                           	line	227
  5147                           # 227 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5148                                    ;PORTA=05h, PORTB=06h, PORTC=07h, etc 
                                 ;#
  5149                           	line	228
  5150                           # 228 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5151  0C8E  0084                 movwf fsr ;FSR = 05h to 09h, points to PORTx 
                                 ;#
  5152                           	line	229
  5153                           # 229 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5154  0C8F  1383                 bcf status, 0x07 ;Clear 0x07 for indirect add
                                 ressing to data Bank 0,1 ;#
  5155                           	line	230
  5156                           # 230 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5157                                    ;PORTx, TRISx, ... using fsr as pointe
                                 r ;#
  5158                           	line	231
  5159                           # 231 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5160                                    ;set PORTx pin state ;#
  5161                           	line	232
  5162                           # 232 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5163  0C90  0800                 movf indf, w ;read PORTx and move value to W 
                                 ;#
  5164                           	line	233
  5165                           # 233 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5166  0C91  0472                 iorwf _cBitPat,w ;Or with bit pattern, ie 000
                                 00001, 00000010, ... ;#
  5167                           	line	234
  5168                           # 234 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5169                                    ;to set pin to 1, others pins won't ch
                                 ange ;#
  5170                           	line	235
  5171                           # 235 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5172  0C92  0080                 movwf indf ;write W back to PORTx ;#
  5173                           	line	236
  5174                           # 236 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5175                                    ;set PORTx pin to an output, Bit must 
                                 be cleared ;#
  5176                           	line	237
  5177                           # 237 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5178  0C93  09F2                 comf _cBitPat,f ;complement Bit Pattern ;#
  5179                           	line	238
  5180                           # 238 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5181                                    ; _cBitPat is now 11111110, 11111101, 
                                 ... ;#
  5182                           	line	239
  5183                           # 239 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5184                                    ;add 0x80 to FSR so it now points to T
                                 RISx ;#
  5185                           	line	240
  5186                           # 240 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5187  0C94  1784                 bsf fsr, 7 ;setting bit 7 performs +0x80 ;#
  5188                           	line	241
  5189                           # 241 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5190                                    ;fsr = 85h, 86h, 87h, 88h, 89h, points
                                  to TRISx ;#
  5191                           	line	242
  5192                           # 242 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5193  0C95  0800                 movf indf, w ;move TRISx value to W ;#
  5194                           	line	243
  5195                           # 243 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5196  0C96  0572                 andwf _cBitPat,w ;AND with bit pattern, ie 11
                                 111110, 11111101,... ;#
  5197                           	line	244
  5198                           # 244 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5199                                    ; to clear TRISx bit, other bit won't 
                                 change ;#
  5200                           	line	245
  5201                           # 245 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5202  0C97  0080                 movwf indf ;write W to TRISx ;#
  5203                           	line	247
  5204                           # 247 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5205  0C98  0873                   movf _cStatusR,w ;restore original Status R
                                 egister before exiting ;#
  5206                           	line	248
  5207                           # 248 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5208  0C99  0083                 movwf status ;possible need to preserve Bank 
                                 & 0x07 bits for 0x00 code ;#
  5209                           	psect	text221
  5210                           	line	250
  5211                           ;PICinit.c: 250: INTE=1;
  5212  0C9A  160B               	bsf	(92/8),(92)&7
  5213                           	line	251
  5214                           ;PICinit.c: 251: return;
  5215  0C9B  2C9C               	goto	l20
  5216                           	line	252
  5217                           ;PICinit.c: 252: }
  5218  0C9C                     l20:	
  5219  0C9C  0008               	return
  5220                           ; =============== function _output_high ends ==
                                 =============
  5221                           
  5222                           GLOBAL __end_of_output_high
  5223  0C9D                     	__end_of_output_high:
  5224                           	FNSIZE	_output_high,2,1
  5225                           	signat	_output_high,8312
  5226                           	global	_putchar
  5227                           	global	??_putchar
  5228                           	global	?_putchar
  5229                           
  5230                           ; *************** function _putchar ***********
                                 ****
  5231                           ; Defined at:
  5232                           ;		line 648 in file "C:\Program Files (x86)\HI-
                                 TECH Software\PICC\PRO\9.65\include\PICinit.c"
  5233                           ; Parameters:
  5234                           ;		data        	reg:   wr	type: unsigned char 
  5235                           ; Auto variables:
  5236                           ;		data        	       	type: unsigned char 
  5237                           ; Return value:
  5238                           ;		type: void 
  5239                           ;		size: 0
  5240                           ; Registers used:
  5241                           ;		wreg
  5242                           ; Tracked objects:
  5243                           ;		On entry : 300/0
  5244                           ;		On exit  : 0/0
  5245                           ;		Unchanged: 0/0
  5246                           ; Data sizes:
  5247                           ;		Autos:    1
  5248                           ;		Params:   0
  5249                           ;		Temp:     0
  5250                           ;		Total:    1
  5251                           ; This function calls:
  5252                           ;		Nothing
  5253                           ; This function is called by:
  5254                           ;		_version
  5255                           ; This function uses a non-reentrant model
  5256                           ; 
  5257                           	psect	text222,local,class=CODE,delta=2
  5258                           	file	"C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  5259                           	line	648
  5260                           ;PICinit.c: 637: void putchar (char data)
  5261                           ;PICinit.c: 648: {
  5262                           	
  5263  09D8                     _putchar:	
  5264                           	opt stack 1
  5265                           ; Regs used in _putchar: [wreg]
  5266                           ;_putchar_data stored from wreg
  5267                           	
  5268  09D8  00A3               	movwf	(_putchar_data)
  5269                           	line	649
  5270                           ;PICinit.c: 649: INTE=0;
  5271  09D9  120B               	bcf	(92/8),(92)&7
  5272                           	line	652
  5273                           ;PICinit.c: 652: while (TRMT==0)continue;
  5274  09DA  29DC               	goto	l25
  5275                           	
  5276  09DB                     l26:	
  5277  09DB  29DC               	goto	l25
  5278                           	
  5279  09DC                     l25:	
  5280  09DC  1683               	bsf	status, 5	;RP0=1, select bank1
  5281  09DD  1303               	bcf	status, 6	;RP1=0, select bank1
  5282  09DE  1C98               	btfss	(1217/8)^080h,(1217)&7
  5283  09DF  29E1               	goto	u2701
  5284  09E0  29E2               	goto	u2700
  5285  09E1                     u2701:
  5286  09E1  29DB               	goto	l26
  5287  09E2                     u2700:
  5288                           	
  5289  09E2                     l27:	
  5290                           	line	653
  5291                           ;PICinit.c: 653: TXREG = data;
  5292  09E2  1283               	bcf	status, 5	;RP0=0, select bank0
  5293  09E3  1303               	bcf	status, 6	;RP1=0, select bank0
  5294                           	
  5295  09E4  0823               	movf	(_putchar_data),w
  5296                           	
  5297  09E5  0099               	movwf	(25)	;volatile
  5298                           	line	654
  5299                           ;PICinit.c: 654: INTE=1;
  5300  09E6  160B               	bsf	(92/8),(92)&7
  5301                           	line	655
  5302                           ;PICinit.c: 655: return;
  5303  09E7  29E8               	goto	l24
  5304                           	line	656
  5305                           ;PICinit.c: 656: }
  5306  09E8                     l24:	
  5307  09E8  0008               	return
  5308                           ; =============== function _putchar ends ======
                                 =========
  5309                           
  5310                           GLOBAL __end_of_putchar
  5311  09E9                     	__end_of_putchar:
  5312                           	FNSIZE	_putchar,1,0
  5313                           	signat	_putchar,4216
  5314                           	global	_isr
  5315                           	global	??_isr
  5316                           	global	?_isr
  5317                           
  5318                           ; *************** function _isr ***************
  5319                           ; Defined at:
  5320                           ;		line 280 in file "test1.c"
  5321                           ; Parameters:
  5322                           ;		None
  5323                           ; Auto variables:
  5324                           ;		None
  5325                           ; Return value:
  5326                           ;		type: void 
  5327                           ;		size: 0
  5328                           ; Registers used:
  5329                           ;		wreg, status,2, status,0, pclath, cstack
  5330                           ; Tracked objects:
  5331                           ;		On entry : 300/0
  5332                           ;		On exit  : 0/0
  5333                           ;		Unchanged: 0/0
  5334                           ; Data sizes:
  5335                           ;		Autos:    0
  5336                           ;		Params:   0
  5337                           ;		Temp:     4
  5338                           ;		Total:    4
  5339                           ; This function calls:
  5340                           ;		_save_data
  5341                           ;		i1_pause
  5342                           ;		_restore_data
  5343                           ;		_output_low
  5344                           ;		_read_input
  5345                           ;		_output_high
  5346                           ;		_backward
  5347                           ;		i1_motorsoff
  5348                           ;		i1_pivotleft
  5349                           ;		i1_forward
  5350                           ;		i1_pivotright
  5351                           ;		i1_read_adc
  5352                           ; This function is called by:
  5353                           ;		Interrupt level 1
  5354                           ; This function uses a non-reentrant model
  5355                           ; 
  5356                           	psect	intrtext,class=CODE,delta=2
  5357                           	file	"test1.c"
  5358                           	line	280
  5359                           ;test1.c: 279: void interrupt isr (void)
  5360                           ;test1.c: 280: {
  5361                           	
  5362  0E0E                     _isr:	
  5363                           	opt stack 7
  5364                           ; Regs used in _isr: [wreg+status,2+status,0+pc
                                 lath+cstack]
  5365                           	psect	intentry,class=CODE,delta=2
  5366                           global interrupt_function
  5367  0004                     interrupt_function:
  5368                           	global saved_w
  5369  0000                     	saved_w	set	btemp+1
  5370  0004  00FF               	movwf	saved_w
  5371  0005  0803               	movf	status,w
  5372  0006  1283               	bcf	status, 5	;RP0=0, select bank0
  5373  0007  1303               	bcf	status, 6	;RP1=0, select bank0
  5374  0008  00AF               	movwf	(??_isr+0)
  5375  0009  0804               	movf	fsr0,w
  5376  000A  00B0               	movwf	(??_isr+1)
  5377  000B  080A               	movf	pclath,w
  5378  000C  00B1               	movwf	(??_isr+2)
  5379  000D  087E               	movf	btemp+0,w
  5380  000E  00B2               	movwf	(??_isr+3)
  5381  000F  120A  158A  2E0E   	ljmp	_isr
  5382                           	psect	intrtext
  5383                           	line	281
  5384                           ;test1.c: 281: if (save_data ( ) ==0)
  5385  0E0E  120A  158A  23D1   	fcall	_save_data
              120A  158A         
  5386  0E13  3800               	iorlw	0
  5387  0E14  1D03               	skipz
  5388  0E15  2E17               	goto	i1u2411
  5389  0E16  2E18               	goto	i1u2410
  5390  0E17                     i1u2411:
  5391  0E17  2E19               	goto	i1l112
  5392+ 0E18                     i1u2410:
  5393+                          	line	282
  5394+                          ;test1.c: 282: {return;}
  5395+ 0E18  2FF3               	goto	i1l111
  5396+                          	
  5397+ 0E19                     i1l112:	
  5398+                          	line	285
  5399+                          ;test1.c: 285: pause (5);
  5400+ 0E19  3005               	movlw	low(05h)
  5401+ 0E1A  1283               	bcf	status, 5	;RP0=0, select bank0
  5402+ 0E1B  1303               	bcf	status, 6	;RP1=0, select bank0
  5403+                          	
  5404+ 0E1C  00B3               	movwf	(?i1_pause)
  5405+ 0E1D  3000               	movlw	high(05h)
  5406+ 0E1E  00B4               	movwf	((?i1_pause))+1
  5407+ 0E1F  120A  118A  21B4   	fcall	i1_pause
      +       120A  158A         
  5408+                          	line	286
  5409+                          ;test1.c: 286: if ((PORTB & 0x01) == 1)
  5410+ 0E24  1283               	bcf	status, 5	;RP0=0, select bank0
  5411+ 0E25  1303               	bcf	status, 6	;RP1=0, select bank0
  5412+                          	
  5413+ 0E26  1C06               	btfss	(6),(0)&7	;volatile
  5414+ 0E27  2E29               	goto	i1u2421
  5415+ 0E28  2E2A               	goto	i1u2420
  5416+ 0E29                     i1u2421:
  5417+ 0E29  2E31               	goto	i1l113
  5418+ 0E2A                     i1u2420:
  5419+                          	line	288
  5420+                          ;test1.c: 287: {
  5421+                          ;test1.c: 288: INTF = 0;
  5422+ 0E2A  108B               	bcf	(89/8),(89)&7
  5423+                          	line	289
  5424+                          ;test1.c: 289: restore_data ( );
  5425+ 0E2B  120A  158A  21E9   	fcall	_restore_data
      +       120A  158A         
  5426+                          	line	290
  5427+                          ;test1.c: 290: return;
  5428+ 0E30  2FF3               	goto	i1l111
  5429+                          	line	291
  5430+                          	
  5431+ 0E31                     i1l113:	
  5432+                          	line	292
  5433+                          ;test1.c: 291: }
  5434+                          ;test1.c: 292: output_low ('c', 0);
  5435+ 0E31  1003               	clrc
  5436+                          	
  5437+ 0E32  3000               	movlw	0
  5438+ 0E33  1803               	btfsc	status,0
  5439+ 0E34  3001               	movlw	1
  5440+ 0E35  00B3               	movwf	(?_output_low)
  5441+ 0E36  3063               	movlw	(063h)
  5442+ 0E37  120A  158A  249D   	fcall	_output_low
      +       120A  158A         
  5443+                          	line	293
  5444+                          ;test1.c: 293: output_low ('c', 5);
  5445+ 0E3C  3005               	movlw	(05h)
  5446+ 0E3D  1283               	bcf	status, 5	;RP0=0, select bank0
  5447+ 0E3E  1303               	bcf	status, 6	;RP1=0, select bank0
  5448+                          	
  5449+ 0E3F  00B3               	movwf	(?_output_low)
  5450+ 0E40  3063               	movlw	(063h)
  5451+ 0E41  120A  158A  249D   	fcall	_output_low
      +       120A  158A         
  5452+                          	line	294
  5453+                          ;test1.c: 294: output_low ('c', 3);
  5454+ 0E46  3003               	movlw	(03h)
  5455+ 0E47  1283               	bcf	status, 5	;RP0=0, select bank0
  5456+ 0E48  1303               	bcf	status, 6	;RP1=0, select bank0
  5457+                          	
  5458+ 0E49  00B3               	movwf	(?_output_low)
  5459+ 0E4A  3063               	movlw	(063h)
  5460+ 0E4B  120A  158A  249D   	fcall	_output_low
      +       120A  158A         
  5461+                          	line	295
  5462+                          ;test1.c: 295: output_low ('c', 4);
  5463+ 0E50  3004               	movlw	(04h)
  5464+ 0E51  1283               	bcf	status, 5	;RP0=0, select bank0
  5465+ 0E52  1303               	bcf	status, 6	;RP1=0, select bank0
  5466+                          	
  5467+ 0E53  00B3               	movwf	(?_output_low)
  5468+ 0E54  3063               	movlw	(063h)
  5469+ 0E55  120A  158A  249D   	fcall	_output_low
      +       120A  158A         
  5470+                          	line	296
  5471+                          ;test1.c: 296: pause (50);
  5472+ 0E5A  3032               	movlw	low(032h)
  5473+ 0E5B  1283               	bcf	status, 5	;RP0=0, select bank0
  5474+ 0E5C  1303               	bcf	status, 6	;RP1=0, select bank0
  5475+                          	
  5476+ 0E5D  00B3               	movwf	(?i1_pause)
  5477+ 0E5E  3000               	movlw	high(032h)
  5478+ 0E5F  00B4               	movwf	((?i1_pause))+1
  5479+ 0E60  120A  118A  21B4   	fcall	i1_pause
      +       120A  158A         
  5480+                          	line	298
  5481+                          ;test1.c: 298: if ((read_input ('E', 0)) == 0&&
      +                          read_input('E',1)!=0)
  5482+ 0E65  1003               	clrc
  5483+ 0E66  1283               	bcf	status, 5	;RP0=0, select bank0
  5484+ 0E67  1303               	bcf	status, 6	;RP1=0, select bank0
  5485+                          	
  5486+ 0E68  3000               	movlw	0
  5487+ 0E69  1803               	btfsc	status,0
  5488+ 0E6A  3001               	movlw	1
  5489+ 0E6B  00B3               	movwf	(?_read_input)
  5490+ 0E6C  3045               	movlw	(045h)
  5491+ 0E6D  120A  158A  24F2   	fcall	_read_input
      +       120A  158A         
  5492+ 0E72  3800               	iorlw	0
  5493+ 0E73  1D03               	skipz
  5494+ 0E74  2E76               	goto	i1u2431
  5495+ 0E75  2E77               	goto	i1u2430
  5496+ 0E76                     i1u2431:
  5497+ 0E76  2ECB               	goto	i1l114
  5498+ 0E77                     i1u2430:
  5499+ 0E77  1283               	bcf	status, 5	;RP0=0, select bank0
  5500+ 0E78  1303               	bcf	status, 6	;RP1=0, select bank0
  5501+                          	
  5502+ 0E79  01B3               	clrf	(?_read_input)
  5503+ 0E7A  1403               	bsf	status,0
  5504+ 0E7B  0DB3               	rlf	(?_read_input),f
  5505+ 0E7C  3045               	movlw	(045h)
  5506+ 0E7D  120A  158A  24F2   	fcall	_read_input
      +       120A  158A         
  5507+ 0E82  3A00               	xorlw	0
  5508+ 0E83  1903               	skipnz
  5509+ 0E84  2E86               	goto	i1u2441
  5510+ 0E85  2E87               	goto	i1u2440
  5511+ 0E86                     i1u2441:
  5512+ 0E86  2ECB               	goto	i1l114
  5513+ 0E87                     i1u2440:
  5514+                          	line	300
  5515+                          ;test1.c: 299: {
  5516+                          ;test1.c: 300: output_high ('E', 2);
  5517+ 0E87  3002               	movlw	(02h)
  5518+ 0E88  1283               	bcf	status, 5	;RP0=0, select bank0
  5519+ 0E89  1303               	bcf	status, 6	;RP1=0, select bank0
  5520+                          	
  5521+ 0E8A  00B3               	movwf	(?_output_high)
  5522+ 0E8B  3045               	movlw	(045h)
  5523+ 0E8C  120A  158A  2448   	fcall	_output_high
      +       120A  158A         
  5524+                          	line	301
  5525+                          ;test1.c: 301: output_low ('A', 4);
  5526+ 0E91  3004               	movlw	(04h)
  5527+ 0E92  1283               	bcf	status, 5	;RP0=0, select bank0
  5528+ 0E93  1303               	bcf	status, 6	;RP1=0, select bank0
  5529+                          	
  5530+ 0E94  00B3               	movwf	(?_output_low)
  5531+ 0E95  3041               	movlw	(041h)
  5532+ 0E96  120A  158A  249D   	fcall	_output_low
      +       120A  158A         
  5533+                          	line	303
  5534+                          ;test1.c: 303: backward();
  5535+ 0E9B  120A  158A  2268   	fcall	_backward
      +       120A  158A         
  5536+                          	line	304
  5537+                          ;test1.c: 304: pause(425);
  5538+ 0EA0  30A9               	movlw	low(01A9h)
  5539+ 0EA1  1283               	bcf	status, 5	;RP0=0, select bank0
  5540+ 0EA2  1303               	bcf	status, 6	;RP1=0, select bank0
  5541+                          	
  5542+ 0EA3  00B3               	movwf	(?i1_pause)
  5543+ 0EA4  3001               	movlw	high(01A9h)
  5544+ 0EA5  00B4               	movwf	((?i1_pause))+1
  5545+ 0EA6  120A  118A  21B4   	fcall	i1_pause
      +       120A  158A         
  5546+                          	line	305
  5547+                          ;test1.c: 305: motorsoff();
  5548+ 0EAB  120A  158A  2295   	fcall	i1_motorsoff
      +       120A  158A         
  5549+                          	line	306
  5550+                          ;test1.c: 306: pivotleft();
  5551+ 0EB0  120A  158A  223B   	fcall	i1_pivotleft
      +       120A  158A         
  5552+                          	line	307
  5553+                          ;test1.c: 307: pause(125);
  5554+ 0EB5  307D               	movlw	low(07Dh)
  5555+ 0EB6  1283               	bcf	status, 5	;RP0=0, select bank0
  5556+ 0EB7  1303               	bcf	status, 6	;RP1=0, select bank0
  5557+                          	
  5558+ 0EB8  00B3               	movwf	(?i1_pause)
  5559+ 0EB9  3000               	movlw	high(07Dh)
  5560+ 0EBA  00B4               	movwf	((?i1_pause))+1
  5561+ 0EBB  120A  118A  21B4   	fcall	i1_pause
      +       120A  158A         
  5562+                          	line	308
  5563+                          ;test1.c: 308: motorsoff();
  5564+ 0EC0  120A  158A  2295   	fcall	i1_motorsoff
      +       120A  158A         
  5565+                          	line	309
  5566+                          ;test1.c: 309: forward();
  5567+ 0EC5  120A  158A  220E   	fcall	i1_forward
      +       120A  158A         
  5568+                          	line	310
  5569+                          ;test1.c: 310: }
  5570+ 0ECA  2FD4               	goto	i1l115
  5571+                          	line	311
  5572+                          	
  5573+ 0ECB                     i1l114:	
  5574+                          ;test1.c: 311: else if ((read_input ('E', 1)) =
      +                          = 0&&read_input('E',0)!=0)
  5575+ 0ECB  1283               	bcf	status, 5	;RP0=0, select bank0
  5576+ 0ECC  1303               	bcf	status, 6	;RP1=0, select bank0
  5577+                          	
  5578+ 0ECD  01B3               	clrf	(?_read_input)
  5579+ 0ECE  1403               	bsf	status,0
  5580+ 0ECF  0DB3               	rlf	(?_read_input),f
  5581+ 0ED0  3045               	movlw	(045h)
  5582+ 0ED1  120A  158A  24F2   	fcall	_read_input
      +       120A  158A         
  5583+ 0ED6  3800               	iorlw	0
  5584+ 0ED7  1D03               	skipz
  5585+ 0ED8  2EDA               	goto	i1u2451
  5586+ 0ED9  2EDB               	goto	i1u2450
  5587+ 0EDA                     i1u2451:
  5588+ 0EDA  2F31               	goto	i1l116
  5589+ 0EDB                     i1u2450:
  5590+ 0EDB  1003               	clrc
  5591+ 0EDC  1283               	bcf	status, 5	;RP0=0, select bank0
  5592+ 0EDD  1303               	bcf	status, 6	;RP1=0, select bank0
  5593+                          	
  5594+ 0EDE  3000               	movlw	0
  5595+ 0EDF  1803               	btfsc	status,0
  5596+ 0EE0  3001               	movlw	1
  5597+ 0EE1  00B3               	movwf	(?_read_input)
  5598+ 0EE2  3045               	movlw	(045h)
  5599+ 0EE3  120A  158A  24F2   	fcall	_read_input
      +       120A  158A         
  5600+ 0EE8  3A00               	xorlw	0
  5601+ 0EE9  1903               	skipnz
  5602+ 0EEA  2EEC               	goto	i1u2461
  5603+ 0EEB  2EED               	goto	i1u2460
  5604+ 0EEC                     i1u2461:
  5605+ 0EEC  2F31               	goto	i1l116
  5606+ 0EED                     i1u2460:
  5607+                          	line	313
  5608+                          ;test1.c: 312: {
  5609+                          ;test1.c: 313: output_high ('A', 4);
  5610+ 0EED  3004               	movlw	(04h)
  5611+ 0EEE  1283               	bcf	status, 5	;RP0=0, select bank0
  5612+ 0EEF  1303               	bcf	status, 6	;RP1=0, select bank0
  5613+                          	
  5614+ 0EF0  00B3               	movwf	(?_output_high)
  5615+ 0EF1  3041               	movlw	(041h)
  5616+ 0EF2  120A  158A  2448   	fcall	_output_high
      +       120A  158A         
  5617+                          	line	314
  5618+                          ;test1.c: 314: output_low ('E', 2);
  5619+ 0EF7  3002               	movlw	(02h)
  5620+ 0EF8  1283               	bcf	status, 5	;RP0=0, select bank0
  5621+ 0EF9  1303               	bcf	status, 6	;RP1=0, select bank0
  5622+                          	
  5623+ 0EFA  00B3               	movwf	(?_output_low)
  5624+ 0EFB  3045               	movlw	(045h)
  5625+ 0EFC  120A  158A  249D   	fcall	_output_low
      +       120A  158A         
  5626+                          	line	316
  5627+                          ;test1.c: 316: backward();
  5628+ 0F01  120A  158A  2268   	fcall	_backward
      +       120A  158A         
  5629+                          	line	317
  5630+                          ;test1.c: 317: pause(425);
  5631+ 0F06  30A9               	movlw	low(01A9h)
  5632+ 0F07  1283               	bcf	status, 5	;RP0=0, select bank0
  5633+ 0F08  1303               	bcf	status, 6	;RP1=0, select bank0
  5634+                          	
  5635+ 0F09  00B3               	movwf	(?i1_pause)
  5636+ 0F0A  3001               	movlw	high(01A9h)
  5637+ 0F0B  00B4               	movwf	((?i1_pause))+1
  5638+ 0F0C  120A  118A  21B4   	fcall	i1_pause
      +       120A  158A         
  5639+                          	line	318
  5640+                          ;test1.c: 318: motorsoff();
  5641+ 0F11  120A  158A  2295   	fcall	i1_motorsoff
      +       120A  158A         
  5642+                          	line	319
  5643+                          ;test1.c: 319: pivotright();
  5644+ 0F16  120A  158A  22C2   	fcall	i1_pivotright
      +       120A  158A         
  5645+                          	line	320
  5646+                          ;test1.c: 320: pause(125);
  5647+ 0F1B  307D               	movlw	low(07Dh)
  5648+ 0F1C  1283               	bcf	status, 5	;RP0=0, select bank0
  5649+ 0F1D  1303               	bcf	status, 6	;RP1=0, select bank0
  5650+                          	
  5651+ 0F1E  00B3               	movwf	(?i1_pause)
  5652+ 0F1F  3000               	movlw	high(07Dh)
  5653+ 0F20  00B4               	movwf	((?i1_pause))+1
  5654+ 0F21  120A  118A  21B4   	fcall	i1_pause
      +       120A  158A         
  5655+                          	line	321
  5656+                          ;test1.c: 321: motorsoff();
  5657+ 0F26  120A  158A  2295   	fcall	i1_motorsoff
      +       120A  158A         
  5658+                          	line	322
  5659+                          ;test1.c: 322: forward();
  5660+ 0F2B  120A  158A  220E   	fcall	i1_forward
      +       120A  158A         
  5661+                          	line	323
  5662+                          ;test1.c: 323: }
  5663+ 0F30  2FD4               	goto	i1l115
  5664+                          	line	324
  5665+                          	
  5666+ 0F31                     i1l116:	
  5667+                          ;test1.c: 324: else if ((read_input ('E', 1)) =
      +                          = 0&&read_input('E',0)==0)
  5668+ 0F31  1283               	bcf	status, 5	;RP0=0, select bank0
  5669+ 0F32  1303               	bcf	status, 6	;RP1=0, select bank0
  5670+                          	
  5671+ 0F33  01B3               	clrf	(?_read_input)
  5672+ 0F34  1403               	bsf	status,0
  5673+ 0F35  0DB3               	rlf	(?_read_input),f
  5674+ 0F36  3045               	movlw	(045h)
  5675+ 0F37  120A  158A  24F2   	fcall	_read_input
      +       120A  158A         
  5676+ 0F3C  3800               	iorlw	0
  5677+ 0F3D  1D03               	skipz
  5678+ 0F3E  2F40               	goto	i1u2471
  5679+ 0F3F  2F41               	goto	i1u2470
  5680+ 0F40                     i1u2471:
  5681+ 0F40  2FD4               	goto	i1l115
  5682+ 0F41                     i1u2470:
  5683+ 0F41  1003               	clrc
  5684+ 0F42  1283               	bcf	status, 5	;RP0=0, select bank0
  5685+ 0F43  1303               	bcf	status, 6	;RP1=0, select bank0
  5686+                          	
  5687+ 0F44  3000               	movlw	0
  5688+ 0F45  1803               	btfsc	status,0
  5689+ 0F46  3001               	movlw	1
  5690+ 0F47  00B3               	movwf	(?_read_input)
  5691+ 0F48  3045               	movlw	(045h)
  5692+ 0F49  120A  158A  24F2   	fcall	_read_input
      +       120A  158A         
  5693+ 0F4E  3800               	iorlw	0
  5694+ 0F4F  1D03               	skipz
  5695+ 0F50  2F52               	goto	i1u2481
  5696+ 0F51  2F53               	goto	i1u2480
  5697+ 0F52                     i1u2481:
  5698+ 0F52  2FD4               	goto	i1l115
  5699+ 0F53                     i1u2480:
  5700+                          	line	326
  5701+                          ;test1.c: 325: {
  5702+                          ;test1.c: 326: output_low ('A', 4);
  5703+ 0F53  3004               	movlw	(04h)
  5704+ 0F54  1283               	bcf	status, 5	;RP0=0, select bank0
  5705+ 0F55  1303               	bcf	status, 6	;RP1=0, select bank0
  5706+                          	
  5707+ 0F56  00B3               	movwf	(?_output_low)
  5708+ 0F57  3041               	movlw	(041h)
  5709+ 0F58  120A  158A  249D   	fcall	_output_low
      +       120A  158A         
  5710+                          	line	327
  5711+                          ;test1.c: 327: output_low ('E', 2);
  5712+ 0F5D  3002               	movlw	(02h)
  5713+ 0F5E  1283               	bcf	status, 5	;RP0=0, select bank0
  5714+ 0F5F  1303               	bcf	status, 6	;RP1=0, select bank0
  5715+                          	
  5716+ 0F60  00B3               	movwf	(?_output_low)
  5717+ 0F61  3045               	movlw	(045h)
  5718+ 0F62  120A  158A  249D   	fcall	_output_low
      +       120A  158A         
  5719+                          	line	330
  5720+                          ;test1.c: 330: sensor3=read_adc(3);
  5721+ 0F67  3003               	movlw	(03h)
  5722+ 0F68  120A  118A  2137   	fcall	i1_read_adc
      +       120A  158A         
  5723+                          	
  5724+ 0F6D  1283               	bcf	status, 5	;RP0=0, select bank0
  5725+ 0F6E  1303               	bcf	status, 6	;RP1=0, select bank0
  5726+ 0F6F  0834               	movf	(1+?i1_read_adc),w
  5727+ 0F70  01FD               	clrf	(124+1)
  5728+ 0F71  07FD               	addwf	(124+1)
  5729+ 0F72  0833               	movf	(0+?i1_read_adc),w
  5730+ 0F73  01FC               	clrf	(124)
  5731+ 0F74  07FC               	addwf	(124)
  5732+                          
  5733+                          	line	331
  5734+                          ;test1.c: 331: sensor5=read_adc(5);
  5735+ 0F75  3005               	movlw	(05h)
  5736+ 0F76  120A  118A  2137   	fcall	i1_read_adc
      +       120A  158A         
  5737+ 0F7B  1283               	bcf	status, 5	;RP0=0, select bank0
  5738+ 0F7C  1303               	bcf	status, 6	;RP1=0, select bank0
  5739+                          	
  5740+ 0F7D  0834               	movf	(1+?i1_read_adc),w
  5741+ 0F7E  01DA               	clrf	(89+1)
  5742+ 0F7F  07DA               	addwf	(89+1)
  5743+ 0F80  0833               	movf	(0+?i1_read_adc),w
  5744+ 0F81  01D9               	clrf	(89)
  5745+ 0F82  07D9               	addwf	(89)
  5746+                          
  5747+                          	line	332
  5748+                          ;test1.c: 332: backward();
  5749+ 0F83  120A  158A  2268   	fcall	_backward
      +       120A  158A         
  5750+                          	line	333
  5751+                          ;test1.c: 333: pause(425);
  5752+ 0F88  30A9               	movlw	low(01A9h)
  5753+ 0F89  1283               	bcf	status, 5	;RP0=0, select bank0
  5754+ 0F8A  1303               	bcf	status, 6	;RP1=0, select bank0
  5755+                          	
  5756+ 0F8B  00B3               	movwf	(?i1_pause)
  5757+ 0F8C  3001               	movlw	high(01A9h)
  5758+ 0F8D  00B4               	movwf	((?i1_pause))+1
  5759+ 0F8E  120A  118A  21B4   	fcall	i1_pause
      +       120A  158A         
  5760+                          	line	334
  5761+                          ;test1.c: 334: motorsoff();
  5762+ 0F93  120A  158A  2295   	fcall	i1_motorsoff
      +       120A  158A         
  5763+                          	line	335
  5764+                          ;test1.c: 335: if(sensor3<sensor5)
  5765+ 0F98  1283               	bcf	status, 5	;RP0=0, select bank0
  5766+ 0F99  1303               	bcf	status, 6	;RP1=0, select bank0
  5767+                          	
  5768+                          	
  5769+ 0F9A  085A               	movf	(89+1),w
  5770+ 0F9B  027D               	subwf	(124+1),w
  5771+ 0F9C  1D03               	skipz
  5772+ 0F9D  2FA0               	goto	i1u2495
  5773+ 0F9E  0859               	movf	(89),w
  5774+ 0F9F  027C               	subwf	(124),w
  5775+ 0FA0                     i1u2495:
  5776+ 0FA0  1803               	skipnc
  5777+ 0FA1  2FA3               	goto	i1u2491
  5778+ 0FA2  2FA4               	goto	i1u2490
  5779+ 0FA3                     i1u2491:
  5780+ 0FA3  2FBA               	goto	i1l119
  5781+ 0FA4                     i1u2490:
  5782+                          	line	337
  5783+                          ;test1.c: 336: {
  5784+                          ;test1.c: 337: pivotleft();
  5785+ 0FA4  120A  158A  223B   	fcall	i1_pivotleft
      +       120A  158A         
  5786+                          	line	338
  5787+                          ;test1.c: 338: pause(125);
  5788+ 0FA9  307D               	movlw	low(07Dh)
  5789+ 0FAA  1283               	bcf	status, 5	;RP0=0, select bank0
  5790+ 0FAB  1303               	bcf	status, 6	;RP1=0, select bank0
  5791+                          	
  5792+ 0FAC  00B3               	movwf	(?i1_pause)
  5793+ 0FAD  3000               	movlw	high(07Dh)
  5794+ 0FAE  00B4               	movwf	((?i1_pause))+1
  5795+ 0FAF  120A  118A  21B4   	fcall	i1_pause
      +       120A  158A         
  5796+                          	line	339
  5797+                          ;test1.c: 339: motorsoff();
  5798+ 0FB4  120A  158A  2295   	fcall	i1_motorsoff
      +       120A  158A         
  5799+                          	line	341
  5800+                          ;test1.c: 341: }
  5801+ 0FB9  2FCF               	goto	i1l120
  5802+                          	line	342
  5803+                          	
  5804+ 0FBA                     i1l119:	
  5805+                          	line	344
  5806+                          ;test1.c: 342: else
  5807+                          ;test1.c: 343: {
  5808+                          ;test1.c: 344: pivotright();
  5809+ 0FBA  120A  158A  22C2   	fcall	i1_pivotright
      +       120A  158A         
  5810+                          	line	345
  5811+                          ;test1.c: 345: pause(125);
  5812+ 0FBF  307D               	movlw	low(07Dh)
  5813+ 0FC0  1283               	bcf	status, 5	;RP0=0, select bank0
  5814+ 0FC1  1303               	bcf	status, 6	;RP1=0, select bank0
  5815+                          	
  5816+ 0FC2  00B3               	movwf	(?i1_pause)
  5817+ 0FC3  3000               	movlw	high(07Dh)
  5818+ 0FC4  00B4               	movwf	((?i1_pause))+1
  5819+ 0FC5  120A  118A  21B4   	fcall	i1_pause
      +       120A  158A         
  5820+                          	line	346
  5821+                          ;test1.c: 346: motorsoff();
  5822+ 0FCA  120A  158A  2295   	fcall	i1_motorsoff
      +       120A  158A         
  5823+                          	line	347
  5824+                          	
  5825+ 0FCF                     i1l120:	
  5826+                          	line	348
  5827+                          ;test1.c: 347: }
  5828+                          ;test1.c: 348: forward();
  5829+ 0FCF  120A  158A  220E   	fcall	i1_forward
      +       120A  158A         
  5830+                          	line	349
  5831+                          	
  5832+ 0FD4                     i1l118:	
  5833+                          	line	352
  5834+                          	
  5835+ 0FD4                     i1l117:	
  5836+                          	
  5837+ 0FD4                     i1l115:	
  5838+                          ;test1.c: 349: }
  5839+                          ;test1.c: 352: if ((PORTB & 0x01) == 1)
  5840+ 0FD4  1283               	bcf	status, 5	;RP0=0, select bank0
  5841+ 0FD5  1303               	bcf	status, 6	;RP1=0, select bank0
  5842+                          	
  5843+ 0FD6  1C06               	btfss	(6),(0)&7	;volatile
  5844+ 0FD7  2FD9               	goto	i1u2501
  5845+ 0FD8  2FDA               	goto	i1u2500
  5846+ 0FD9                     i1u2501:
  5847+ 0FD9  2FED               	goto	i1l121
  5848+ 0FDA                     i1u2500:
  5849+                          	line	354
  5850+                          ;test1.c: 353: {
  5851+                          ;test1.c: 354: INTF = 0;
  5852+ 0FDA  108B               	bcf	(89/8),(89)&7
  5853+                          	line	355
  5854+                          ;test1.c: 355: output_high ('A', 4);
  5855+ 0FDB  3004               	movlw	(04h)
  5856+                          	
  5857+ 0FDC  00B3               	movwf	(?_output_high)
  5858+ 0FDD  3041               	movlw	(041h)
  5859+ 0FDE  120A  158A  2448   	fcall	_output_high
      +       120A  158A         
  5860+                          	line	356
  5861+                          ;test1.c: 356: output_high ('E', 2);
  5862+ 0FE3  3002               	movlw	(02h)
  5863+ 0FE4  1283               	bcf	status, 5	;RP0=0, select bank0
  5864+ 0FE5  1303               	bcf	status, 6	;RP1=0, select bank0
  5865+                          	
  5866+ 0FE6  00B3               	movwf	(?_output_high)
  5867+ 0FE7  3045               	movlw	(045h)
  5868+ 0FE8  120A  158A  2448   	fcall	_output_high
      +       120A  158A         
  5869+                          	line	357
  5870+                          	
  5871+ 0FED                     i1l121:	
  5872+                          	line	358
  5873+                          ;test1.c: 357: }
  5874+                          ;test1.c: 358: restore_data ( );
  5875+ 0FED  120A  158A  21E9   	fcall	_restore_data
      +       120A  158A         
  5876+                          	line	359
  5877+                          ;test1.c: 359: return;
  5878+ 0FF2  2FF3               	goto	i1l111
  5879+                          	line	360
  5880+                          ;test1.c: 360: }
  5881+ 0FF3                     i1l111:	
  5882+ 0FF3  1283               	bcf	status, 5	;RP0=0, select bank0
  5883+ 0FF4  1303               	bcf	status, 6	;RP1=0, select bank0
  5884+ 0FF5  0832               	movf	(??_isr+3),w
  5885+ 0FF6  00FE               	movwf	btemp+0
  5886+ 0FF7  0831               	movf	(??_isr+2),w
  5887+ 0FF8  008A               	movwf	pclath
  5888+ 0FF9  0830               	movf	(??_isr+1),w
  5889+ 0FFA  0084               	movwf	fsr0
  5890+ 0FFB  082F               	movf	(??_isr+0),w
  5891+ 0FFC  0083               	movwf	status
  5892+ 0FFD  0EFF               	swapf	saved_w,f
  5893+ 0FFE  0E7F               	swapf	saved_w,w
  5894+ 0FFF  0009               	retfie
  5895+                          ; =============== function _isr ends ==========
      +                          =====
  5896+                          
  5897+                          GLOBAL __end_of_isr
  5898+ 1000                     	__end_of_isr:
  5899+                          	FNSIZE	_isr,4,0
  5900+                          	signat	_isr,88
  5901+                          	psect	intrtext
  5902+                          	global	intlevel1
  5903+                          	FNBREAK _backward,intlevel1
  5904+                          	global	_backward
  5905+                          	global	??_backward
  5906+                          	global	?_backward
  5907+                          
  5908+                          ; *************** function _backward **********
      +                          *****
  5909+                          ; Defined at:
  5910+                          ;		line 113 in file "test1.c"
  5911+                          ; Parameters:
  5912+                          ;		None
  5913+                          ; Auto variables:
  5914+                          ;		None
  5915+                          ; Return value:
  5916+                          ;		type: void 
  5917+                          ;		size: 0
  5918+                          ; Registers used:
  5919+                          ;		wreg, status,2, status,0, pclath, cstack
  5920+                          ; Tracked objects:
  5921+                          ;		On entry : 0/0
  5922+                          ;		On exit  : 0/0
  5923+                          ;		Unchanged: 0/0
  5924+                          ; Data sizes:
  5925+                          ;		Autos:    0
  5926+                          ;		Params:   0
  5927+                          ;		Temp:     0
  5928+                          ;		Total:    0
  5929+                          ; This function calls:
  5930+                          ;		_output_low
  5931+                          ;		_output_high
  5932+                          ; This function is called by:
  5933+                          ;		_isr
  5934+                          ; This function uses a non-reentrant model
  5935+                          ; 
  5936+                          	psect	text224,local,class=CODE,delta=2
  5937+                          	file	"test1.c"
  5938+                          	line	113
  5939+                          ;test1.c: 112: void backward()
  5940+                          ;test1.c: 113: {
  5941+                          	
  5942+ 0A68                     _backward:	
  5943+                          	opt stack 6
  5944+                          ; Regs used in _backward: [wreg+status,2+status
      +                          ,0+pclath+cstack]
  5945+                          	line	114
  5946+                          ;test1.c: 114: output_low('C',0);
  5947+ 0A68  1003               	clrc
  5948+ 0A69  1283               	bcf	status, 5	;RP0=0, select bank0
  5949+ 0A6A  1303               	bcf	status, 6	;RP1=0, select bank0
  5950+                          	
  5951+ 0A6B  3000               	movlw	0
  5952+ 0A6C  1803               	btfsc	status,0
  5953+ 0A6D  3001               	movlw	1
  5954+ 0A6E  00B3               	movwf	(?_output_low)
  5955+ 0A6F  3043               	movlw	(043h)
  5956+ 0A70  120A  158A  249D   	fcall	_output_low
      +       120A  158A         
  5957+                          	line	115
  5958+                          ;test1.c: 115: output_high('C',5);
  5959+ 0A75  3005               	movlw	(05h)
  5960+ 0A76  1283               	bcf	status, 5	;RP0=0, select bank0
  5961+ 0A77  1303               	bcf	status, 6	;RP1=0, select bank0
  5962+                          	
  5963+ 0A78  00B3               	movwf	(?_output_high)
  5964+ 0A79  3043               	movlw	(043h)
  5965+ 0A7A  120A  158A  2448   	fcall	_output_high
      +       120A  158A         
  5966+                          	line	116
  5967+                          ;test1.c: 116: output_low('C',4);
  5968+ 0A7F  3004               	movlw	(04h)
  5969+ 0A80  1283               	bcf	status, 5	;RP0=0, select bank0
  5970+ 0A81  1303               	bcf	status, 6	;RP1=0, select bank0
  5971+                          	
  5972+ 0A82  00B3               	movwf	(?_output_low)
  5973+ 0A83  3043               	movlw	(043h)
  5974+ 0A84  120A  158A  249D   	fcall	_output_low
      +       120A  158A         
  5975+                          	line	117
  5976+                          ;test1.c: 117: output_high('C',3);
  5977+ 0A89  3003               	movlw	(03h)
  5978+ 0A8A  1283               	bcf	status, 5	;RP0=0, select bank0
  5979+ 0A8B  1303               	bcf	status, 6	;RP1=0, select bank0
  5980+                          	
  5981+ 0A8C  00B3               	movwf	(?_output_high)
  5982+ 0A8D  3043               	movlw	(043h)
  5983+ 0A8E  120A  158A  2448   	fcall	_output_high
      +       120A  158A         
  5984+                          	line	118
  5985+                          ;test1.c: 118: return;
  5986+ 0A93  2A94               	goto	i1l68
  5987+                          	line	119
  5988+                          ;test1.c: 119: }
  5989+ 0A94                     i1l68:	
  5990+ 0A94  0008               	return
  5991+                          ; =============== function _backward ends =====
      +                          ==========
  5992+                          
  5993+                          GLOBAL __end_of_backward
  5994+ 0A95                     	__end_of_backward:
  5995+                          	FNSIZE	_backward,0,0
  5996+                          	signat	_backward,88
  5997+                          	psect	text225,local,class=CODE,delta=2
  5998+                          	global	intlevel1
  5999+                          	FNBREAK i1_pivotright,intlevel1
  6000+                          	global	i1_pivotright
  6001+                          	global	??i1_pivotright
  6002+                          	global	?i1_pivotright
  6003+                          
  6004+                          ; *************** function i1_pivotright ******
      +                          *********
  6005+                          ; Defined at:
  6006+                          ;		line 132 in file "test1.c"
  6007+                          ; Parameters:
  6008+                          ;		None
  6009+                          ; Auto variables:
  6010+                          ;		None
  6011+                          ; Return value:
  6012+                          ;		type: void 
  6013+                          ;		size: 0
  6014+                          ; Registers used:
  6015+                          ;		wreg, status,2, status,0, pclath, cstack
  6016+                          ; Tracked objects:
  6017+                          ;		On entry : 0/0
  6018+                          ;		On exit  : 0/0
  6019+                          ;		Unchanged: 0/0
  6020+                          ; Data sizes:
  6021+                          ;		Autos:    0
  6022+                          ;		Params:   0
  6023+                          ;		Temp:     0
  6024+                          ;		Total:    0
  6025+                          ; This function calls:
  6026+                          ;		_output_low
  6027+                          ;		_output_high
  6028+                          ; This function is called by:
  6029+                          ;		i1_target
  6030+                          ;		i1_navigation
  6031+                          ;		_isr
  6032+                          ; This function uses a non-reentrant model
  6033+                          ; 
  6034+                          	file	"test1.c"
  6035+                          	line	132
  6036+                          ;test1.c: 131: void pivotright()
  6037+                          ;test1.c: 132: {
  6038+                          	
  6039+ 0AC2                     i1_pivotright:	
  6040+                          	opt stack 6
  6041+                          ; Regs used in i1_pivotright: [wreg+status,2+st
      +                          atus,0+pclath+cstack]
  6042+                          	line	133
  6043+ 0AC2  1003               	clrc
  6044+ 0AC3  1283               	bcf	status, 5	;RP0=0, select bank0
  6045+ 0AC4  1303               	bcf	status, 6	;RP1=0, select bank0
  6046+                          	
  6047+ 0AC5  3000               	movlw	0
  6048+ 0AC6  1803               	btfsc	status,0
  6049+ 0AC7  3001               	movlw	1
  6050+ 0AC8  00B3               	movwf	(?_output_low)
  6051+ 0AC9  3043               	movlw	(043h)
  6052+ 0ACA  120A  158A  249D   	fcall	_output_low
      +       120A  158A         
  6053+                          	line	134
  6054+ 0ACF  3003               	movlw	(03h)
  6055+ 0AD0  1283               	bcf	status, 5	;RP0=0, select bank0
  6056+ 0AD1  1303               	bcf	status, 6	;RP1=0, select bank0
  6057+                          	
  6058+ 0AD2  00B3               	movwf	(?_output_low)
  6059+ 0AD3  3043               	movlw	(043h)
  6060+ 0AD4  120A  158A  249D   	fcall	_output_low
      +       120A  158A         
  6061+                          	line	135
  6062+ 0AD9  3004               	movlw	(04h)
  6063+ 0ADA  1283               	bcf	status, 5	;RP0=0, select bank0
  6064+ 0ADB  1303               	bcf	status, 6	;RP1=0, select bank0
  6065+                          	
  6066+ 0ADC  00B3               	movwf	(?_output_high)
  6067+ 0ADD  3043               	movlw	(043h)
  6068+ 0ADE  120A  158A  2448   	fcall	_output_high
      +       120A  158A         
  6069+                          	line	136
  6070+ 0AE3  3005               	movlw	(05h)
  6071+ 0AE4  1283               	bcf	status, 5	;RP0=0, select bank0
  6072+ 0AE5  1303               	bcf	status, 6	;RP1=0, select bank0
  6073+                          	
  6074+ 0AE6  00B3               	movwf	(?_output_high)
  6075+ 0AE7  3043               	movlw	(043h)
  6076+ 0AE8  120A  158A  2448   	fcall	_output_high
      +       120A  158A         
  6077+                          	line	138
  6078+ 0AED  2AEE               	goto	i1l70
  6079+                          	line	139
  6080+ 0AEE                     i1l70:	
  6081+ 0AEE  0008               	return
  6082+                          ; =============== function i1_pivotright ends =
      +                          ==============
  6083+                          
  6084+                          GLOBAL __end_ofi1_pivotright
  6085+ 0AEF                     	__end_ofi1_pivotright:
  6086+                          	FNSIZE	i1_pivotright,0,0
  6087+                          	signat	i1_pivotright,88
  6088+                          	psect	text226,local,class=CODE,delta=2
  6089+                          	global	intlevel1
  6090+                          	FNBREAK i1_motorsoff,intlevel1
  6091+                          	global	i1_motorsoff
  6092+                          	global	??i1_motorsoff
  6093+                          	global	?i1_motorsoff
  6094+                          
  6095+                          ; *************** function i1_motorsoff *******
      +                          ********
  6096+                          ; Defined at:
  6097+                          ;		line 95 in file "test1.c"
  6098+                          ; Parameters:
  6099+                          ;		None
  6100+                          ; Auto variables:
  6101+                          ;		None
  6102+                          ; Return value:
  6103+                          ;		type: void 
  6104+                          ;		size: 0
  6105+                          ; Registers used:
  6106+                          ;		wreg, status,2, status,0, pclath, cstack
  6107+                          ; Tracked objects:
  6108+                          ;		On entry : 0/0
  6109+                          ;		On exit  : 0/0
  6110+                          ;		Unchanged: 0/0
  6111+                          ; Data sizes:
  6112+                          ;		Autos:    0
  6113+                          ;		Params:   0
  6114+                          ;		Temp:     0
  6115+                          ;		Total:    0
  6116+                          ; This function calls:
  6117+                          ;		_output_low
  6118+                          ; This function is called by:
  6119+                          ;		i1_main
  6120+                          ;		i1_target
  6121+                          ;		i1_navigation
  6122+                          ;		_isr
  6123+                          ; This function uses a non-reentrant model
  6124+                          ; 
  6125+                          	file	"test1.c"
  6126+                          	line	95
  6127+                          ;test1.c: 94: void motorsoff()
  6128+                          ;test1.c: 95: {
  6129+                          	
  6130+ 0A95                     i1_motorsoff:	
  6131+                          	opt stack 6
  6132+                          ; Regs used in i1_motorsoff: [wreg+status,2+sta
      +                          tus,0+pclath+cstack]
  6133+                          	line	96
  6134+ 0A95  1003               	clrc
  6135+ 0A96  1283               	bcf	status, 5	;RP0=0, select bank0
  6136+ 0A97  1303               	bcf	status, 6	;RP1=0, select bank0
  6137+                          	
  6138+ 0A98  3000               	movlw	0
  6139+ 0A99  1803               	btfsc	status,0
  6140+ 0A9A  3001               	movlw	1
  6141+ 0A9B  00B3               	movwf	(?_output_low)
  6142+ 0A9C  3043               	movlw	(043h)
  6143+ 0A9D  120A  158A  249D   	fcall	_output_low
      +       120A  158A         
  6144+                          	line	97
  6145+ 0AA2  3005               	movlw	(05h)
  6146+ 0AA3  1283               	bcf	status, 5	;RP0=0, select bank0
  6147+ 0AA4  1303               	bcf	status, 6	;RP1=0, select bank0
  6148+                          	
  6149+ 0AA5  00B3               	movwf	(?_output_low)
  6150+ 0AA6  3043               	movlw	(043h)
  6151+ 0AA7  120A  158A  249D   	fcall	_output_low
      +       120A  158A         
  6152+                          	line	98
  6153+ 0AAC  3003               	movlw	(03h)
  6154+ 0AAD  1283               	bcf	status, 5	;RP0=0, select bank0
  6155+ 0AAE  1303               	bcf	status, 6	;RP1=0, select bank0
  6156+                          	
  6157+ 0AAF  00B3               	movwf	(?_output_low)
  6158+ 0AB0  3043               	movlw	(043h)
  6159+ 0AB1  120A  158A  249D   	fcall	_output_low
      +       120A  158A         
  6160+                          	line	99
  6161+ 0AB6  3004               	movlw	(04h)
  6162+ 0AB7  1283               	bcf	status, 5	;RP0=0, select bank0
  6163+ 0AB8  1303               	bcf	status, 6	;RP1=0, select bank0
  6164+                          	
  6165+ 0AB9  00B3               	movwf	(?_output_low)
  6166+ 0ABA  3043               	movlw	(043h)
  6167+ 0ABB  120A  158A  249D   	fcall	_output_low
      +       120A  158A         
  6168+                          	line	100
  6169+ 0AC0  2AC1               	goto	i1l66
  6170+                          	line	101
  6171+ 0AC1                     i1l66:	
  6172+ 0AC1  0008               	return
  6173+                          ; =============== function i1_motorsoff ends ==
      +                          =============
  6174+                          
  6175+                          GLOBAL __end_ofi1_motorsoff
  6176+ 0AC2                     	__end_ofi1_motorsoff:
  6177+                          	FNSIZE	i1_motorsoff,0,0
  6178+                          	signat	i1_motorsoff,88
  6179+                          	psect	text227,local,class=CODE,delta=2
  6180+                          	global	intlevel1
  6181+                          	FNBREAK i1_forward,intlevel1
  6182+                          	global	i1_forward
  6183+                          	global	??i1_forward
  6184+                          	global	?i1_forward
  6185+                          
  6186+                          ; *************** function i1_forward *********
      +                          ******
  6187+                          ; Defined at:
  6188+                          ;		line 104 in file "test1.c"
  6189+                          ; Parameters:
  6190+                          ;		None
  6191+                          ; Auto variables:
  6192+                          ;		None
  6193+                          ; Return value:
  6194+                          ;		type: void 
  6195+                          ;		size: 0
  6196+                          ; Registers used:
  6197+                          ;		wreg, status,2, status,0, pclath, cstack
  6198+                          ; Tracked objects:
  6199+                          ;		On entry : 0/0
  6200+                          ;		On exit  : 0/0
  6201+                          ;		Unchanged: 0/0
  6202+                          ; Data sizes:
  6203+                          ;		Autos:    0
  6204+                          ;		Params:   0
  6205+                          ;		Temp:     0
  6206+                          ;		Total:    0
  6207+                          ; This function calls:
  6208+                          ;		_output_low
  6209+                          ;		_output_high
  6210+                          ; This function is called by:
  6211+                          ;		i1_main
  6212+                          ;		i1_target
  6213+                          ;		i1_navigation
  6214+                          ;		_isr
  6215+                          ; This function uses a non-reentrant model
  6216+                          ; 
  6217+                          	file	"test1.c"
  6218+                          	line	104
  6219+                          ;test1.c: 103: void forward()
  6220+                          ;test1.c: 104: {
  6221+                          	
  6222+ 0A0E                     i1_forward:	
  6223+                          	opt stack 6
  6224+                          ; Regs used in i1_forward: [wreg+status,2+statu
      +                          s,0+pclath+cstack]
  6225+                          	line	105
  6226+ 0A0E  3005               	movlw	(05h)
  6227+ 0A0F  1283               	bcf	status, 5	;RP0=0, select bank0
  6228+ 0A10  1303               	bcf	status, 6	;RP1=0, select bank0
  6229+                          	
  6230+ 0A11  00B3               	movwf	(?_output_low)
  6231+ 0A12  3043               	movlw	(043h)
  6232+ 0A13  120A  158A  249D   	fcall	_output_low
      +       120A  158A         
  6233+                          	line	106
  6234+ 0A18  3003               	movlw	(03h)
  6235+ 0A19  1283               	bcf	status, 5	;RP0=0, select bank0
  6236+ 0A1A  1303               	bcf	status, 6	;RP1=0, select bank0
  6237+                          	
  6238+ 0A1B  00B3               	movwf	(?_output_low)
  6239+ 0A1C  3043               	movlw	(043h)
  6240+ 0A1D  120A  158A  249D   	fcall	_output_low
      +       120A  158A         
  6241+                          	line	107
  6242+ 0A22  3004               	movlw	(04h)
  6243+ 0A23  1283               	bcf	status, 5	;RP0=0, select bank0
  6244+ 0A24  1303               	bcf	status, 6	;RP1=0, select bank0
  6245+                          	
  6246+ 0A25  00B3               	movwf	(?_output_high)
  6247+ 0A26  3043               	movlw	(043h)
  6248+ 0A27  120A  158A  2448   	fcall	_output_high
      +       120A  158A         
  6249+                          	line	108
  6250+ 0A2C  1003               	clrc
  6251+ 0A2D  1283               	bcf	status, 5	;RP0=0, select bank0
  6252+ 0A2E  1303               	bcf	status, 6	;RP1=0, select bank0
  6253+                          	
  6254+ 0A2F  3000               	movlw	0
  6255+ 0A30  1803               	btfsc	status,0
  6256+ 0A31  3001               	movlw	1
  6257+ 0A32  00B3               	movwf	(?_output_high)
  6258+ 0A33  3043               	movlw	(043h)
  6259+ 0A34  120A  158A  2448   	fcall	_output_high
      +       120A  158A         
  6260+                          	line	109
  6261+ 0A39  2A3A               	goto	i1l67
  6262+                          	line	110
  6263+ 0A3A                     i1l67:	
  6264+ 0A3A  0008               	return
  6265+                          ; =============== function i1_forward ends ====
      +                          ===========
  6266+                          
  6267+                          GLOBAL __end_ofi1_forward
  6268+ 0A3B                     	__end_ofi1_forward:
  6269+                          	FNSIZE	i1_forward,0,0
  6270+                          	signat	i1_forward,88
  6271+                          	psect	text228,local,class=CODE,delta=2
  6272+                          	global	intlevel1
  6273+                          	FNBREAK i1_pivotleft,intlevel1
  6274+                          	global	i1_pivotleft
  6275+                          	global	??i1_pivotleft
  6276+                          	global	?i1_pivotleft
  6277+                          
  6278+                          ; *************** function i1_pivotleft *******
      +                          ********
  6279+                          ; Defined at:
  6280+                          ;		line 122 in file "test1.c"
  6281+                          ; Parameters:
  6282+                          ;		None
  6283+                          ; Auto variables:
  6284+                          ;		None
  6285+                          ; Return value:
  6286+                          ;		type: void 
  6287+                          ;		size: 0
  6288+                          ; Registers used:
  6289+                          ;		wreg, status,2, status,0, pclath, cstack
  6290+                          ; Tracked objects:
  6291+                          ;		On entry : 0/0
  6292+                          ;		On exit  : 0/0
  6293+                          ;		Unchanged: 0/0
  6294+                          ; Data sizes:
  6295+                          ;		Autos:    0
  6296+                          ;		Params:   0
  6297+                          ;		Temp:     0
  6298+                          ;		Total:    0
  6299+                          ; This function calls:
  6300+                          ;		_output_low
  6301+                          ;		_output_high
  6302+                          ; This function is called by:
  6303+                          ;		i1_target
  6304+                          ;		i1_navigation
  6305+                          ;		_isr
  6306+                          ; This function uses a non-reentrant model
  6307+                          ; 
  6308+                          	file	"test1.c"
  6309+                          	line	122
  6310+                          ;test1.c: 121: void pivotleft()
  6311+                          ;test1.c: 122: {
  6312+                          	
  6313+ 0A3B                     i1_pivotleft:	
  6314+                          	opt stack 6
  6315+                          ; Regs used in i1_pivotleft: [wreg+status,2+sta
      +                          tus,0+pclath+cstack]
  6316+                          	line	123
  6317+ 0A3B  3005               	movlw	(05h)
  6318+ 0A3C  1283               	bcf	status, 5	;RP0=0, select bank0
  6319+ 0A3D  1303               	bcf	status, 6	;RP1=0, select bank0
  6320+                          	
  6321+ 0A3E  00B3               	movwf	(?_output_low)
  6322+ 0A3F  3043               	movlw	(043h)
  6323+ 0A40  120A  158A  249D   	fcall	_output_low
      +       120A  158A         
  6324+                          	line	124
  6325+ 0A45  3004               	movlw	(04h)
  6326+ 0A46  1283               	bcf	status, 5	;RP0=0, select bank0
  6327+ 0A47  1303               	bcf	status, 6	;RP1=0, select bank0
  6328+                          	
  6329+ 0A48  00B3               	movwf	(?_output_low)
  6330+ 0A49  3043               	movlw	(043h)
  6331+ 0A4A  120A  158A  249D   	fcall	_output_low
      +       120A  158A         
  6332+                          	line	125
  6333+ 0A4F  3003               	movlw	(03h)
  6334+ 0A50  1283               	bcf	status, 5	;RP0=0, select bank0
  6335+ 0A51  1303               	bcf	status, 6	;RP1=0, select bank0
  6336+                          	
  6337+ 0A52  00B3               	movwf	(?_output_high)
  6338+ 0A53  3043               	movlw	(043h)
  6339+ 0A54  120A  158A  2448   	fcall	_output_high
      +       120A  158A         
  6340+                          	line	126
  6341+ 0A59  1003               	clrc
  6342+ 0A5A  1283               	bcf	status, 5	;RP0=0, select bank0
  6343+ 0A5B  1303               	bcf	status, 6	;RP1=0, select bank0
  6344+                          	
  6345+ 0A5C  3000               	movlw	0
  6346+ 0A5D  1803               	btfsc	status,0
  6347+ 0A5E  3001               	movlw	1
  6348+ 0A5F  00B3               	movwf	(?_output_high)
  6349+ 0A60  3043               	movlw	(043h)
  6350+ 0A61  120A  158A  2448   	fcall	_output_high
      +       120A  158A         
  6351+                          	line	128
  6352+ 0A66  2A67               	goto	i1l69
  6353+                          	line	129
  6354+ 0A67                     i1l69:	
  6355+ 0A67  0008               	return
  6356+                          ; =============== function i1_pivotleft ends ==
      +                          =============
  6357+                          
  6358+                          GLOBAL __end_ofi1_pivotleft
  6359+ 0A68                     	__end_ofi1_pivotleft:
  6360+                          	FNSIZE	i1_pivotleft,0,0
  6361+                          	signat	i1_pivotleft,88
  6362+                          	psect	text229,local,class=CODE,delta=2
  6363+                          	global	intlevel1
  6364+                          	FNBREAK i1_pause,intlevel1
  6365+                          	global	i1_pause
  6366+                          	global	??i1_pause
  6367+                          	global	?i1_pause
  6368+                          
  6369+                          ; *************** function i1_pause ***********
      +                          ****
  6370+                          ; Defined at:
  6371+                          ;		line 736 in file "C:\Program Files (x86)\HI-
      +                          TECH Software\PICC\PRO\9.65\include\PICinit.c"
  6372+                          ; Parameters:
  6373+                          ;		time        	offs:   0	type: unsigned int 
  6374+                          ; Auto variables:
  6375+                          ;		cTimeTmp    	       	type: unsigned char 
  6376+                          ; Return value:
  6377+                          ;		type: void 
  6378+                          ;		size: 0
  6379+                          ; Registers used:
  6380+                          ;		wreg, status,2, status,0
  6381+                          ; Tracked objects:
  6382+                          ;		On entry : 300/0
  6383+                          ;		On exit  : 0/0
  6384+                          ;		Unchanged: 0/0
  6385+                          ; Data sizes:
  6386+                          ;		Autos:    1
  6387+                          ;		Params:   2
  6388+                          ;		Temp:     0
  6389+                          ;		Total:    3
  6390+                          ; This function calls:
  6391+                          ;		Nothing
  6392+                          ; This function is called by:
  6393+                          ;		i1_configurePIC
  6394+                          ;		i1_main
  6395+                          ;		i1_target
  6396+                          ;		i1_navigation
  6397+                          ;		_isr
  6398+                          ; This function uses a non-reentrant model
  6399+                          ; 
  6400+                          	file	"C:\Program Files (x86)\HI-TECH Software\
      +                          PICC\PRO\9.65\include\PICinit.c"
  6401+                          	line	736
  6402+                          ;PICinit.c: 728: void pause (unsigned int time)
  6403+                          ;PICinit.c: 736: {
  6404+                          	
  6405+ 01B4                     i1_pause:	
  6406+                          	opt stack 6
  6407+                          ; Regs used in i1_pause: [wreg+status,2+status,
      +                          0]
  6408+                          	line	739
  6409+ 01B4  29EC               	goto	i1l36
  6410+                          	
  6411+ 01B5                     i1l37:	
  6412+                          	line	741
  6413+                          	
  6414+ 01B5  3001               	movlw	high(0100h)
  6415+ 01B6  0234               	subwf	(i1_pause_time+1),w
  6416+ 01B7  3000               	movlw	low(0100h)
  6417+ 01B8  1903               	skipnz
  6418+ 01B9  0233               	subwf	(i1_pause_time),w
  6419+ 01BA  1803               	skipnc
  6420+ 01BB  29BD               	goto	i1u2311
  6421+ 01BC  29BE               	goto	i1u2310
  6422+ 01BD                     i1u2311:
  6423  01BD  29C1               	goto	i1l39
  6424  01BE                     i1u2310:
  6425                           	line	742
  6426                           	
  6427  01BE  0833               	movf	(i1_pause_time),w
  6428                           	
  6429  01BF  00B5               	movwf	(i1_pause_cTimeTmp)
  6430  01C0  29C3               	goto	i1l40
  6431                           	line	743
  6432                           	
  6433  01C1                     i1l39:	
  6434                           	line	744
  6435                           	
  6436  01C1  01B5               	clrf	(i1_pause_cTimeTmp)
  6437  01C2  03B5               	decf	(i1_pause_cTimeTmp),f
  6438                           	
  6439  01C3                     i1l40:	
  6440                           	line	745
  6441                           	
  6442  01C3  0835               	movf	(i1_pause_cTimeTmp),w
  6443                           	
  6444  01C4  0233               	subwf	(i1_pause_time),w
  6445                           	
  6446  01C5  00B3               	movwf	(i1_pause_time)
  6447  01C6  0834               	movf	(i1_pause_time+1),w
  6448  01C7  1C03               	skipc
  6449  01C8  0334               	decf	(i1_pause_time+1),w
  6450  01C9  00B4               	movwf	(i1_pause_time)+1
  6451                           	line	747
  6452  01CA  29E7               	goto	i1l41
  6453                           	
  6454  01CB                     i1l42:	
  6455                           	line	750
  6456                           # 750 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6457  01CB  1C78                   btfss _isr_active, 0 ;Check if pause is ope
                                 rating in the ISR ;#
  6458                           	line	751
  6459                           # 751 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6460  01CC  29E1                   goto $+21 ;If interrupts not enabled, bypas
                                 s TMR0 check ;#
  6461                           	line	752
  6462                           # 752 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6463  01CD  1A8B                   btfsc INTCON, 5 ;check if TMR0 interrupt en
                                 abled, 1=yes ;#
  6464                           	line	753
  6465                           # 753 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6466  01CE  1D0B                   btfss INTCON, 2 ;check if TMR0 interrupt oc
                                 curred, 1=yes ;#
  6467                           	line	754
  6468                           # 754 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6469  01CF  29E1                   goto $+18 ;TMR0 not enabled OR TMR0 interru
                                 pt did not occur, bypass servicing TMR0 ;#
  6470                           	line	755
  6471                           # 755 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6472                               ;**********If here, must be executing in th
                                 e interrupt and TMR0 needs servicing ;#
  6473                           	line	756
  6474                           # 756 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6475  01D0  0803                   movf status, w ;save Status to restore befo
                                 re exiting ;#
  6476                           	line	757
  6477                           # 757 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6478  01D1  00F3                   movwf _cStatusR ;possible need to preserve 
                                 Bank & 0x07 bits for 0x00 code ;#
  6479                           	line	758
  6480                           # 758 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6481  01D2  1283                   bcf status, 5 ;RP0=0, select bank0 for dire
                                 ct addressing ;#
  6482                           	line	759
  6483                           # 759 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6484  01D3  1303                   bcf status, 6 ;RP1=0, bank0 ;#
  6485                           	line	760
  6486                           # 760 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6487  01D4  1C5F                   btfss _rt_toggle, 0 ;Check if rt_clock shou
                                 ld be incremented ;#
  6488                           	line	761
  6489                           # 761 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6490  01D5  29DB                   goto $+6 ;#
  6491                           	line	762
  6492                           # 762 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6493  01D6  0FDD                   incfsz _rt_clock ;Increment rt_clock on eve
                                 ry other 50msec interrupt (i.e. 1/10 second) ;#
  6494                           	line	763
  6495                           # 763 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6496  01D7  29D9                   goto $+2 ;#
  6497                           	line	764
  6498                           # 764 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6499  01D8  0ADE                   incf _rt_clock+1 ;increment second byte on 
                                 overflow- 2 byte counter ;#
  6500                           	line	765
  6501                           # 765 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6502  01D9  01DF                   clrf _rt_toggle ;#
  6503                           	line	766
  6504                           # 766 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6505  01DA  29DC                   goto $+2 ;#
  6506                           	line	767
  6507                           # 767 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6508  01DB  145F                   bsf _rt_toggle, 0 ;#
  6509                           	line	768
  6510                           # 768 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6511  01DC  303D                   movlw 0x3D ;Reload TMR0 for 50msec countdow
                                 n, assumes 4Mhz clock ;#
  6512                           	line	769
  6513                           # 769 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6514  01DD  0081                   movwf _TMR0 ;#
  6515                           	line	770
  6516                           # 770 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6517  01DE  110B                   bcf INTCON, 2 ;#
  6518                           	line	771
  6519                           # 771 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6520  01DF  0873                   movf _cStatusR, w ;restore original Status 
                                 before exiting ;#
  6521                           	line	772
  6522                           # 772 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6523  01E0  0083                   movwf status ;possible need to preserve Ban
                                 k & 0x07 bits for 0x00 ;#
  6524                           	line	773
  6525                           # 773 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6526                               ;***********Done with TMR0 servicing, conti
                                 nue with pause ;#
  6527                           	line	774
  6528                           # 774 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6529  01E1  30F8                   movlw 0xf8 ;<-implements 1 msec delay, loop
                                  counter ;#
  6530                           	line	775
  6531                           # 775 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6532  01E2  3EFF                   addlw 0xff ;<-accounts for code overhead ;#
  6533                           	line	776
  6534                           # 776 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6535  01E3  1D03                   btfss status, 0x02 ;<-assumes a 4 Mhz clock
                                  ;#
  6536                           	line	777
  6537                           # 777 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6538  01E4  29E2                   goto $-2 ;<- ;#
  6539                           	psect	text229
  6540                           	line	779
  6541                           	
  6542                           	
  6543  01E5  3001               	movlw	low(01h)
  6544  01E6  02B5               	subwf	(i1_pause_cTimeTmp),f
  6545                           	line	780
  6546                           	
  6547  01E7                     i1l41:	
  6548                           	line	747
  6549                           	
  6550  01E7  08B5               	movf	(i1_pause_cTimeTmp),f
  6551  01E8  1D03               	skipz
  6552  01E9  29EB               	goto	i1u2321
  6553  01EA  29EC               	goto	i1u2320
  6554  01EB                     i1u2321:
  6555  01EB  29CB               	goto	i1l42
  6556  01EC                     i1u2320:
  6557                           	
  6558  01EC                     i1l43:	
  6559                           	line	781
  6560                           	
  6561  01EC                     i1l36:	
  6562                           	line	739
  6563                           	
  6564  01EC  0834               	movf	((i1_pause_time+1)),w
  6565  01ED  0433               	iorwf	((i1_pause_time)),w
  6566  01EE  1D03               	skipz
  6567  01EF  29F1               	goto	i1u2331
  6568  01F0  29F2               	goto	i1u2330
  6569  01F1                     i1u2331:
  6570  01F1  29B5               	goto	i1l37
  6571  01F2                     i1u2330:
  6572                           	
  6573  01F2                     i1l38:	
  6574                           	line	782
  6575  01F2  29F3               	goto	i1l35
  6576                           	line	784
  6577  01F3                     i1l35:	
  6578  01F3  0008               	return
  6579                           ; =============== function i1_pause ends ======
                                 =========
  6580                           
  6581                           GLOBAL __end_ofi1_pause
  6582  01F4                     	__end_ofi1_pause:
  6583                           	FNSIZE	i1_pause,1,2
  6584                           	signat	i1_pause,4216
  6585                           	psect	text230,local,class=CODE,delta=2
  6586                           	global	intlevel1
  6587                           	FNBREAK _save_data,intlevel1
  6588                           	global	_save_data
  6589                           	global	??_save_data
  6590                           	global	?_save_data
  6591                           
  6592                           ; *************** function _save_data *********
                                 ******
  6593                           ; Defined at:
  6594                           ;		line 798 in file "C:\Program Files (x86)\HI-
                                 TECH Software\PICC\PRO\9.65\include\PICinit.c"
  6595                           ; Parameters:
  6596                           ;		None
  6597                           ; Auto variables:
  6598                           ;		None
  6599                           ; Return value:
  6600                           ;		type: unsigned char 
  6601                           ;		size: 1
  6602                           ; Registers used:
  6603                           ;		wreg
  6604                           ; Tracked objects:
  6605                           ;		On entry : 300/0
  6606                           ;		On exit  : 0/0
  6607                           ;		Unchanged: 0/0
  6608                           ; Data sizes:
  6609                           ;		Autos:    0
  6610                           ;		Params:   0
  6611                           ;		Temp:     0
  6612                           ;		Total:    0
  6613                           ; This function calls:
  6614                           ;		Nothing
  6615                           ; This function is called by:
  6616                           ;		_isr
  6617                           ; This function uses a non-reentrant model
  6618                           ; 
  6619                           	file	"C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6620                           	line	798
  6621                           ;PICinit.c: 788: char save_data ()
  6622                           ;PICinit.c: 798: {
  6623                           	
  6624  0BD1                     _save_data:	
  6625                           	opt stack 6
  6626                           ; Regs used in _save_data: [wreg]
  6627                           	line	801
  6628                           # 801 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6629  0BD1  1283                bcf status, 5 ;RP0=0, select bank0 for direct 
                                 addressing ;#
  6630                           	line	802
  6631                           # 802 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6632  0BD2  1303                bcf status, 6 ;RP1=0, Bank change needed for b
                                 oth TMR0 and RB0 interrupts ;#
  6633                           	line	803
  6634                           # 803 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6635  0BD3  1A8B                btfsc INTCON, 5 ;check if TMR0 interrupt enabl
                                 ed, 1=yes ;#
  6636                           	line	804
  6637                           # 804 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6638  0BD4  1D0B                btfss INTCON, 2 ;check if TMR0 interrupt occur
                                 red, 1=yes ;#
  6639                           	line	805
  6640                           # 805 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6641  0BD5  2BE3                goto $+14 ;TMR0 not enabled OR TMR0 interrupt 
                                 did not occur, must be RBO interrupt ;#
  6642                           	line	806
  6643                           # 806 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6644  0BD6  1C5F                btfss _rt_toggle, 0 ;TMR0 interrupt occurred ;
                                 #
  6645                           	line	807
  6646                           # 807 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6647  0BD7  2BDD                goto $+6 ;#
  6648                           	line	808
  6649                           # 808 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6650  0BD8  0FDD                incfsz _rt_clock ;Increment rt_clock on every 
                                 other 50msec interrupt (i.e. 1/10 second) ;#
  6651                           	line	809
  6652                           # 809 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6653  0BD9  2BDB                goto $+2 ;#
  6654                           	line	810
  6655                           # 810 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6656  0BDA  0ADE                incf _rt_clock+1 ;increment second byte on ove
                                 rflow- 2 byte counter ;#
  6657                           	line	811
  6658                           # 811 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6659  0BDB  01DF                clrf _rt_toggle ;#
  6660                           	line	812
  6661                           # 812 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6662  0BDC  2BDE                goto $+2 ;#
  6663                           	line	813
  6664                           # 813 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6665  0BDD  145F                bsf _rt_toggle, 0 ;#
  6666                           	line	814
  6667                           # 814 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6668  0BDE  303D                movlw 0x3D ;Reload TMR0 for 50msec countdown, 
                                 assumes 4Mhz clock ;#
  6669                           	line	815
  6670                           # 815 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6671  0BDF  0081                movwf _TMR0 ;#
  6672                           	line	816
  6673                           # 816 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6674  0BE0  110B                bcf INTCON, 2 ;Clear TMR0 interrupt flag ;#
  6675                           	line	817
  6676                           # 817 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6677  0BE1  1C8B                btfss INTCON, 1 ;Now see if RB0 needs to be pr
                                 ocessed ;#
  6678                           	line	818
  6679                           # 818 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6680  0BE2  3400                retlw 0 ;Return 0 to indicate TMR0 interrupt w
                                 as serviced and no function data was saved ;#
  6681                           	line	820
  6682                           # 820 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6683  0BE3  1478                bsf _isr_active, 0 ;Set flag for pause() to kn
                                 ow ISR is executing ;#
  6684                           	line	821
  6685                           # 821 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6686  0BE4  0870                movf _cPortTmp,w ;save global variables. Still
                                  need to be on Bank 0 ;#
  6687                           	line	822
  6688                           # 822 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6689  0BE5  00E0                movwf _save1 ;#
  6690                           	line	823
  6691                           # 823 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6692  0BE6  0871                movf _cBitTmp,w ;#
  6693                           	line	824
  6694                           # 824 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6695  0BE7  00E1                movwf _save2 ;#
  6696                           	line	825
  6697                           # 825 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6698  0BE8  0872                movf _cBitPat,w ;#
  6699                           	line	826
  6700                           # 826 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6701  0BE9  00E2                movwf _save3 ;#
  6702                           	line	827
  6703                           # 827 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6704  0BEA  0873                movf _cStatusR,w ;#
  6705                           	line	828
  6706                           # 828 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6707  0BEB  00E3                movwf _save4 ;#
  6708                           	line	830
  6709                           # 830 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6710  0BEC  0823                movf _pause_time, w ;Save variable for pause f
                                 unction ;#
  6711                           	line	831
  6712                           # 831 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6713  0BED  00E4                movwf _save5 ;#
  6714                           	line	832
  6715                           # 832 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6716  0BEE  0824                movf _pause_time+1, w ;time is 2 bytes long ;#
  6717                           	line	833
  6718                           # 833 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6719  0BEF  00E5                movwf _save6 ;#
  6720                           	line	834
  6721                           # 834 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6722  0BF0  0825                movf _pause_cTimeTmp, w ;#
  6723                           	line	835
  6724                           # 835 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6725  0BF1  00E6                movwf _save7 ;#
  6726                           	line	836
  6727                           # 836 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6728  0BF2  0825                movf _read_adc_channel, w ;Save variable for r
                                 ead_adc function; ;#
  6729                           	line	837
  6730                           # 837 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6731  0BF3  00E7                movwf _save8 ;#
  6732                           	line	838
  6733                           # 838 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6734  0BF4  0834                movf _output_low_Port, w ;Save variables for o
                                 utput_low function ;#
  6735                           	line	839
  6736                           # 839 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6737  0BF5  00E8                movwf _save9 ;#
  6738                           	line	840
  6739                           # 840 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6740  0BF6  0833                movf _output_low_Bit, w ;#
  6741                           	line	841
  6742                           # 841 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6743  0BF7  00E9                movwf _save10 ;#
  6744                           	line	842
  6745                           # 842 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6746  0BF8  0834                movf _output_high_Port, w ;Save variables for 
                                 output_high function ;#
  6747                           	line	843
  6748                           # 843 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6749  0BF9  00EA                movwf _save11 ;#
  6750                           	line	844
  6751                           # 844 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6752  0BFA  0833                movf _output_high_Bit, w ;#
  6753                           	line	845
  6754                           # 845 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6755  0BFB  00EB                movwf _save12 ;#
  6756                           	line	846
  6757                           # 846 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6758  0BFC  0834                movf _read_input_Port, w ;Save variables for r
                                 ead_input function ;#
  6759                           	line	847
  6760                           # 847 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6761  0BFD  00EC                movwf _save13 ;#
  6762                           	line	848
  6763                           # 848 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6764  0BFE  0833                movf _read_input_Bit, w ;#
  6765                           	line	849
  6766                           # 849 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6767  0BFF  00ED                movwf _save14 ;#
  6768                           	line	850
  6769                           # 850 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6770  0C00  0824                movf _motorspeed_motornum, w ;Save variables f
                                 or motorspeed function ;#
  6771                           	line	851
  6772                           # 851 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6773  0C01  00EE                movwf _save15 ;#
  6774                           	line	852
  6775                           # 852 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6776  0C02  0823                movf _motorspeed_speed, w ;#
  6777                           	line	853
  6778                           # 853 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6779  0C03  00EF                movwf _save16 ;#
  6780                           	line	854
  6781                           # 854 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6782  0C04  3401                retlw 1 ;Return 1 to indicate RBO interrupt oc
                                 curred and function data was saved ;#
  6783                           	psect	text230
  6784                           	line	856
  6785                           ; First check and service Timer0 interrupt if r
                                 equired ;#
  6786                           ; Service RB0 interrupt ;#
  6787                           ;Due to forced early compile, these function va
                                 riables are on bank0- Consider using BANSELECT 
                                 with newer compiler ;#
  6788                           ;PICinit.c: 856: return 0;
  6789  0C05  3000               	movlw	(0)
  6790  0C06  2C07               	goto	i1l44
  6791                           	line	857
  6792                           ;PICinit.c: 857: }
  6793  0C07                     i1l44:	
  6794  0C07  0008               	return
  6795                           ; =============== function _save_data ends ====
                                 ===========
  6796                           
  6797                           GLOBAL __end_of_save_data
  6798  0C08                     	__end_of_save_data:
  6799                           	FNSIZE	_save_data,0,0
  6800                           	signat	_save_data,89
  6801                           	psect	text231,local,class=CODE,delta=2
  6802                           	global	intlevel1
  6803                           	FNBREAK _restore_data,intlevel1
  6804                           	global	_restore_data
  6805                           	global	??_restore_data
  6806                           	global	?_restore_data
  6807                           
  6808                           ; *************** function _restore_data ******
                                 *********
  6809                           ; Defined at:
  6810                           ;		line 867 in file "C:\Program Files (x86)\HI-
                                 TECH Software\PICC\PRO\9.65\include\PICinit.c"
  6811                           ; Parameters:
  6812                           ;		None
  6813                           ; Auto variables:
  6814                           ;		None
  6815                           ; Return value:
  6816                           ;		type: void 
  6817                           ;		size: 0
  6818                           ; Registers used:
  6819                           ;		None
  6820                           ; Tracked objects:
  6821                           ;		On entry : 0/0
  6822                           ;		On exit  : 0/0
  6823                           ;		Unchanged: 0/0
  6824                           ; Data sizes:
  6825                           ;		Autos:    0
  6826                           ;		Params:   0
  6827                           ;		Temp:     0
  6828                           ;		Total:    0
  6829                           ; This function calls:
  6830                           ;		Nothing
  6831                           ; This function is called by:
  6832                           ;		_isr
  6833                           ; This function uses a non-reentrant model
  6834                           ; 
  6835                           	file	"C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6836                           	line	867
  6837                           ;PICinit.c: 861: void restore_data ()
  6838                           ;PICinit.c: 867: {
  6839                           	
  6840  09E9                     _restore_data:	
  6841                           	opt stack 6
  6842                           ; Regs used in _restore_data: []
  6843                           	line	869
  6844                           # 869 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6845  09E9  1283                bcf status, 5 ;RP0=0, select bank0 for direct 
                                 addressing ;#
  6846                           	line	870
  6847                           # 870 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6848  09EA  1303                bcf status, 6 ;RP1=0, select bank0 ;#
  6849                           	line	871
  6850                           # 871 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6851  09EB  0860                movf _save1, w ;restore global variables ;#
  6852                           	line	872
  6853                           # 872 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6854  09EC  00F0                movwf _cPortTmp ;#
  6855                           	line	873
  6856                           # 873 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6857  09ED  0861                movf _save2, w ;#
  6858                           	line	874
  6859                           # 874 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6860  09EE  00F1                movwf _cBitTmp ;#
  6861                           	line	875
  6862                           # 875 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6863  09EF  0862                movf _save3, w ;#
  6864                           	line	876
  6865                           # 876 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6866  09F0  00F2                movwf _cBitPat ;#
  6867                           	line	877
  6868                           # 877 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6869  09F1  0863                movf _save4, w ;#
  6870                           	line	878
  6871                           # 878 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6872  09F2  00F3                movwf _cStatusR ;#
  6873                           	line	879
  6874                           # 879 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6875  09F3  0864                movf _save5, w ;Restore variables for pause fu
                                 nction ;#
  6876                           	line	880
  6877                           # 880 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6878  09F4  00A3                movwf _pause_time ;#
  6879                           	line	881
  6880                           # 881 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6881  09F5  0865                movf _save6, w ;time is 2 bytes long ;#
  6882                           	line	882
  6883                           # 882 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6884  09F6  00A4                movwf _pause_time+1 ;#
  6885                           	line	883
  6886                           # 883 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6887  09F7  0866                movf _save7, w ;#
  6888                           	line	884
  6889                           # 884 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6890  09F8  00A5                movwf _pause_cTimeTmp ;#
  6891                           	line	885
  6892                           # 885 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6893  09F9  0867                movf _save8, w ;Restore variable for read_adc 
                                 function ;#
  6894                           	line	886
  6895                           # 886 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6896  09FA  00A5                movwf _read_adc_channel ;#
  6897                           	line	887
  6898                           # 887 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6899  09FB  0868                movf _save9, w ;Restore variables for output_l
                                 ow function ;#
  6900                           	line	888
  6901                           # 888 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6902  09FC  00B4                movwf _output_low_Port ;#
  6903                           	line	889
  6904                           # 889 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6905  09FD  0869                movf _save10, w ;#
  6906                           	line	890
  6907                           # 890 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6908  09FE  00B3                movwf _output_low_Bit ;#
  6909                           	line	891
  6910                           # 891 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6911  09FF  086A                movf _save11, w ;Restore variables for output_
                                 high function ;#
  6912                           	line	892
  6913                           # 892 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6914  0A00  00B4                movwf _output_high_Port ;#
  6915                           	line	893
  6916                           # 893 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6917  0A01  086B                movf _save12, w ;#
  6918                           	line	894
  6919                           # 894 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6920  0A02  00B3                movwf _output_high_Bit ;#
  6921                           	line	895
  6922                           # 895 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6923  0A03  086C                movf _save13, w ;Restore variables for read_in
                                 put function ;#
  6924                           	line	896
  6925                           # 896 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6926  0A04  00B4                movwf _read_input_Port ;#
  6927                           	line	897
  6928                           # 897 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6929  0A05  086D                movf _save14, w ;#
  6930                           	line	898
  6931                           # 898 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6932  0A06  00B3                movwf _read_input_Bit ;#
  6933                           	line	899
  6934                           # 899 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6935  0A07  086E                movf _save15, w ;Restore variables for motorsp
                                 eed function ;#
  6936                           	line	900
  6937                           # 900 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6938  0A08  00A4                movwf _motorspeed_motornum ;#
  6939                           	line	901
  6940                           # 901 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6941  0A09  086F                movf _save16, w ;#
  6942                           	line	902
  6943                           # 902 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6944  0A0A  00A3                movwf _motorspeed_speed ;#
  6945                           	line	903
  6946                           # 903 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  6947  0A0B  01F8                clrf _isr_active ;reset flag used by pause() ;
                                 #
  6948                           	psect	text231
  6949                           	line	906
  6950                           ;PICinit.c: 906: return;
  6951  0A0C  2A0D               	goto	i1l45
  6952                           	line	907
  6953                           ;PICinit.c: 907: }
  6954  0A0D                     i1l45:	
  6955  0A0D  0008               	return
  6956                           ; =============== function _restore_data ends =
                                 ==============
  6957                           
  6958                           GLOBAL __end_of_restore_data
  6959  0A0E                     	__end_of_restore_data:
  6960                           	FNSIZE	_restore_data,0,0
  6961                           	signat	_restore_data,88
  6962                           	psect	text232,local,class=CODE,delta=2
  6963                           	global	intlevel1
  6964                           	FNBREAK _read_input,intlevel1
  6965                           	global	intlevel1
  6966                           	FNBREAK i1_read_adc,intlevel1
  6967                           	global	i1_read_adc
  6968                           	global	??i1_read_adc
  6969                           	global	?i1_read_adc
  6970                           
  6971                           ; *************** function i1_read_adc ********
                                 *******
  6972                           ; Defined at:
  6973                           ;		line 669 in file "C:\Program Files (x86)\HI-
                                 TECH Software\PICC\PRO\9.65\include\PICinit.c"
  6974                           ; Parameters:
  6975                           ;		channel     	reg:   wr	type: unsigned char 
  6976                           ; Auto variables:
  6977                           ;		channel     	       	type: unsigned char 
  6978                           ;		i           	       	type: unsigned char 
  6979                           ;		iADout      	       	type: unsigned int 
  6980                           ;		iVoltsSum   	       	type: unsigned int 
  6981                           ; Return value:
  6982                           ;		type: unsigned int 
  6983                           ;		size: 2
  6984                           ; Registers used:
  6985                           ;		wreg, status,2, status,0
  6986                           ; Tracked objects:
  6987                           ;		On entry : 0/0
  6988                           ;		On exit  : 0/0
  6989                           ;		Unchanged: 0/0
  6990                           ; Data sizes:
  6991                           ;		Autos:    6
  6992                           ;		Params:   2
  6993                           ;		Temp:     4
  6994                           ;		Total:   12
  6995                           ; This function calls:
  6996                           ;		Nothing
  6997                           ; This function is called by:
  6998                           ;		i1_configurePIC
  6999                           ;		i1_main
  7000                           ;		i1_target
  7001                           ;		i1_navigation
  7002                           ;		_isr
  7003                           ; This function uses a non-reentrant model
  7004                           ; 
  7005                           	file	"C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7006                           	line	669
  7007                           ;PICinit.c: 660: unsigned int read_adc (char ch
                                 annel)
  7008                           ;PICinit.c: 669: {
  7009                           	
  7010  0137                     i1_read_adc:	
  7011                           	opt stack 6
  7012                           ; Regs used in i1_read_adc: [wreg+status,2+stat
                                 us,0]
  7013                           ;i1_read_adc_channel stored from wreg
  7014  0137  1283               	bcf	status, 5	;RP0=0, select bank0
  7015  0138  1303               	bcf	status, 6	;RP1=0, select bank0
  7016                           	
  7017  0139  00B5               	movwf	(i1_read_adc_channel)
  7018                           	line	670
  7019  013A  3000               	movlw	low(0)
  7020                           	
  7021  013B  00B9               	movwf	(i1_read_adc_iVoltsSum)
  7022  013C  3000               	movlw	high(0)
  7023  013D  00BA               	movwf	((i1_read_adc_iVoltsSum))+1
  7024  013E  3000               	movlw	low(0)
  7025                           	
  7026  013F  00B7               	movwf	(i1_read_adc_iADout)
  7027  0140  3000               	movlw	high(0)
  7028  0141  00B8               	movwf	((i1_read_adc_iADout))+1
  7029                           	line	671
  7030  0142  1003               	clrc
  7031                           	
  7032  0143  3000               	movlw	0
  7033  0144  1803               	btfsc	status,0
  7034  0145  3001               	movlw	1
  7035  0146  00B6               	movwf	(i1_read_adc_i)
  7036                           	line	673
  7037  0147  3006               	movlw	(06h)
  7038                           	
  7039  0148  0235               	subwf	(i1_read_adc_channel),w
  7040  0149  1C03               	skipc
  7041  014A  294C               	goto	i1u2641
  7042  014B  294D               	goto	i1u2640
  7043  014C                     i1u2641:
  7044  014C  2953               	goto	i1l29
  7045  014D                     i1u2640:
  7046                           	line	675
  7047                           	
  7048  014D  15F9               	bsf	(121)+(3/8),(3)&7
  7049                           	line	676
  7050  014E  30FF               	movlw	low(0FFFFh)
  7051                           	
  7052  014F  00B3               	movwf	(?i1_read_adc)
  7053  0150  30FF               	movlw	high(0FFFFh)
  7054  0151  00B4               	movwf	((?i1_read_adc))+1
  7055  0152  29B3               	goto	i1l28
  7056                           	line	678
  7057                           	
  7058  0153                     i1l29:	
  7059                           	line	680
  7060                           	
  7061  0153  0835               	movf	(i1_read_adc_channel),w
  7062  0154  3A05               	xorlw	05h
  7063  0155  1D03               	skipz
  7064  0156  2958               	goto	i1u2651
  7065  0157  2959               	goto	i1u2650
  7066  0158                     i1u2651:
  7067  0158  295B               	goto	i1l30
  7068  0159                     i1u2650:
  7069                           	line	681
  7070  0159  3004               	movlw	(04h)
  7071                           	
  7072  015A  00B5               	movwf	(i1_read_adc_channel)
  7073                           	
  7074  015B                     i1l31:	
  7075                           	line	682
  7076                           	
  7077  015B                     i1l30:	
  7078                           	line	683
  7079  015B  120B               	bcf	(92/8),(92)&7
  7080                           	line	685
  7081                           	
  7082  015C  0835               	movf	(i1_read_adc_channel),w
  7083  015D  00AB               	movwf	(??_read_adc+6+0)
  7084                           	
  7085  015E  082B               	movf	(??_read_adc+6+0),w
  7086  015F  00F0               	movwf	(112)
  7087                           	line	688
  7088                           # 688 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7089  0160  0803                  movf status, w ;save Status to restore befor
                                 e exiting ;#
  7090                           	line	689
  7091                           # 689 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7092  0161  00F3                  movwf _cStatusR ;possible need to preserve B
                                 ank & 0x07 bits for 0x00 code ;#
  7093                           	line	690
  7094                           # 690 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7095  0162  1683                  bsf status, 5 ;RP0=1, select bank1 for direc
                                 t addressing ;#
  7096                           	line	691
  7097                           # 691 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7098  0163  1303                  bcf status, 6 ;RP1=0, select bank1 ;#
  7099                           	line	692
  7100                           # 692 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7101  0164  30C2                  movlw 0xC2 ;configure A/D port ;#
  7102                           	line	693
  7103                           # 693 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7104  0165  009F                  movwf 0x1F ;1Fh is 7 bit address of ADCON1 o
                                 n Bank1 ;#
  7105                           	line	694
  7106                           # 694 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7107  0166  1003                  clrc ;#
  7108                           	line	695
  7109                           # 695 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7110  0167  0DF0                  rlf _g_cTmp1, f ;variable g_cTmp1 (location 
                                 70h) can be accessed regardless ;#
  7111                           	line	696
  7112                           # 696 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7113  0168  0DF0                  rlf _g_cTmp1, f ;of bank selected. Rotate ch
                                 annel (0-4) to be in position ;#
  7114                           	line	697
  7115                           # 697 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7116  0169  0DF0                  rlf _g_cTmp1, f ;required by register ADCON0
                                  ;#
  7117                           	line	698
  7118                           # 698 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7119  016A  3041                  movlw 0x41 ;#
  7120                           	line	699
  7121                           # 699 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7122  016B  0470                  iorwf _g_cTmp1, w ;#
  7123                           	line	700
  7124                           # 700 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7125  016C  1283                  bcf status, 5 ;RP0=0, select Bank0 for direc
                                 t addressing ;#
  7126                           	line	701
  7127                           # 701 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7128  016D  009F                  movwf _ADCON0 ;ADCON0 is on Bank0 ;#
  7129                           	line	702
  7130                           # 702 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7131  016E  30FF                  movlw 0xff ;implements 2 millisecond delay ;
                                 #
  7132                           	line	703
  7133                           # 703 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7134  016F  3EFF                  addlw 0xff ;to allow for acquisition time ;#
  7135                           	line	704
  7136                           # 704 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7137  0170  0000                  nop ;0xff (255)* 8us = 2.04ms ;#
  7138                           	line	705
  7139                           # 705 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7140  0171  0000                  nop ;#
  7141                           	line	706
  7142                           # 706 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7143  0172  0000                  nop ;#
  7144                           	line	707
  7145                           # 707 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7146  0173  0000                  nop ;#
  7147                           	line	708
  7148                           # 708 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7149  0174  1D03                  btfss status, 0x02 ;#
  7150                           	line	709
  7151                           # 709 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7152  0175  296F                  goto $-6 ;#
  7153                           	line	710
  7154                           # 710 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7155  0176  151F                  bsf _ADCON0, 2 ;start A/D convesion (We are 
                                 on Bank 0) ;#
  7156                           	line	711
  7157                           # 711 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7158  0177  191F                  btfsc _ADCON0, 2 ;#
  7159                           	line	712
  7160                           # 712 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7161  0178  2977                  goto $-1 ;wait for conversion to complete ;#
  7162                           	line	713
  7163                           # 713 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7164  0179  0873                  movf _cStatusR, w ;restore original Status b
                                 efore exiting ;#
  7165                           	line	714
  7166                           # 714 "C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.c"
  7167  017A  0083                  movwf status ;possible need to preserve Bank
                                  & 0x07 bits for 0x00 code ;#
  7168                           	psect	text232
  7169                           	line	717
  7170  017B  1683               	bsf	status, 5	;RP0=1, select bank1
  7171  017C  1303               	bcf	status, 6	;RP1=0, select bank1
  7172                           	
  7173  017D  1283               	bcf	status, 5	;RP0=0, select bank0
  7174  017E  1303               	bcf	status, 6	;RP1=0, select bank0
  7175                           	
  7176  017F  081E               	movf	(30),w	;volatile
  7177  0180  00AB               	movwf	(??_read_adc+6+0)
  7178  0181  01AC               	clrf	(??_read_adc+6+0+1)
  7179  0182  3008               	movlw	08h
  7180  0183  00AD               	movwf	(??_read_adc+8+0)
  7181  0184                     i1u2665:
  7182  0184  1003               	clrc
  7183  0185  0DAB               	rlf	(??_read_adc+6+0),f
  7184  0186  0DAC               	rlf	(??_read_adc+6+1),f
  7185  0187  0BAD               	decfsz	(??_read_adc+8+0),f
  7186  0188  2984               	goto	i1u2665
  7187  0189  1683               	bsf	status, 5	;RP0=1, select bank1
  7188  018A  1303               	bcf	status, 6	;RP1=0, select bank1
  7189  018B  081E               	movf	(158)^080h,w	;volatile
  7190  018C  1283               	bcf	status, 5	;RP0=0, select bank0
  7191  018D  1303               	bcf	status, 6	;RP1=0, select bank0
  7192  018E  072B               	addwf	0+(??_read_adc+6+0),w
  7193                           	
  7194  018F  00B7               	movwf	(i1_read_adc_iADout)
  7195  0190  3000               	movlw	0
  7196  0191  1803               	skipnc
  7197  0192  3001               	movlw	1
  7198  0193  072C               	addwf	1+(??_read_adc+6+0),w
  7199  0194  00B8               	movwf	1+(i1_read_adc_iADout)
  7200                           	line	719
  7201                           	
  7202  0195  01B6               	clrf	(i1_read_adc_i)
  7203  0196  1403               	bsf	status,0
  7204  0197  0DB6               	rlf	(i1_read_adc_i),f
  7205  0198  2999               	goto	i1l32
  7206                           	line	720
  7207                           	
  7208  0199                     i1l32:	
  7209                           	
  7210                           	
  7211  0199  0837               	movf	(i1_read_adc_iADout),w
  7212  019A  0739               	addwf	(i1_read_adc_iVoltsSum),w
  7213                           	
  7214  019B  00B9               	movwf	(i1_read_adc_iVoltsSum)
  7215  019C  0838               	movf	(i1_read_adc_iADout+1),w
  7216  019D  1803               	skipnc
  7217  019E  0A38               	incf	(i1_read_adc_iADout+1),w
  7218  019F  073A               	addwf	(i1_read_adc_iVoltsSum+1),w
  7219  01A0  00BA               	movwf	1+(i1_read_adc_iVoltsSum)
  7220                           	line	719
  7221  01A1  3001               	movlw	(01h)
  7222  01A2  00AB               	movwf	(??_read_adc+6+0)
  7223                           	
  7224  01A3  082B               	movf	(??_read_adc+6+0),w
  7225  01A4  07B6               	addwf	(i1_read_adc_i),f
  7226  01A5  3032               	movlw	(032h)
  7227                           	
  7228  01A6  0236               	subwf	(i1_read_adc_i),w
  7229  01A7  1C03               	skipc
  7230  01A8  29AA               	goto	i1u2681
  7231  01A9  29AB               	goto	i1u2680
  7232  01AA                     i1u2681:
  7233  01AA  2999               	goto	i1l32
  7234  01AB                     i1u2680:
  7235                           	
  7236  01AB                     i1l33:	
  7237                           	line	721
  7238  01AB  160B               	bsf	(92/8),(92)&7
  7239                           	line	722
  7240                           	
  7241                           	
  7242  01AC  083A               	movf	(i1_read_adc_iVoltsSum+1),w
  7243  01AD  01B4               	clrf	(?i1_read_adc+1)
  7244  01AE  07B4               	addwf	(?i1_read_adc+1)
  7245  01AF  0839               	movf	(i1_read_adc_iVoltsSum),w
  7246  01B0  01B3               	clrf	(?i1_read_adc)
  7247  01B1  07B3               	addwf	(?i1_read_adc)
  7248                           
  7249  01B2  29B3               	goto	i1l28
  7250                           	line	724
  7251  01B3                     i1l28:	
  7252  01B3  0008               	return
  7253                           ; =============== function i1_read_adc ends ===
                                 ============
  7254                           
  7255                           GLOBAL __end_ofi1_read_adc
  7256  01B4                     	__end_ofi1_read_adc:
  7257                           	FNSIZE	i1_read_adc,10,2
  7258                           	signat	i1_read_adc,4218
  7259                           	psect	text233,local,class=CODE,delta=2
  7260                           	global	intlevel1
  7261                           	FNBREAK _output_low,intlevel1
  7262                           	global	intlevel1
  7263                           	FNBREAK _output_high,intlevel1
  7264                           	FNCALL	_main,_configurePIC
  7265                           	FNCALL	_main,_motorspeed
  7266                           	FNCALL	_main,_output_high
  7267                           	FNCALL	_main,_read_adc
  7268                           	FNCALL	_main,_pause
  7269                           	FNCALL	_main,_output_low
  7270                           	FNCALL	_main,_navigation
  7271                           	FNCALL	_main,_target
  7272                           	FNCALL	_main,_forward
  7273                           	FNCALL	_main,_motorsoff
  7274                           	FNCALL	_navigation,_read_adc
  7275                           	FNCALL	_navigation,_forward
  7276                           	FNCALL	_navigation,_pivotleft
  7277                           	FNCALL	_navigation,_pivotright
  7278                           	FNCALL	_navigation,_pause
  7279                           	FNCALL	_navigation,_motorsoff
  7280                           	FNCALL	_navigation,_motorspeed
  7281                           	FNCALL	_navigation,___lwdiv
  7282                           	FNCALL	_target,_read_adc
  7283                           	FNCALL	_target,_forward
  7284                           	FNCALL	_target,_pivotleft
  7285                           	FNCALL	_target,_pivotright
  7286                           	FNCALL	_target,_pause
  7287                           	FNCALL	_target,_motorsoff
  7288                           	FNCALL	_target,_motorspeed
  7289                           	FNCALL	_target,___lwdiv
  7290                           	FNCALL	_configurePIC,_output_low
  7291                           	FNCALL	_configurePIC,_output_high
  7292                           	FNCALL	_configurePIC,_read_input
  7293                           	FNCALL	_configurePIC,_read_adc
  7294                           	FNCALL	_configurePIC,_putdata
  7295                           	FNCALL	_configurePIC,_motorspeed
  7296                           	FNCALL	_configurePIC,_pause
  7297                           	FNCALL	_configurePIC,_version
  7298                           	FNCALL	_pivotleft,_output_low
  7299                           	FNCALL	_pivotleft,_output_high
  7300                           	FNCALL	_forward,_output_low
  7301                           	FNCALL	_forward,_output_high
  7302                           	FNCALL	_motorsoff,_output_low
  7303                           	FNCALL	_pivotright,_output_low
  7304                           	FNCALL	_pivotright,_output_high
  7305                           	FNCALL	_version,_putchar
  7306                           	FNROOT	_main
  7307                           	FNCALL	_isr,_save_data
  7308                           	FNCALL	_isr,i1_pause
  7309                           	FNCALL	_isr,_restore_data
  7310                           	FNCALL	_isr,_output_low
  7311                           	FNCALL	_isr,_read_input
  7312                           	FNCALL	_isr,_output_high
  7313                           	FNCALL	_isr,_backward
  7314                           	FNCALL	_isr,i1_motorsoff
  7315                           	FNCALL	_isr,i1_pivotleft
  7316                           	FNCALL	_isr,i1_forward
  7317                           	FNCALL	_isr,i1_pivotright
  7318                           	FNCALL	_isr,i1_read_adc
  7319                           	FNCALL	_backward,_output_low
  7320                           	FNCALL	_backward,_output_high
  7321                           	FNCALL	i1_pivotright,_output_low
  7322                           	FNCALL	i1_pivotright,_output_high
  7323                           	FNCALL	i1_motorsoff,_output_low
  7324                           	FNCALL	i1_forward,_output_low
  7325                           	FNCALL	i1_forward,_output_high
  7326                           	FNCALL	i1_pivotleft,_output_low
  7327                           	FNCALL	i1_pivotleft,_output_high
  7328                           	FNCALL	intlevel1,_isr
  7329                           	global	intlevel1
  7330                           	FNROOT	intlevel1
  7331                           	global	_ver
  7332                           	psect	rbss_0,class=BANK0,space=1
  7333                           
  7334                           	DABS	1,64,1	;_ver
  7335  0000                     	_ver	set	0x40
  7336                           
  7337                           	psect	idata,class=CODE,delta=2,space=0
  7338                           	file	"C:\Program Files (x86)\HI-TECH Software\
                                 PICC\PRO\9.65\include\PICinit.h"
  7339                           	line	95
  7340                           
  7341                           ;initializer for _ver
  7342  0222  3401               	retlw	(STR_1-__stringbase)&0ffh
  7343                           	psect	strings,class=CODE,delta=2,reloc=256
  7344                           	global	stringdir,stringtab,__stringbase,string
                                 jmp
  7345  0200                     stringtab:
  7346  0200  00FE               	movwf	(btemp)&07Fh
  7347  0201  1FFE               	btfss	(btemp)&07Fh,7
  7348  0202  2A08               	goto	stringcode
  7349  0203  1383               	bcf	status,7
  7350  0204  187E               	btfsc	btemp&7Fh,0
  7351  0205  1783               	bsf	status,7
  7352  0206  0800               	movf	indf,w
  7353  0207  0008               	return
  7354  0208                     stringcode:
  7355  0208  0804               	movf	fsr,w
  7356  0209                     stringdir:
  7357  0209  00FE               movwf btemp&07Fh
  7358  020A  3002               movlw high(stringdir)
  7359  020B  008A               movwf pclath
  7360  020C  087E               movf btemp&07Fh,w
  7361  020D                     stringjmp:
  7362  020D  0782               	addwf pc
  7363  020E                     __stringbase:
  7364  020E  3400               	retlw	0
  7365                           	global	_sensor0
  7366                           	psect	rbss_1,class=BANK1,space=1
  7367                           
  7368                           	DABS	1,230,10	;_sensor0
  7369  0000                     	_sensor0	set	0xE6
  7370                           
  7371                           	global	_sensor2
  7372                           	psect	rbss_0
  7373                           
  7374                           	DABS	1,71,10	;_sensor2
  7375  0000                     	_sensor2	set	0x47
  7376                           
  7377                           	global	_a
  7378                           
  7379                           	DABS	1,81,2	;_a
  7380  0000                     	_a	set	0x51
  7381                           
  7382                           	global	_average
  7383                           
  7384                           	DABS	1,69,2	;_average
  7385  0000                     	_average	set	0x45
  7386                           
  7387                           	global	_b
  7388                           	psect	rbss_1
  7389                           
  7390                           	DABS	1,228,2	;_b
  7391  0000                     	_b	set	0xE4
  7392                           
  7393                           	global	_color
  7394                           	psect	rbss_0
  7395                           
  7396                           	DABS	1,65,2	;_color
  7397  0000                     	_color	set	0x41
  7398                           
  7399                           	global	_floor
  7400                           
  7401                           	DABS	1,67,2	;_floor
  7402  0000                     	_floor	set	0x43
  7403                           
  7404                           	global	_i
  7405                           
  7406                           	DABS	1,83,2	;_i
  7407  0000                     	_i	set	0x53
  7408                           
  7409                           	global	_sensor
  7410                           
  7411                           	DABS	1,91,2	;_sensor
  7412  0000                     	_sensor	set	0x5B
  7413                           
  7414                           	global	_sensor1
  7415                           	psect	common,class=COMMON,space=1
  7416                           
  7417                           	DABS	1,122,2	;_sensor1
  7418  0000                     	_sensor1	set	0x7A
  7419                           
  7420                           	global	_sensor3
  7421                           
  7422                           	DABS	1,124,2	;_sensor3
  7423  0000                     	_sensor3	set	0x7C
  7424                           
  7425                           	global	_sensor5
  7426                           	psect	rbss_0
  7427                           
  7428                           	DABS	1,89,2	;_sensor5
  7429  0000                     	_sensor5	set	0x59
  7430                           
  7431                           	global	_sum
  7432                           
  7433                           	DABS	1,85,2	;_sum
  7434  0000                     	_sum	set	0x55
  7435                           
  7436                           	global	_g_cSpeedMotor1
  7437                           
  7438                           	DABS	1,87,1	;_g_cSpeedMotor1
  7439  0000                     	_g_cSpeedMotor1	set	0x57
  7440                           
  7441                           	global	_g_cSpeedMotor2
  7442                           
  7443                           	DABS	1,88,1	;_g_cSpeedMotor2
  7444  0000                     	_g_cSpeedMotor2	set	0x58
  7445                           
  7446                           	global	_g_iArg
  7447                           	psect	common
  7448                           
  7449                           	DABS	1,116,2	;_g_iArg
  7450  0000                     	_g_iArg	set	0x74
  7451                           
  7452                           	global	_g_iTmp
  7453                           
  7454                           	DABS	1,118,2	;_g_iTmp
  7455  0000                     	_g_iTmp	set	0x76
  7456                           
  7457                           	global	_rt_clock
  7458                           	psect	rbss_0
  7459                           
  7460                           	DABS	1,93,2	;_rt_clock
  7461  0000                     	_rt_clock	set	0x5D
  7462                           
  7463                           	global	_ADCON0
  7464  0000                     	_ADCON0	set	0x1F
  7465                           
  7466                           	global	_ADCON1
  7467  0000                     	_ADCON1	set	0x9F
  7468                           
  7469                           	global	_ADRESH
  7470  0000                     	_ADRESH	set	0x1E
  7471                           
  7472                           	global	_ADRESL
  7473  0000                     	_ADRESL	set	0x9E
  7474                           
  7475                           	global	_CCP1CON
  7476  0000                     	_CCP1CON	set	0x17
  7477                           
  7478                           	global	_CCP2CON
  7479  0000                     	_CCP2CON	set	0x1D
  7480                           
  7481                           	global	_CCPR1H
  7482                           	global	_CCPR1H
  7483  0000                     	_CCPR1H	set	0x16
  7484                           
  7485                           	global	_CCPR1L
  7486  0000                     	_CCPR1L	set	0x15
  7487                           
  7488                           	global	_CCPR2H
  7489                           	global	_CCPR2H
  7490  0000                     	_CCPR2H	set	0x1C
  7491                           
  7492                           	global	_CCPR2L
  7493  0000                     	_CCPR2L	set	0x1B
  7494                           
  7495                           	global	_CMCON
  7496                           	global	_CMCON
  7497  0000                     	_CMCON	set	0x9C
  7498                           
  7499                           	global	_CVRCON
  7500                           	global	_CVRCON
  7501  0000                     	_CVRCON	set	0x9D
  7502                           
  7503                           	global	_EEADR
  7504                           	global	_EEADR
  7505  0000                     	_EEADR	set	0x10D
  7506                           
  7507                           	global	_EEADRH
  7508                           	global	_EEADRH
  7509  0000                     	_EEADRH	set	0x10F
  7510                           
  7511                           	global	_EEADRL
  7512                           	global	_EEADRL
  7513  0000                     	_EEADRL	set	0x10D
  7514                           
  7515                           	global	_EECON1
  7516                           	global	_EECON1
  7517  0000                     	_EECON1	set	0x18C
  7518                           
  7519                           	global	_EECON2
  7520                           	global	_EECON2
  7521  0000                     	_EECON2	set	0x18D
  7522                           
  7523                           	global	_EEDATA
  7524                           	global	_EEDATA
  7525  0000                     	_EEDATA	set	0x10C
  7526                           
  7527                           	global	_EEDATH
  7528                           	global	_EEDATH
  7529  0000                     	_EEDATH	set	0x10E
  7530                           
  7531                           	global	_FSR
  7532                           	global	_FSR
  7533  0000                     	_FSR	set	0x4
  7534                           
  7535                           	global	_INDF
  7536                           	global	_INDF
  7537  0000                     	_INDF	set	0x0
  7538                           
  7539                           	global	_INTCON
  7540                           	global	_INTCON
  7541  0000                     	_INTCON	set	0xB
  7542                           
  7543                           	global	_OPTION
  7544  0000                     	_OPTION	set	0x81
  7545                           
  7546                           	global	_PCL
  7547                           	global	_PCL
  7548  0000                     	_PCL	set	0x2
  7549                           
  7550                           	global	_PCLATH
  7551                           	global	_PCLATH
  7552  0000                     	_PCLATH	set	0xA
  7553                           
  7554                           	global	_PCON
  7555                           	global	_PCON
  7556  0000                     	_PCON	set	0x8E
  7557                           
  7558                           	global	_PIE1
  7559                           	global	_PIE1
  7560  0000                     	_PIE1	set	0x8C
  7561                           
  7562                           	global	_PIE2
  7563                           	global	_PIE2
  7564  0000                     	_PIE2	set	0x8D
  7565                           
  7566                           	global	_PIR1
  7567                           	global	_PIR1
  7568  0000                     	_PIR1	set	0xC
  7569                           
  7570                           	global	_PIR2
  7571                           	global	_PIR2
  7572  0000                     	_PIR2	set	0xD
  7573                           
  7574                           	global	_PORTA
  7575  0000                     	_PORTA	set	0x5
  7576                           
  7577                           	global	_PORTB
  7578  0000                     	_PORTB	set	0x6
  7579                           
  7580                           	global	_PORTC
  7581  0000                     	_PORTC	set	0x7
  7582                           
  7583                           	global	_PORTD
  7584  0000                     	_PORTD	set	0x8
  7585                           
  7586                           	global	_PORTE
  7587  0000                     	_PORTE	set	0x9
  7588                           
  7589                           	global	_PR2
  7590  0000                     	_PR2	set	0x92
  7591                           
  7592                           	global	_RCREG
  7593                           	global	_RCREG
  7594  0000                     	_RCREG	set	0x1A
  7595                           
  7596                           	global	_RCSTA
  7597  0000                     	_RCSTA	set	0x18
  7598                           
  7599                           	global	_SPBRG
  7600  0000                     	_SPBRG	set	0x99
  7601                           
  7602                           	global	_SSPADD
  7603                           	global	_SSPADD
  7604  0000                     	_SSPADD	set	0x93
  7605                           
  7606                           	global	_SSPBUF
  7607                           	global	_SSPBUF
  7608  0000                     	_SSPBUF	set	0x13
  7609                           
  7610                           	global	_SSPCON
  7611                           	global	_SSPCON
  7612  0000                     	_SSPCON	set	0x14
  7613                           
  7614                           	global	_SSPCON2
  7615                           	global	_SSPCON2
  7616  0000                     	_SSPCON2	set	0x91
  7617                           
  7618                           	global	_SSPSTAT
  7619                           	global	_SSPSTAT
  7620  0000                     	_SSPSTAT	set	0x94
  7621                           
  7622                           	global	_STATUS
  7623                           	global	_STATUS
  7624  0000                     	_STATUS	set	0x3
  7625                           
  7626                           	global	_T1CON
  7627                           	global	_T1CON
  7628  0000                     	_T1CON	set	0x10
  7629                           
  7630                           	global	_T2CON
  7631  0000                     	_T2CON	set	0x12
  7632                           
  7633                           	global	_TMR0
  7634  0000                     	_TMR0	set	0x1
  7635                           
  7636                           	global	_TMR1H
  7637                           	global	_TMR1H
  7638  0000                     	_TMR1H	set	0xF
  7639                           
  7640                           	global	_TMR1L
  7641                           	global	_TMR1L
  7642  0000                     	_TMR1L	set	0xE
  7643                           
  7644                           	global	_TMR2
  7645                           	global	_TMR2
  7646  0000                     	_TMR2	set	0x11
  7647                           
  7648                           	global	_TRISA
  7649  0000                     	_TRISA	set	0x85
  7650                           
  7651                           	global	_TRISB
  7652  0000                     	_TRISB	set	0x86
  7653                           
  7654                           	global	_TRISC
  7655  0000                     	_TRISC	set	0x87
  7656                           
  7657                           	global	_TRISD
  7658  0000                     	_TRISD	set	0x88
  7659                           
  7660                           	global	_TRISE
  7661  0000                     	_TRISE	set	0x89
  7662                           
  7663                           	global	_TXREG
  7664  0000                     	_TXREG	set	0x19
  7665                           
  7666                           	global	_TXSTA
  7667  0000                     	_TXSTA	set	0x98
  7668                           
  7669                           	global	_cBitPat
  7670                           	psect	common
  7671                           
  7672                           	DABS	1,114,1	;_cBitPat
  7673  0000                     	_cBitPat	set	0x72
  7674                           
  7675                           	global	_cBitTmp
  7676                           
  7677                           	DABS	1,113,1	;_cBitTmp
  7678  0000                     	_cBitTmp	set	0x71
  7679                           
  7680                           	global	_cInputErr
  7681                           
  7682                           	DABS	1,121,1	;_cInputErr
  7683  0000                     	_cInputErr	set	0x79
  7684                           
  7685                           	global	_cPortTmp
  7686                           
  7687                           	DABS	1,112,1	;_cPortTmp
  7688  0000                     	_cPortTmp	set	0x70
  7689                           
  7690                           	global	_cStatusR
  7691                           	global	_cStatusR
  7692                           
  7693                           	DABS	1,115,1	;_cStatusR
  7694  0000                     	_cStatusR	set	0x73
  7695                           
  7696                           	global	_g_cTmp1
  7697                           
  7698                           	DABS	1,112,1	;_g_cTmp1
  7699  0000                     	_g_cTmp1	set	0x70
  7700                           
  7701                           	global	_g_cTmp2
  7702                           	global	_g_cTmp2
  7703                           
  7704                           	DABS	1,113,1	;_g_cTmp2
  7705  0000                     	_g_cTmp2	set	0x71
  7706                           
  7707                           	global	_g_cTmp3
  7708                           	global	_g_cTmp3
  7709                           
  7710                           	DABS	1,114,1	;_g_cTmp3
  7711  0000                     	_g_cTmp3	set	0x72
  7712                           
  7713                           	global	_isr_active
  7714                           
  7715                           	DABS	1,120,1	;_isr_active
  7716  0000                     	_isr_active	set	0x78
  7717                           
  7718                           	global	_rt_toggle
  7719                           	psect	rbss_0
  7720                           
  7721                           	DABS	1,95,1	;_rt_toggle
  7722  0000                     	_rt_toggle	set	0x5F
  7723                           
  7724                           	global	_save1
  7725                           	global	_save1
  7726                           
  7727                           	DABS	1,96,1	;_save1
  7728  0000                     	_save1	set	0x60
  7729                           
  7730                           	global	_save10
  7731                           	global	_save10
  7732                           
  7733                           	DABS	1,105,1	;_save10
  7734  0000                     	_save10	set	0x69
  7735                           
  7736                           	global	_save11
  7737                           	global	_save11
  7738                           
  7739                           	DABS	1,106,1	;_save11
  7740  0000                     	_save11	set	0x6A
  7741                           
  7742                           	global	_save12
  7743                           	global	_save12
  7744                           
  7745                           	DABS	1,107,1	;_save12
  7746  0000                     	_save12	set	0x6B
  7747                           
  7748                           	global	_save13
  7749                           	global	_save13
  7750                           
  7751                           	DABS	1,108,1	;_save13
  7752  0000                     	_save13	set	0x6C
  7753                           
  7754                           	global	_save14
  7755                           	global	_save14
  7756                           
  7757                           	DABS	1,109,1	;_save14
  7758  0000                     	_save14	set	0x6D
  7759                           
  7760                           	global	_save15
  7761                           	global	_save15
  7762                           
  7763                           	DABS	1,110,1	;_save15
  7764  0000                     	_save15	set	0x6E
  7765                           
  7766                           	global	_save16
  7767                           	global	_save16
  7768                           
  7769                           	DABS	1,111,1	;_save16
  7770  0000                     	_save16	set	0x6F
  7771                           
  7772                           	global	_save2
  7773                           	global	_save2
  7774                           
  7775                           	DABS	1,97,1	;_save2
  7776  0000                     	_save2	set	0x61
  7777                           
  7778                           	global	_save3
  7779                           	global	_save3
  7780                           
  7781                           	DABS	1,98,1	;_save3
  7782  0000                     	_save3	set	0x62
  7783                           
  7784                           	global	_save4
  7785                           	global	_save4
  7786                           
  7787                           	DABS	1,99,1	;_save4
  7788  0000                     	_save4	set	0x63
  7789                           
  7790                           	global	_save5
  7791                           	global	_save5
  7792                           
  7793                           	DABS	1,100,1	;_save5
  7794  0000                     	_save5	set	0x64
  7795                           
  7796                           	global	_save6
  7797                           	global	_save6
  7798                           
  7799                           	DABS	1,101,1	;_save6
  7800  0000                     	_save6	set	0x65
  7801                           
  7802                           	global	_save7
  7803                           	global	_save7
  7804                           
  7805                           	DABS	1,102,1	;_save7
  7806  0000                     	_save7	set	0x66
  7807                           
  7808                           	global	_save8
  7809                           	global	_save8
  7810                           
  7811                           	DABS	1,103,1	;_save8
  7812  0000                     	_save8	set	0x67
  7813                           
  7814                           	global	_save9
  7815                           	global	_save9
  7816                           
  7817                           	DABS	1,104,1	;_save9
  7818  0000                     	_save9	set	0x68
  7819                           
  7820                           	global	_ACKDT
  7821                           	global	_ACKDT
  7822  0000                     	_ACKDT	set	0x48D	;byte address: 0x91
  7823                           
  7824                           	global	_ACKEN
  7825                           	global	_ACKEN
  7826  0000                     	_ACKEN	set	0x48C	;byte address: 0x91
  7827                           
  7828                           	global	_ACKSTAT
  7829                           	global	_ACKSTAT
  7830  0000                     	_ACKSTAT	set	0x48E	;byte address: 0x91
  7831                           
  7832                           	global	_ADCS0
  7833                           	global	_ADCS0
  7834  0000                     	_ADCS0	set	0xFE	;byte address: 0x1F
  7835                           
  7836                           	global	_ADCS1
  7837                           	global	_ADCS1
  7838  0000                     	_ADCS1	set	0xFF	;byte address: 0x1F
  7839                           
  7840                           	global	_ADCS2
  7841                           	global	_ADCS2
  7842  0000                     	_ADCS2	set	0x4FE	;byte address: 0x9F
  7843                           
  7844                           	global	_ADDEN
  7845                           	global	_ADDEN
  7846  0000                     	_ADDEN	set	0xC3	;byte address: 0x18
  7847                           
  7848                           	global	_ADFM
  7849                           	global	_ADFM
  7850  0000                     	_ADFM	set	0x4FF	;byte address: 0x9F
  7851                           
  7852                           	global	_ADGO
  7853                           	global	_ADGO
  7854  0000                     	_ADGO	set	0xFA	;byte address: 0x1F
  7855                           
  7856                           	global	_ADIE
  7857                           	global	_ADIE
  7858  0000                     	_ADIE	set	0x466	;byte address: 0x8C
  7859                           
  7860                           	global	_ADIF
  7861                           	global	_ADIF
  7862  0000                     	_ADIF	set	0x66	;byte address: 0xC
  7863                           
  7864                           	global	_ADON
  7865                           	global	_ADON
  7866  0000                     	_ADON	set	0xF8	;byte address: 0x1F
  7867                           
  7868                           	global	_BCLIE
  7869                           	global	_BCLIE
  7870  0000                     	_BCLIE	set	0x46B	;byte address: 0x8D
  7871                           
  7872                           	global	_BCLIF
  7873                           	global	_BCLIF
  7874  0000                     	_BCLIF	set	0x6B	;byte address: 0xD
  7875                           
  7876                           	global	_BF
  7877                           	global	_BF
  7878  0000                     	_BF	set	0x4A0	;byte address: 0x94
  7879                           
  7880                           	global	_BOR
  7881                           	global	_BOR
  7882  0000                     	_BOR	set	0x470	;byte address: 0x8E
  7883                           
  7884                           	global	_BRGH
  7885                           	global	_BRGH
  7886  0000                     	_BRGH	set	0x4C2	;byte address: 0x98
  7887                           
  7888                           	global	_C1INV
  7889                           	global	_C1INV
  7890  0000                     	_C1INV	set	0x4E4	;byte address: 0x9C
  7891                           
  7892                           	global	_C1OUT
  7893                           	global	_C1OUT
  7894  0000                     	_C1OUT	set	0x4E6	;byte address: 0x9C
  7895                           
  7896                           	global	_C2INV
  7897                           	global	_C2INV
  7898  0000                     	_C2INV	set	0x4E5	;byte address: 0x9C
  7899                           
  7900                           	global	_C2OUT
  7901                           	global	_C2OUT
  7902  0000                     	_C2OUT	set	0x4E7	;byte address: 0x9C
  7903                           
  7904                           	global	_CARRY
  7905                           	global	_CARRY
  7906  0000                     	_CARRY	set	0x18	;byte address: 0x3
  7907                           
  7908                           	global	_CCP1IE
  7909                           	global	_CCP1IE
  7910  0000                     	_CCP1IE	set	0x462	;byte address: 0x8C
  7911                           
  7912                           	global	_CCP1IF
  7913                           	global	_CCP1IF
  7914  0000                     	_CCP1IF	set	0x62	;byte address: 0xC
  7915                           
  7916                           	global	_CCP1M0
  7917                           	global	_CCP1M0
  7918  0000                     	_CCP1M0	set	0xB8	;byte address: 0x17
  7919                           
  7920                           	global	_CCP1M1
  7921                           	global	_CCP1M1
  7922  0000                     	_CCP1M1	set	0xB9	;byte address: 0x17
  7923                           
  7924                           	global	_CCP1M2
  7925                           	global	_CCP1M2
  7926  0000                     	_CCP1M2	set	0xBA	;byte address: 0x17
  7927                           
  7928                           	global	_CCP1M3
  7929                           	global	_CCP1M3
  7930  0000                     	_CCP1M3	set	0xBB	;byte address: 0x17
  7931                           
  7932                           	global	_CCP1X
  7933                           	global	_CCP1X
  7934  0000                     	_CCP1X	set	0xBD	;byte address: 0x17
  7935                           
  7936                           	global	_CCP1Y
  7937                           	global	_CCP1Y
  7938  0000                     	_CCP1Y	set	0xBC	;byte address: 0x17
  7939                           
  7940                           	global	_CCP2IE
  7941                           	global	_CCP2IE
  7942  0000                     	_CCP2IE	set	0x468	;byte address: 0x8D
  7943                           
  7944                           	global	_CCP2IF
  7945                           	global	_CCP2IF
  7946  0000                     	_CCP2IF	set	0x68	;byte address: 0xD
  7947                           
  7948                           	global	_CCP2M0
  7949                           	global	_CCP2M0
  7950  0000                     	_CCP2M0	set	0xE8	;byte address: 0x1D
  7951                           
  7952                           	global	_CCP2M1
  7953                           	global	_CCP2M1
  7954  0000                     	_CCP2M1	set	0xE9	;byte address: 0x1D
  7955                           
  7956                           	global	_CCP2M2
  7957                           	global	_CCP2M2
  7958  0000                     	_CCP2M2	set	0xEA	;byte address: 0x1D
  7959                           
  7960                           	global	_CCP2M3
  7961                           	global	_CCP2M3
  7962  0000                     	_CCP2M3	set	0xEB	;byte address: 0x1D
  7963                           
  7964                           	global	_CCP2X
  7965                           	global	_CCP2X
  7966  0000                     	_CCP2X	set	0xED	;byte address: 0x1D
  7967                           
  7968                           	global	_CCP2Y
  7969                           	global	_CCP2Y
  7970  0000                     	_CCP2Y	set	0xEC	;byte address: 0x1D
  7971                           
  7972                           	global	_CHS0
  7973                           	global	_CHS0
  7974  0000                     	_CHS0	set	0xFB	;byte address: 0x1F
  7975                           
  7976                           	global	_CHS1
  7977                           	global	_CHS1
  7978  0000                     	_CHS1	set	0xFC	;byte address: 0x1F
  7979                           
  7980                           	global	_CHS2
  7981                           	global	_CHS2
  7982  0000                     	_CHS2	set	0xFD	;byte address: 0x1F
  7983                           
  7984                           	global	_CIS
  7985                           	global	_CIS
  7986  0000                     	_CIS	set	0x4E3	;byte address: 0x9C
  7987                           
  7988                           	global	_CKE
  7989                           	global	_CKE
  7990  0000                     	_CKE	set	0x4A6	;byte address: 0x94
  7991                           
  7992                           	global	_CKP
  7993                           	global	_CKP
  7994  0000                     	_CKP	set	0xA4	;byte address: 0x14
  7995                           
  7996                           	global	_CM0
  7997                           	global	_CM0
  7998  0000                     	_CM0	set	0x4E0	;byte address: 0x9C
  7999                           
  8000                           	global	_CM1
  8001                           	global	_CM1
  8002  0000                     	_CM1	set	0x4E1	;byte address: 0x9C
  8003                           
  8004                           	global	_CM2
  8005                           	global	_CM2
  8006  0000                     	_CM2	set	0x4E2	;byte address: 0x9C
  8007                           
  8008                           	global	_CMIE
  8009                           	global	_CMIE
  8010  0000                     	_CMIE	set	0x46E	;byte address: 0x8D
  8011                           
  8012                           	global	_CMIF
  8013                           	global	_CMIF
  8014  0000                     	_CMIF	set	0x6E	;byte address: 0xD
  8015                           
  8016                           	global	_CREN
  8017                           	global	_CREN
  8018  0000                     	_CREN	set	0xC4	;byte address: 0x18
  8019                           
  8020                           	global	_CSRC
  8021                           	global	_CSRC
  8022  0000                     	_CSRC	set	0x4C7	;byte address: 0x98
  8023                           
  8024                           	global	_CVR0
  8025                           	global	_CVR0
  8026  0000                     	_CVR0	set	0x4E8	;byte address: 0x9D
  8027                           
  8028                           	global	_CVR1
  8029                           	global	_CVR1
  8030  0000                     	_CVR1	set	0x4E9	;byte address: 0x9D
  8031                           
  8032                           	global	_CVR2
  8033                           	global	_CVR2
  8034  0000                     	_CVR2	set	0x4EA	;byte address: 0x9D
  8035                           
  8036                           	global	_CVR3
  8037                           	global	_CVR3
  8038  0000                     	_CVR3	set	0x4EB	;byte address: 0x9D
  8039                           
  8040                           	global	_CVREN
  8041                           	global	_CVREN
  8042  0000                     	_CVREN	set	0x4EF	;byte address: 0x9D
  8043                           
  8044                           	global	_CVROE
  8045                           	global	_CVROE
  8046  0000                     	_CVROE	set	0x4EE	;byte address: 0x9D
  8047                           
  8048                           	global	_CVRR
  8049                           	global	_CVRR
  8050  0000                     	_CVRR	set	0x4ED	;byte address: 0x9D
  8051                           
  8052                           	global	_DA
  8053                           	global	_DA
  8054  0000                     	_DA	set	0x4A5	;byte address: 0x94
  8055                           
  8056                           	global	_DC
  8057                           	global	_DC
  8058  0000                     	_DC	set	0x19	;byte address: 0x3
  8059                           
  8060                           	global	_EEIE
  8061                           	global	_EEIE
  8062  0000                     	_EEIE	set	0x46C	;byte address: 0x8D
  8063                           
  8064                           	global	_EEIF
  8065                           	global	_EEIF
  8066  0000                     	_EEIF	set	0x6C	;byte address: 0xD
  8067                           
  8068                           	global	_EEPGD
  8069                           	global	_EEPGD
  8070  0000                     	_EEPGD	set	0xC67	;byte address: 0x18C
  8071                           
  8072                           	global	_FERR
  8073                           	global	_FERR
  8074  0000                     	_FERR	set	0xC2	;byte address: 0x18
  8075                           
  8076                           	global	_GCEN
  8077                           	global	_GCEN
  8078  0000                     	_GCEN	set	0x48F	;byte address: 0x91
  8079                           
  8080                           	global	_GIE
  8081  0000                     	_GIE	set	0x5F	;byte address: 0xB
  8082                           
  8083                           	global	_GODONE
  8084                           	global	_GODONE
  8085  0000                     	_GODONE	set	0xFA	;byte address: 0x1F
  8086                           
  8087                           	global	_IBF
  8088                           	global	_IBF
  8089  0000                     	_IBF	set	0x44F	;byte address: 0x89
  8090                           
  8091                           	global	_IBOV
  8092                           	global	_IBOV
  8093  0000                     	_IBOV	set	0x44D	;byte address: 0x89
  8094                           
  8095                           	global	_INTE
  8096  0000                     	_INTE	set	0x5C	;byte address: 0xB
  8097                           
  8098                           	global	_INTEDG
  8099                           	global	_INTEDG
  8100  0000                     	_INTEDG	set	0x40E	;byte address: 0x81
  8101                           
  8102                           	global	_INTF
  8103  0000                     	_INTF	set	0x59	;byte address: 0xB
  8104                           
  8105                           	global	_IRP
  8106                           	global	_IRP
  8107  0000                     	_IRP	set	0x1F	;byte address: 0x3
  8108                           
  8109                           	global	_OBF
  8110                           	global	_OBF
  8111  0000                     	_OBF	set	0x44E	;byte address: 0x89
  8112                           
  8113                           	global	_OERR
  8114                           	global	_OERR
  8115  0000                     	_OERR	set	0xC1	;byte address: 0x18
  8116                           
  8117                           	global	_PCFG0
  8118                           	global	_PCFG0
  8119  0000                     	_PCFG0	set	0x4F8	;byte address: 0x9F
  8120                           
  8121                           	global	_PCFG1
  8122                           	global	_PCFG1
  8123  0000                     	_PCFG1	set	0x4F9	;byte address: 0x9F
  8124                           
  8125                           	global	_PCFG2
  8126                           	global	_PCFG2
  8127  0000                     	_PCFG2	set	0x4FA	;byte address: 0x9F
  8128                           
  8129                           	global	_PCFG3
  8130                           	global	_PCFG3
  8131  0000                     	_PCFG3	set	0x4FB	;byte address: 0x9F
  8132                           
  8133                           	global	_PD
  8134                           	global	_PD
  8135  0000                     	_PD	set	0x1B	;byte address: 0x3
  8136                           
  8137                           	global	_PEIE
  8138                           	global	_PEIE
  8139  0000                     	_PEIE	set	0x5E	;byte address: 0xB
  8140                           
  8141                           	global	_PEN
  8142                           	global	_PEN
  8143  0000                     	_PEN	set	0x48A	;byte address: 0x91
  8144                           
  8145                           	global	_POR
  8146                           	global	_POR
  8147  0000                     	_POR	set	0x471	;byte address: 0x8E
  8148                           
  8149                           	global	_PS0
  8150                           	global	_PS0
  8151  0000                     	_PS0	set	0x408	;byte address: 0x81
  8152                           
  8153                           	global	_PS1
  8154                           	global	_PS1
  8155  0000                     	_PS1	set	0x409	;byte address: 0x81
  8156                           
  8157                           	global	_PS2
  8158                           	global	_PS2
  8159  0000                     	_PS2	set	0x40A	;byte address: 0x81
  8160                           
  8161                           	global	_PSA
  8162                           	global	_PSA
  8163  0000                     	_PSA	set	0x40B	;byte address: 0x81
  8164                           
  8165                           	global	_PSPIE
  8166                           	global	_PSPIE
  8167  0000                     	_PSPIE	set	0x467	;byte address: 0x8C
  8168                           
  8169                           	global	_PSPIF
  8170                           	global	_PSPIF
  8171  0000                     	_PSPIF	set	0x67	;byte address: 0xC
  8172                           
  8173                           	global	_PSPMODE
  8174                           	global	_PSPMODE
  8175  0000                     	_PSPMODE	set	0x44C	;byte address: 0x89
  8176                           
  8177                           	global	_RA0
  8178                           	global	_RA0
  8179  0000                     	_RA0	set	0x28	;byte address: 0x5
  8180                           
  8181                           	global	_RA1
  8182                           	global	_RA1
  8183  0000                     	_RA1	set	0x29	;byte address: 0x5
  8184                           
  8185                           	global	_RA2
  8186                           	global	_RA2
  8187  0000                     	_RA2	set	0x2A	;byte address: 0x5
  8188                           
  8189                           	global	_RA3
  8190                           	global	_RA3
  8191  0000                     	_RA3	set	0x2B	;byte address: 0x5
  8192                           
  8193                           	global	_RA4
  8194                           	global	_RA4
  8195  0000                     	_RA4	set	0x2C	;byte address: 0x5
  8196                           
  8197                           	global	_RA5
  8198                           	global	_RA5
  8199  0000                     	_RA5	set	0x2D	;byte address: 0x5
  8200                           
  8201                           	global	_RB0
  8202                           	global	_RB0
  8203  0000                     	_RB0	set	0x30	;byte address: 0x6
  8204                           
  8205                           	global	_RB1
  8206                           	global	_RB1
  8207  0000                     	_RB1	set	0x31	;byte address: 0x6
  8208                           
  8209                           	global	_RB2
  8210                           	global	_RB2
  8211  0000                     	_RB2	set	0x32	;byte address: 0x6
  8212                           
  8213                           	global	_RB3
  8214                           	global	_RB3
  8215  0000                     	_RB3	set	0x33	;byte address: 0x6
  8216                           
  8217                           	global	_RB4
  8218                           	global	_RB4
  8219  0000                     	_RB4	set	0x34	;byte address: 0x6
  8220                           
  8221                           	global	_RB5
  8222                           	global	_RB5
  8223  0000                     	_RB5	set	0x35	;byte address: 0x6
  8224                           
  8225                           	global	_RB6
  8226                           	global	_RB6
  8227  0000                     	_RB6	set	0x36	;byte address: 0x6
  8228                           
  8229                           	global	_RB7
  8230                           	global	_RB7
  8231  0000                     	_RB7	set	0x37	;byte address: 0x6
  8232                           
  8233                           	global	_RBIE
  8234                           	global	_RBIE
  8235  0000                     	_RBIE	set	0x5B	;byte address: 0xB
  8236                           
  8237                           	global	_RBIF
  8238                           	global	_RBIF
  8239  0000                     	_RBIF	set	0x58	;byte address: 0xB
  8240                           
  8241                           	global	_RBPU
  8242                           	global	_RBPU
  8243  0000                     	_RBPU	set	0x40F	;byte address: 0x81
  8244                           
  8245                           	global	_RC0
  8246                           	global	_RC0
  8247  0000                     	_RC0	set	0x38	;byte address: 0x7
  8248                           
  8249                           	global	_RC1
  8250                           	global	_RC1
  8251  0000                     	_RC1	set	0x39	;byte address: 0x7
  8252                           
  8253                           	global	_RC2
  8254                           	global	_RC2
  8255  0000                     	_RC2	set	0x3A	;byte address: 0x7
  8256                           
  8257                           	global	_RC3
  8258                           	global	_RC3
  8259  0000                     	_RC3	set	0x3B	;byte address: 0x7
  8260                           
  8261                           	global	_RC4
  8262                           	global	_RC4
  8263  0000                     	_RC4	set	0x3C	;byte address: 0x7
  8264                           
  8265                           	global	_RC5
  8266                           	global	_RC5
  8267  0000                     	_RC5	set	0x3D	;byte address: 0x7
  8268                           
  8269                           	global	_RC6
  8270                           	global	_RC6
  8271  0000                     	_RC6	set	0x3E	;byte address: 0x7
  8272                           
  8273                           	global	_RC7
  8274                           	global	_RC7
  8275  0000                     	_RC7	set	0x3F	;byte address: 0x7
  8276                           
  8277                           	global	_RCEN
  8278                           	global	_RCEN
  8279  0000                     	_RCEN	set	0x48B	;byte address: 0x91
  8280                           
  8281                           	global	_RCIE
  8282                           	global	_RCIE
  8283  0000                     	_RCIE	set	0x465	;byte address: 0x8C
  8284                           
  8285                           	global	_RCIF
  8286                           	global	_RCIF
  8287  0000                     	_RCIF	set	0x65	;byte address: 0xC
  8288                           
  8289                           	global	_RD
  8290                           	global	_RD
  8291  0000                     	_RD	set	0xC60	;byte address: 0x18C
  8292                           
  8293                           	global	_RD0
  8294                           	global	_RD0
  8295  0000                     	_RD0	set	0x40	;byte address: 0x8
  8296                           
  8297                           	global	_RD1
  8298                           	global	_RD1
  8299  0000                     	_RD1	set	0x41	;byte address: 0x8
  8300                           
  8301                           	global	_RD2
  8302                           	global	_RD2
  8303  0000                     	_RD2	set	0x42	;byte address: 0x8
  8304                           
  8305                           	global	_RD3
  8306                           	global	_RD3
  8307  0000                     	_RD3	set	0x43	;byte address: 0x8
  8308                           
  8309                           	global	_RD4
  8310                           	global	_RD4
  8311  0000                     	_RD4	set	0x44	;byte address: 0x8
  8312                           
  8313                           	global	_RD5
  8314                           	global	_RD5
  8315  0000                     	_RD5	set	0x45	;byte address: 0x8
  8316                           
  8317                           	global	_RD6
  8318                           	global	_RD6
  8319  0000                     	_RD6	set	0x46	;byte address: 0x8
  8320                           
  8321                           	global	_RD7
  8322                           	global	_RD7
  8323  0000                     	_RD7	set	0x47	;byte address: 0x8
  8324                           
  8325                           	global	_RE0
  8326                           	global	_RE0
  8327  0000                     	_RE0	set	0x48	;byte address: 0x9
  8328                           
  8329                           	global	_RE1
  8330                           	global	_RE1
  8331  0000                     	_RE1	set	0x49	;byte address: 0x9
  8332                           
  8333                           	global	_RE2
  8334                           	global	_RE2
  8335  0000                     	_RE2	set	0x4A	;byte address: 0x9
  8336                           
  8337                           	global	_RP0
  8338                           	global	_RP0
  8339  0000                     	_RP0	set	0x1D	;byte address: 0x3
  8340                           
  8341                           	global	_RP1
  8342                           	global	_RP1
  8343  0000                     	_RP1	set	0x1E	;byte address: 0x3
  8344                           
  8345                           	global	_RSEN
  8346                           	global	_RSEN
  8347  0000                     	_RSEN	set	0x489	;byte address: 0x91
  8348                           
  8349                           	global	_RW
  8350                           	global	_RW
  8351  0000                     	_RW	set	0x4A2	;byte address: 0x94
  8352                           
  8353                           	global	_RX9
  8354                           	global	_RX9
  8355  0000                     	_RX9	set	0xC6	;byte address: 0x18
  8356                           
  8357                           	global	_RX9D
  8358                           	global	_RX9D
  8359  0000                     	_RX9D	set	0xC0	;byte address: 0x18
  8360                           
  8361                           	global	_SEN
  8362                           	global	_SEN
  8363  0000                     	_SEN	set	0x488	;byte address: 0x91
  8364                           
  8365                           	global	_SMP
  8366                           	global	_SMP
  8367  0000                     	_SMP	set	0x4A7	;byte address: 0x94
  8368                           
  8369                           	global	_SPEN
  8370                           	global	_SPEN
  8371  0000                     	_SPEN	set	0xC7	;byte address: 0x18
  8372                           
  8373                           	global	_SREN
  8374                           	global	_SREN
  8375  0000                     	_SREN	set	0xC5	;byte address: 0x18
  8376                           
  8377                           	global	_SSPEN
  8378                           	global	_SSPEN
  8379  0000                     	_SSPEN	set	0xA5	;byte address: 0x14
  8380                           
  8381                           	global	_SSPIE
  8382                           	global	_SSPIE
  8383  0000                     	_SSPIE	set	0x463	;byte address: 0x8C
  8384                           
  8385                           	global	_SSPIF
  8386                           	global	_SSPIF
  8387  0000                     	_SSPIF	set	0x63	;byte address: 0xC
  8388                           
  8389                           	global	_SSPM0
  8390                           	global	_SSPM0
  8391  0000                     	_SSPM0	set	0xA0	;byte address: 0x14
  8392                           
  8393                           	global	_SSPM1
  8394                           	global	_SSPM1
  8395  0000                     	_SSPM1	set	0xA1	;byte address: 0x14
  8396                           
  8397                           	global	_SSPM2
  8398                           	global	_SSPM2
  8399  0000                     	_SSPM2	set	0xA2	;byte address: 0x14
  8400                           
  8401                           	global	_SSPM3
  8402                           	global	_SSPM3
  8403  0000                     	_SSPM3	set	0xA3	;byte address: 0x14
  8404                           
  8405                           	global	_SSPOV
  8406                           	global	_SSPOV
  8407  0000                     	_SSPOV	set	0xA6	;byte address: 0x14
  8408                           
  8409                           	global	_START
  8410                           	global	_START
  8411  0000                     	_START	set	0x4A3	;byte address: 0x94
  8412                           
  8413                           	global	_STOP
  8414                           	global	_STOP
  8415  0000                     	_STOP	set	0x4A4	;byte address: 0x94
  8416                           
  8417                           	global	_SYNC
  8418                           	global	_SYNC
  8419  0000                     	_SYNC	set	0x4C4	;byte address: 0x98
  8420                           
  8421                           	global	_T0CS
  8422                           	global	_T0CS
  8423  0000                     	_T0CS	set	0x40D	;byte address: 0x81
  8424                           
  8425                           	global	_T0IE
  8426                           	global	_T0IE
  8427  0000                     	_T0IE	set	0x5D	;byte address: 0xB
  8428                           
  8429                           	global	_T0IF
  8430                           	global	_T0IF
  8431  0000                     	_T0IF	set	0x5A	;byte address: 0xB
  8432                           
  8433                           	global	_T0SE
  8434                           	global	_T0SE
  8435  0000                     	_T0SE	set	0x40C	;byte address: 0x81
  8436                           
  8437                           	global	_T1CKPS0
  8438                           	global	_T1CKPS0
  8439  0000                     	_T1CKPS0	set	0x84	;byte address: 0x10
  8440                           
  8441                           	global	_T1CKPS1
  8442                           	global	_T1CKPS1
  8443  0000                     	_T1CKPS1	set	0x85	;byte address: 0x10
  8444                           
  8445                           	global	_T1OSCEN
  8446                           	global	_T1OSCEN
  8447  0000                     	_T1OSCEN	set	0x83	;byte address: 0x10
  8448                           
  8449                           	global	_T1SYNC
  8450                           	global	_T1SYNC
  8451  0000                     	_T1SYNC	set	0x82	;byte address: 0x10
  8452                           
  8453                           	global	_T2CKPS0
  8454                           	global	_T2CKPS0
  8455  0000                     	_T2CKPS0	set	0x90	;byte address: 0x12
  8456                           
  8457                           	global	_T2CKPS1
  8458                           	global	_T2CKPS1
  8459  0000                     	_T2CKPS1	set	0x91	;byte address: 0x12
  8460                           
  8461                           	global	_TMR0IE
  8462                           	global	_TMR0IE
  8463  0000                     	_TMR0IE	set	0x5D	;byte address: 0xB
  8464                           
  8465                           	global	_TMR0IF
  8466                           	global	_TMR0IF
  8467  0000                     	_TMR0IF	set	0x5A	;byte address: 0xB
  8468                           
  8469                           	global	_TMR1CS
  8470                           	global	_TMR1CS
  8471  0000                     	_TMR1CS	set	0x81	;byte address: 0x10
  8472                           
  8473                           	global	_TMR1IE
  8474                           	global	_TMR1IE
  8475  0000                     	_TMR1IE	set	0x460	;byte address: 0x8C
  8476                           
  8477                           	global	_TMR1IF
  8478                           	global	_TMR1IF
  8479  0000                     	_TMR1IF	set	0x60	;byte address: 0xC
  8480                           
  8481                           	global	_TMR1ON
  8482                           	global	_TMR1ON
  8483  0000                     	_TMR1ON	set	0x80	;byte address: 0x10
  8484                           
  8485                           	global	_TMR2IE
  8486                           	global	_TMR2IE
  8487  0000                     	_TMR2IE	set	0x461	;byte address: 0x8C
  8488                           
  8489                           	global	_TMR2IF
  8490                           	global	_TMR2IF
  8491  0000                     	_TMR2IF	set	0x61	;byte address: 0xC
  8492+                          
  8493+                          	global	_TMR2ON
  8494+                          	global	_TMR2ON
  8495+ 0000                     	_TMR2ON	set	0x92	;byte address: 0x12
  8496+                          
  8497+                          	global	_TO
  8498+                          	global	_TO
  8499+ 0000                     	_TO	set	0x1C	;byte address: 0x3
  8500+                          
  8501+                          	global	_TOUTPS0
  8502+                          	global	_TOUTPS0
  8503+ 0000                     	_TOUTPS0	set	0x93	;byte address: 0x12
  8504+                          
  8505+                          	global	_TOUTPS1
  8506+                          	global	_TOUTPS1
  8507+ 0000                     	_TOUTPS1	set	0x94	;byte address: 0x12
  8508+                          
  8509+                          	global	_TOUTPS2
  8510+                          	global	_TOUTPS2
  8511+ 0000                     	_TOUTPS2	set	0x95	;byte address: 0x12
  8512+                          
  8513+                          	global	_TOUTPS3
  8514+                          	global	_TOUTPS3
  8515+ 0000                     	_TOUTPS3	set	0x96	;byte address: 0x12
  8516+                          
  8517+                          	global	_TRISA0
  8518+                          	global	_TRISA0
  8519+ 0000                     	_TRISA0	set	0x428	;byte address: 0x85
  8520+                          
  8521+                          	global	_TRISA1
  8522+                          	global	_TRISA1
  8523+ 0000                     	_TRISA1	set	0x429	;byte address: 0x85
  8524+                          
  8525+                          	global	_TRISA2
  8526+                          	global	_TRISA2
  8527+ 0000                     	_TRISA2	set	0x42A	;byte address: 0x85
  8528+                          
  8529+                          	global	_TRISA3
  8530+                          	global	_TRISA3
  8531+ 0000                     	_TRISA3	set	0x42B	;byte address: 0x85
  8532+                          
  8533+                          	global	_TRISA4
  8534+                          	global	_TRISA4
  8535+ 0000                     	_TRISA4	set	0x42C	;byte address: 0x85
  8536+                          
  8537+                          	global	_TRISA5
  8538+                          	global	_TRISA5
  8539+ 0000                     	_TRISA5	set	0x42D	;byte address: 0x85
  8540+                          
  8541+                          	global	_TRISB0
  8542+                          	global	_TRISB0
  8543+ 0000                     	_TRISB0	set	0x430	;byte address: 0x86
  8544+                          
  8545+                          	global	_TRISB1
  8546+                          	global	_TRISB1
  8547+ 0000                     	_TRISB1	set	0x431	;byte address: 0x86
  8548+                          
  8549+                          	global	_TRISB2
  8550+                          	global	_TRISB2
  8551+ 0000                     	_TRISB2	set	0x432	;byte address: 0x86
  8552+                          
  8553+                          	global	_TRISB3
  8554+                          	global	_TRISB3
  8555+ 0000                     	_TRISB3	set	0x433	;byte address: 0x86
  8556+                          
  8557+                          	global	_TRISB4
  8558+                          	global	_TRISB4
  8559+ 0000                     	_TRISB4	set	0x434	;byte address: 0x86
  8560+                          
  8561+                          	global	_TRISB5
  8562+                          	global	_TRISB5
  8563+ 0000                     	_TRISB5	set	0x435	;byte address: 0x86
  8564+                          
  8565+                          	global	_TRISB6
  8566+                          	global	_TRISB6
  8567+ 0000                     	_TRISB6	set	0x436	;byte address: 0x86
  8568+                          
  8569+                          	global	_TRISB7
  8570+                          	global	_TRISB7
  8571+ 0000                     	_TRISB7	set	0x437	;byte address: 0x86
  8572+                          
  8573+                          	global	_TRISC0
  8574+                          	global	_TRISC0
  8575+ 0000                     	_TRISC0	set	0x438	;byte address: 0x87
  8576+                          
  8577+                          	global	_TRISC1
  8578+ 0000                     	_TRISC1	set	0x439	;byte address: 0x87
  8579+                          
  8580+                          	global	_TRISC2
  8581+ 0000                     	_TRISC2	set	0x43A	;byte address: 0x87
  8582+                          
  8583+                          	global	_TRISC3
  8584+                          	global	_TRISC3
  8585+ 0000                     	_TRISC3	set	0x43B	;byte address: 0x87
  8586+                          
  8587+                          	global	_TRISC4
  8588+                          	global	_TRISC4
  8589+ 0000                     	_TRISC4	set	0x43C	;byte address: 0x87
  8590+                          
  8591+                          	global	_TRISC5
  8592+                          	global	_TRISC5
  8593+ 0000                     	_TRISC5	set	0x43D	;byte address: 0x87
  8594+                          
  8595+                          	global	_TRISC6
  8596+                          	global	_TRISC6
  8597+ 0000                     	_TRISC6	set	0x43E	;byte address: 0x87
  8598+                          
  8599+                          	global	_TRISC7
  8600+                          	global	_TRISC7
  8601+ 0000                     	_TRISC7	set	0x43F	;byte address: 0x87
  8602+                          
  8603+                          	global	_TRISD0
  8604+                          	global	_TRISD0
  8605+ 0000                     	_TRISD0	set	0x440	;byte address: 0x88
  8606+                          
  8607+                          	global	_TRISD1
  8608+                          	global	_TRISD1
  8609+ 0000                     	_TRISD1	set	0x441	;byte address: 0x88
  8610+                          
  8611+                          	global	_TRISD2
  8612+                          	global	_TRISD2
  8613+ 0000                     	_TRISD2	set	0x442	;byte address: 0x88
  8614+                          
  8615+                          	global	_TRISD3
  8616+                          	global	_TRISD3
  8617+ 0000                     	_TRISD3	set	0x443	;byte address: 0x88
  8618+                          
  8619+                          	global	_TRISD4
  8620+                          	global	_TRISD4
  8621+ 0000                     	_TRISD4	set	0x444	;byte address: 0x88
  8622+                          
  8623+                          	global	_TRISD5
  8624+                          	global	_TRISD5
  8625+ 0000                     	_TRISD5	set	0x445	;byte address: 0x88
  8626+                          
  8627+                          	global	_TRISD6
  8628+                          	global	_TRISD6
  8629+ 0000                     	_TRISD6	set	0x446	;byte address: 0x88
  8630+                          
  8631+                          	global	_TRISD7
  8632+                          	global	_TRISD7
  8633+ 0000                     	_TRISD7	set	0x447	;byte address: 0x88
  8634+                          
  8635+                          	global	_TRISE0
  8636+                          	global	_TRISE0
  8637+ 0000                     	_TRISE0	set	0x448	;byte address: 0x89
  8638+                          
  8639+                          	global	_TRISE1
  8640+                          	global	_TRISE1
  8641+ 0000                     	_TRISE1	set	0x449	;byte address: 0x89
  8642+                          
  8643+                          	global	_TRISE2
  8644+                          	global	_TRISE2
  8645+ 0000                     	_TRISE2	set	0x44A	;byte address: 0x89
  8646+                          
  8647+                          	global	_TRMT
  8648+ 0000                     	_TRMT	set	0x4C1	;byte address: 0x98
  8649+                          
  8650+                          	global	_TX9
  8651+                          	global	_TX9
  8652+ 0000                     	_TX9	set	0x4C6	;byte address: 0x98
  8653+                          
  8654+                          	global	_TX9D
  8655+                          	global	_TX9D
  8656+ 0000                     	_TX9D	set	0x4C0	;byte address: 0x98
  8657+                          
  8658+                          	global	_TXEN
  8659+                          	global	_TXEN
  8660+ 0000                     	_TXEN	set	0x4C5	;byte address: 0x98
  8661+                          
  8662+                          	global	_TXIE
  8663+                          	global	_TXIE
  8664+ 0000                     	_TXIE	set	0x464	;byte address: 0x8C
  8665+                          
  8666+                          	global	_TXIF
  8667+                          	global	_TXIF
  8668+ 0000                     	_TXIF	set	0x64	;byte address: 0xC
  8669+                          
  8670+                          	global	_UA
  8671+                          	global	_UA
  8672+ 0000                     	_UA	set	0x4A1	;byte address: 0x94
  8673+                          
  8674+                          	global	_WCOL
  8675+                          	global	_WCOL
  8676+ 0000                     	_WCOL	set	0xA7	;byte address: 0x14
  8677+                          
  8678+                          	global	_WR
  8679+                          	global	_WR
  8680+ 0000                     	_WR	set	0xC61	;byte address: 0x18C
  8681+                          
  8682+                          	global	_WREN
  8683+                          	global	_WREN
  8684+ 0000                     	_WREN	set	0xC62	;byte address: 0x18C
  8685+                          
  8686+                          	global	_WRERR
  8687+                          	global	_WRERR
  8688+ 0000                     	_WRERR	set	0xC63	;byte address: 0x18C
  8689+                          
  8690+                          	global	_ZERO
  8691+                          	global	_ZERO
  8692+ 0000                     	_ZERO	set	0x1A	;byte address: 0x3
  8693+                          
  8694+                          	psect	strings
  8695+                          	
  8696+ 020F                     STR_1:	
  8697+ 020F  3476               	retlw	118	;'v'
  8698+ 0210  3431               	retlw	49	;'1'
  8699+ 0211  3431               	retlw	49	;'1'
  8700+ 0212  3446               	retlw	70	;'F'
  8701+ 0213  342D               	retlw	45	;'-'
  8702+ 0214  3430               	retlw	48	;'0'
  8703+ 0215  3431               	retlw	49	;'1'
  8704+ 0216  3420               	retlw	32	;' '
  8705+ 0217  3454               	retlw	84	;'T'
  8706+ 0218  3469               	retlw	105	;'i'
  8707+ 0219  346D               	retlw	109	;'m'
  8708+ 021A  3465               	retlw	101	;'e'
  8709+ 021B  3472               	retlw	114	;'r'
  8710+ 021C  342D               	retlw	45	;'-'
  8711+ 021D  3462               	retlw	98	;'b'
  8712+ 021E  3465               	retlw	101	;'e'
  8713+ 021F  3474               	retlw	116	;'t'
  8714+ 0220  3461               	retlw	97	;'a'
  8715+ 0221  3400               	retlw	0
  8716+                          	PSECT	fnauto0,class=BANK0,space=1
  8717+                          	FNCONF	fnauto0,??,?
  8718+                          
  8719+                          	DABS	1,126,2	;btemp
  8720+                          	global	btemp
  8721+ 0000                     	btemp set 07Eh
  8722+                          	global	wtemp0
  8723+ 0000                     	wtemp0 set btemp
  8724+                          	global	wtemp1
  8725+ 0000                     	wtemp1 set btemp+2
  8726+                          	global	ttemp0
  8727+ 0000                     	ttemp0 set btemp
  8728+                          	global	ltemp0
  8729+ 0000                     	ltemp0 set btemp
  8730+                          apbank macro
  8731+                          	bcf	status,5
  8732+                          	bcf	status,6
  8733+ 0020                     	endm


HI-TECH Software PICC Macro Assembler V9.65PL1 build 4700 
Symbol Table                                          Wed Dec 04 20:33:27 2013

            __Lrbss_0 0041              __Lrbss_1 00E4  
          _pause_time 0023      _output_high_Port 0034  
           __Lrdata_0 0040                     _a 0051  
                   _b 00E4                     _i 0053  
                   pc 0002             __Lramdata 0040  
       ??_output_high 0034                    l11 0730  
                  l20 0C9C                    l12 0E0D  
                  _DA 04A5                    l21 0CF1  
                  l13 0DBB                    _BF 04A0  
                  l14 0DE6                    l22 0D4D  
                  l30 0755                    _DC 0019  
                  l15 0DD0                    l31 0755  
                  l23 0DAB                    l24 09E8  
                  l16 0E0B                    l40 0C17  
                  l32 0793                    l25 09DC  
                  l17 0E0A                    l41 0C3B  
                  l33 07A5                    l26 09DB  
                  l18 0DF4                    l42 0C1F  
                  l27 09E2                    l19 0E0B  
                  l35 0C47                    l43 0C40  
                  l51 00BC                    l36 0C40  
                  l28 07AD                    l52 00C2  
                  l37 0C09                    l29 074D  
                  l53 0133                    l38 0C46  
                  l46 0BD0                    l70 0B75  
                  l54 00C2                    l39 0C15  
                  l47 0BBD                    l71 066D  
                  l48 0BAB                    l72 050C  
                  l56 0103                    l49 0BC9  
                  l81 056F                    l73 04AC  
                  l57 0109                    l66 0B48  
                  l90 0613                    l82 0639  
                  l74 0521                    l58 0119  
                  l67 0BA2                    l83 05B8  
                  l75 04BC                    l91 0460  
                  l59 011E                    l84 0643  
                  l76 04D2                    l92 02C9  
                  l69 0B1B                    l85 05CE  
                  l77 04D7                    l93 026C  
                  l86 05D3                    l78 0545  
                  l94 02D3                    l87 05E9  
                  l79 0578                    l95 027D  
                  l88 061C                    l96 029D  
                  l97 02A2                    l98 0302  
                  l99 0335                    _PD 001B  
                  _RD 0C60                    _UA 04A1  
                  _TO 001C                    _RW 04A2  
                  _WR 0C61                    fsr 0004  
        i1_read_adc_i 0036              _cPortTmp 0070  
      _pause_cTimeTmp 0025          _putchar_data 0023  
                 l101 032C                   l110 03F0  
                 l102 0420                   l103 0389  
                 l104 0436                   l105 03AB  
                 l106 03B0                   l107 03C6  
                 l132 07FA                   l140 07E6  
                 l108 03F9                   l133 07F3  
                 l134 07C7                   l135 07BC  
                 l136 07CB                   l138 07F3  
                 l139 07CB          _putdata_data 0021  
                 _CM0 04E0                   _CM1 04E1  
                 _CM2 04E2                   _CKE 04A6  
                 _IBF 044F                   _CIS 04E3  
                 _CKP 00A4                   _GIE 005F  
                 _BOR 0470                   _RA0 0028  
                 _RA1 0029                   _RB0 0030  
                 _RA2 002A                   _RB1 0031  
                 _RA3 002B                   _RC0 0038  
                 _RB2 0032                   _RA4 002C  
                 _RC1 0039                   _RB3 0033  
                 _RA5 002D                   _RD0 0040  
                 _RC2 003A                   _RB4 0034  
                 _RD1 0041                   _RC3 003B  
                 _RB5 0035              _cStatusR 0073  
                 _RE0 0048                   _RD2 0042  
                 _RC4 003C                   _RB6 0036  
                 _RE1 0049                   _RD3 0043  
                 _RC5 003D                   _RB7 0037  
                 _RE2 004A                   _RD4 0044  
                 _RC6 003E                   _RD5 0045  
                 _RC7 003F                   _RD6 0046  
                 _OBF 044E                   _RD7 0047  
                 _FSR 0004                   _PCL 0002  
                 _PS0 0408                   _PR2 0092  
                 _PS1 0409                   _RP0 001D  
                 _PS2 040A                   _PEN 048A  
                 _IRP 001F                   _RP1 001E  
                 _SEN 0488                   _PSA 040B  
                 _POR 0471                   _RX9 00C6  
                 _SMP 04A7                   _TX9 04C6  
      _g_cSpeedMotor1 0057        _g_cSpeedMotor2 0058  
           _cInputErr 0079             l600000517 0DB9  
      ??i1_pivotright 0033                   _isr 0E0E  
                 _ver 0040                   fsr0 0004  
                 _sum 0055                   indf 0000  
            _backward 0A68          ??_read_input 0034  
        ??_navigation 0020             ?_backward 0033  
    ___lwdiv_dividend 0023         MASK_OUT_PORTA 0010  
       MASK_OUT_PORTB 00FF         MASK_OUT_PORTC 0039  
       MASK_OUT_PORTD 00FF         MASK_OUT_PORTE 0004  
          ??_backward 0033           i1_motorsoff 0A95  
         i1_pivotleft 0A3B               ??_pause 0025  
                _ADIE 0466                  _ADIF 0066  
                _ADFM 04FF                  ?_isr 002F  
                _ADGO 00FA            _motorspeed 0DAC  
            __tempreg 0020                  _ADON 00F8  
                _CHS0 00FB                  _CHS1 00FC  
                _CHS2 00FD                  _EEIE 046C  
                _EEIF 006C                  STR_1 020F  
                _GCEN 048F                  _CMIE 046E  
                _CMIF 006E                  TXREG 0019  
                _BRGH 04C2          i1_pause_time 0033  
                _T0IE 005D                  _T0IF 005A  
                _CREN 00C4                  _T0CS 040D  
                _FERR 00C2                  _IBOV 044D  
                _CVR0 04E8                  _CVR1 04E9  
                _CVR2 04EA                  _CVR3 04EB  
                u2200 04B6                  u2201 04B5  
                u2210 04CC                  _T0SE 040C  
                _CSRC 04C7                  u2211 04CB  
                u2220 0516                  u2300 0113  
                u2221 0515                  u2301 0112  
                _INDF 0000                  u2310 0C12  
                u2230 0521                  u2311 0C11  
                u2231 0520                  u2215 04C8  
                u2320 0C40                  u2240 0578  
                u2400 0436                  u2321 0C3F  
                u2241 0577                  u2401 0435  
                u2305 010F                  u2330 0C46  
                u2250 05C8                  u2331 0C45  
                u2251 05C7                  u2260 061C  
                u2340 0277                  u2261 061B  
                u2405 0432                  u2341 0276  
                u2510 07B8                  u2270 0643  
                u2350 0297                  u2511 07B7  
                u2271 0642                  u2255 05C4  
                u2351 0296                  u2600 0DC8  
                u2360 02D3                  u2280 00B5  
                u2601 0DC7                  u2361 02D2  
                u2281 00B4                  u2610 0DCE  
                u2530 07CB                  u2370 0335  
                u2290 00FC                  u2611 0DCD  
                u2531 07CA                  u2275 063F  
                u2371 0334                  u2355 0293  
                u2291 00FB                  u2700 09E2  
                u2620 0DEC                  u2380 03A5  
                u2701 09E1                  u2621 0DEB  
                u2525 07BD                  u2381 03A4  
                u2630 0DF2                  u2550 07DC  
                u2390 03F9                  _PIE1 008C  
                u2631 0DF1                  u2551 07DB  
                u2391 03F8                  _PIE2 008D  
                u2640 0747                  u2641 0746  
                u2545 07CC                  u2385 03A1  
                u2650 0753                  u2570 07F3  
                u2651 0752                  u2571 07F2  
                u2555 07D8                  u2580 0DB3  
                u2581 0DB2                  u2565 07E7  
                _CVRR 04ED                  u2590 0DB9  
                u2591 0DB8                  u2680 07A5  
                u2681 07A4                  u2665 077E  
                u2690 0BC9                  _PEIE 005E  
                u2691 0BC8                  _INTE 005C  
                _INTF 0059                  i1l30 015B  
                _RBIE 005B                  i1l31 015B  
                _RBIF 0058                  i1l32 0199  
                i1l40 01C3                  i1l33 01AB  
                i1l41 01E7                  i1l42 01CB  
                _RCIE 0465                  i1l35 01F3  
                i1l43 01EC                  _RCIF 0065  
                _RCEN 048B                  i1l28 01B3  
                i1l44 0C07                  i1l36 01EC  
                i1l29 0153                  i1l45 0A0D  
                i1l37 01B5                  i1l38 01F2  
                i1l70 0AEE                  i1l39 01C1  
                _PCON 008E                  _PIR1 000C  
                _PIR2 000D                  i1l66 0AC1  
                i1l67 0A3A                  i1l68 0A94  
                i1l69 0A67                  _OERR 00C1  
                _RBPU 040F    __end_of_motorspeed 0E0E  
                _RX9D 00C0                  _TMR0 0001  
                _TMR2 0011                  _WCOL 00A7  
                _SPEN 00C7                  _RSEN 0489  
           __databank 0000                  _TX9D 04C0  
                _SREN 00C5   __end_ofi1_motorsoff 0AC2  
                _TRMT 04C1                  _STOP 04A4  
                _ZERO 001A                  _TXIE 0464  
                _WREN 0C62                  _TXIF 0064  
                _TXEN 04C5                  _SYNC 04C4  
          _pivotright 0B49   __end_ofi1_pivotleft 0A68  
       ?_configurePIC 0020    __end_of_pivotright 0B76  
i1_read_adc_iVoltsSum 0039       __end_ofi1_pause 01F4  
                _main 004C                  btemp 007E  
                start 0012              _read_adc 0731  
         ?_motorspeed 0023             ?_read_adc 0023  
   interrupt_function 0004           ?_pivotright 0023  
          ??_read_adc 0025          ?i1_motorsoff 0033  
        ?i1_pivotleft 0033        _output_low_Bit 0033  
               ??_isr 002F              _rt_clock 005D  
           stringcode 0208       __end_of___lwdiv 07FB  
    ___lwdiv_quotient 0028                 INTCON 000B  
             _CCP1CON 0017               _CCP2CON 001D  
             _ACKSTAT 048E                 _C1INV 04E4  
               _C2INV 04E5               ?_target 0020  
               _C1OUT 04E6                 _C2OUT 04E7  
               _ADCS0 00FE                 _ADCS1 00FF  
               _ADCS2 04FE                 _ADDEN 00C3  
               ?_main 0020                 _ACKEN 048C  
               _ACKDT 048D                 _BCLIE 046B  
               _BCLIF 006B                 _CCP1X 00BD  
               _CCP1Y 00BC                 _CCP2X 00ED  
               _CCP2Y 00EC                 _EEADR 010D  
            ??_target 0020            _output_low 0C9D  
        i1_pivotright 0AC2                 _CARRY 0018  
               _EEPGD 0C67                 _CMCON 009C  
               _T1CON 0010                 _T2CON 0012  
             _T1CKPS0 0084               _T1CKPS1 0085  
               _PCFG0 04F8                 _PCFG1 04F9  
               _PCFG2 04FA                 _PCFG3 04FB  
             _T2CKPS0 0090               _T2CKPS1 0091  
               _CVREN 04EF                 i1l111 0FF3  
               i1l120 0FCF                 i1l112 0E19  
               i1l121 0FED                 i1l113 0E31  
               i1l114 0ECB                 _CVROE 04EE  
               i1l115 0FD4                 i1l116 0F31  
               i1l117 0FD4                 i1l118 0FD4  
               i1l119 0FBA    __end_of_output_low 0CF2  
 _motorspeed_motornum 0024         __end_of_pause 0C48  
               _RCREG 001A                 _RCSTA 0018  
               _TMR1H 000F                 _TMR1L 000E  
               _SPBRG 0099                 _PORTA 0005  
               _PORTB 0006               _T1OSCEN 0083  
               _PORTC 0007                 _PORTD 0008  
               _PORTE 0009                 _PSPIE 0467  
               _PSPIF 0067                 _START 04A3  
               _SSPM0 00A0                 _SSPM1 00A1  
               _SSPM2 00A2                 _SSPM3 00A3  
               _TRISA 0085                 _TRISB 0086  
               _TRISC 0087                 _TRISD 0088  
               _SSPIE 0463                 _TRISE 0089  
               _SSPIF 0063                 _SSPEN 00A5  
        ??_motorspeed 0024                 _SSPOV 00A6  
               _WRERR 0C63                 _TXREG 0019  
               _TXSTA 0098       __end_of_forward 0BA3  
__end_ofi1_pivotright 0AEF          ??_pivotright 0023  
         ?_output_low 0033                 _color 0041  
               _floor 0043               _PSPMODE 044C  
               _save1 0060                 _save2 0061  
               _save3 0062                 _save4 0063  
               _save5 0064                 _save6 0065  
               _save7 0066                 _save8 0067  
               _save9 0068                 _pause 0C08  
     __end_of_version 0BD1       __end_of_putchar 09E9  
     __end_of_putdata 0DAC               _SSPCON2 0091  
      ??_restore_data 0033               _SSPSTAT 0094  
             _TOUTPS0 0093               _TOUTPS1 0094  
             _TOUTPS2 0095               _TOUTPS3 0096  
               pclath 000A                 ltemp0 007E  
             i1_pause 01B4              intlevel1 0004  
               ttemp0 007E              ?i1_pause 0033  
               status 0003                 wtemp0 007E  
               wtemp1 0080             ??i1_pause 0035  
    i1_pause_cTimeTmp 0035               _cBitPat 0072  
             _cBitTmp 0071       _output_high_Bit 0033  
        MASK_IN_PORTA 0000          MASK_IN_PORTB 00FF  
        MASK_IN_PORTC 0000          MASK_IN_PORTD 00FF  
        MASK_IN_PORTE 0003            i1_read_adc 0137  
        ??_output_low 0034    __end_ofi1_read_adc 01B4  
           _save_data 0BD1           __stringbase 020E  
   __end_of_save_data 0C08         ??i1_motorsoff 0033  
    _motorspeed_speed 0023         ??i1_pivotleft 0033  
  i1_read_adc_channel 0035               ___lwdiv 07AE  
             _g_cTmp1 0070               _g_cTmp2 0071  
             _g_cTmp3 0072              ?___lwdiv 0023  
          ?_save_data 0033             ??___lwdiv 0027  
         ?i1_read_adc 0033                ??_main 0020  
     ___lwdiv_divisor 0025             _motorsoff 0B1C  
       ?i1_pivotright 0033             _pivotleft 0AEF  
   __end_of_motorsoff 0B49       ___lwdiv_counter 0027  
     _output_low_Port 0034               _average 0045  
   __end_of_pivotleft 0B1C       _read_input_Port 0034  
    __end_of_backward 0A95            ?_motorsoff 0023  
             _forward 0B76             _rt_toggle 005F  
          ?_pivotleft 0023           ??_save_data 0033  
            ?_forward 0023             _version_i 0021  
           ??_forward 0023               _sensor0 00E6  
             _sensor1 007A               _sensor2 0047  
             _sensor3 007C               _sensor5 0059  
            stringdir 0209              stringjmp 020D  
            stringtab 0200                _ADCON0 001F  
              _ADCON1 009F          _restore_data 09E9  
              _CCP1M0 00B8                _CCP1M1 00B9  
              _CCP1M2 00BA                _CCP1M3 00BB  
              _CCP2M0 00E8                _CCP2M1 00E9  
              _CCP2M2 00EA                _CCP2M3 00EB  
              _CCP1IE 0462                _CCP1IF 0062  
              _CCP2IE 0468                _CCP2IF 0068  
         _output_high 0C48                _ADRESH 001E  
              _EEADRH 010F                _ADRESL 009E  
              _EEADRL 010D                _EEDATA 010C  
              _CCPR1H 0016                _EEDATH 010E  
              _CCPR2H 001C                _CCPR1L 0015  
              ?_pause 0023               _version 0BA3  
              _CCPR2L 001B               _putchar 09D8  
             _putdata 0D4E                _EECON1 018C  
              _EECON2 018D              ?_version 0021  
            ?_putchar 0023              ?_putdata 0021  
        __end_of_main 0137                _GODONE 00FA  
 __end_of_output_high 0C9D           ??_motorsoff 0023  
              _CVRCON 009D                _T1SYNC 0082  
         ??_pivotleft 0023                _INTEDG 040E  
              _PCLATH 000A             ??_version 0021  
           ??_putchar 0023             ??_putdata 0023  
              _INTCON 000B                i1u2310 01BE  
              i1u2311 01BD                i1u2320 01EC  
              i1u2321 01EB                i1u2330 01F2  
              i1u2410 0E18                i1u2331 01F1  
              i1u2411 0E17                i1u2500 0FDA  
              i1u2420 0E2A                i1u2501 0FD9  
              i1u2421 0E29                i1u2430 0E77  
              i1u2431 0E76                i1u2440 0E87  
              i1u2441 0E86                i1u2450 0EDB  
              i1u2451 0EDA                i1u2460 0EED  
              i1u2461 0EEC                i1u2470 0F41  
              i1u2471 0F40                i1u2640 014D  
              i1u2480 0F53                i1u2641 014C  
              i1u2481 0F52                i1u2650 0159  
              i1u2490 0FA4                i1u2651 0158  
              i1u2491 0FA3                i1u2495 0FA0  
              i1u2680 01AB                i1u2681 01AA  
              i1u2665 0184  __end_of_restore_data 0A0E  
      __end_of_target 066E        ??_configurePIC 0020  
              _TMR0IE 005D                _TMR0IF 005A  
              _TMR1IE 0460                _TMR1IF 0060  
              _TMR1CS 0081                _TMR2IE 0461  
              _TMR2IF 0061                _TMR1ON 0080  
              _OPTION 0081                _TMR2ON 0092  
              _SSPADD 0093          ??i1_read_adc 0035  
              _TRISA0 0428                _TRISA1 0429  
              _TRISB0 0430                _TRISA2 042A  
              _TRISB1 0431                _TRISA3 042B  
              _TRISC0 0438                _TRISB2 0432  
              _TRISA4 042C                _TRISC1 0439  
              _TRISB3 0433                _TRISA5 042D  
              _TRISD0 0440                _TRISC2 043A  
              _TRISB4 0434                _TRISD1 0441  
              _TRISC3 043B                _TRISB5 0435  
              _TRISE0 0448                _TRISD2 0442  
              _TRISC4 043C                _TRISB6 0436  
              _TRISE1 0449                _TRISD3 0443  
              _TRISC5 043D                _TRISB7 0437  
              _TRISE2 044A                _TRISD4 0444  
              _TRISC6 043E                _TRISD5 0445  
              _TRISC7 043F                _TRISD6 0446  
              _TRISD7 0447                _STATUS 0003  
              _SSPCON 0014                _SSPBUF 0013  
    __end_of_read_adc 07AE     i1_read_adc_iADout 0037  
           i1_forward 0A0E     __end_ofi1_forward 0A3B  
              _g_iArg 0074                _g_iTmp 0076  
        ?_output_high 0033            ?i1_forward 0033  
      _read_input_Bit 0033                _save10 0069  
              _save11 006A                _save12 006B  
              _save13 006C                _save14 006D  
              _save15 006E                _save16 006F  
  _read_adc_iVoltsSum 0029                _target 0461  
              _sensor 005B           __end_of_isr 1000  
         ??i1_forward 0033                saved_w 007F  
       ?_restore_data 0033            _read_adc_i 0026  
          _read_input 0CF2            _navigation 0223  
        _configurePIC 066E       _read_adc_iADout 0027  
  __end_of_read_input 0D4E    __end_of_navigation 0461  
    _read_adc_channel 0025  __end_of_configurePIC 0731  
          _isr_active 0078              __Hcommon 007E  
         ?_read_input 0033             __Hrdata_0 0041  
         ?_navigation 0020             __Hramdata 0041  
            __Hrbss_0 005D              __Hrbss_1 00F0  
            __Lcommon 007A  
